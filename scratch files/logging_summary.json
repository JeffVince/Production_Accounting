[
    {
        "file_path": "server_agent/codegen_service.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 4,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 17,
                    "code": "logging.getLogger(\"agent_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 60,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"[apply_sql_script] Running SQL:\\n%s\", sql_script)"
                },
                {
                    "lineno": 70,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"SQL error when executing statement '{s}': {e}\", exc_info=True)"
                },
                {
                    "lineno": 93,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(\"Models file not found: %s\", models_file_path)"
                },
                {
                    "lineno": 104,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"Class definition for table '%s' already exists. Skipping creation.\", table_name)"
                },
                {
                    "lineno": 109,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Inserted new model class for table '%s' into %s\", table_name, models_file_path)"
                },
                {
                    "lineno": 118,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Successfully updated models file: %s\", models_file_path)"
                },
                {
                    "lineno": 120,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"No changes made to models file for table '%s'.\", table_name)"
                },
                {
                    "lineno": 183,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"No matching class definition found for %s. Nothing removed.\", table_name)"
                },
                {
                    "lineno": 185,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Removed model class (and region) for %s.\", table_name)"
                },
                {
                    "lineno": 194,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"No existing model class found for %s. Can't update.\", table_name)"
                },
                {
                    "lineno": 211,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Appended update notes to class '%s'.\", class_name)"
                },
                {
                    "lineno": 232,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"database_util.py not found at %s\", db_util_path)"
                },
                {
                    "lineno": 241,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"CRUD region for '%s' already exists. Skipping creation.\", table_name)"
                },
                {
                    "lineno": 250,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"CRUD methods for '%s' already exist. Skipping creation.\", table_name)"
                },
                {
                    "lineno": 255,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Added new CRUD methods for table '%s' to database_util.py\", table_name)"
                },
                {
                    "lineno": 264,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Successfully updated database_util.py for table '%s'.\", table_name)"
                },
                {
                    "lineno": 266,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"No changes made to database_util.py for table '%s'.\", table_name)"
                },
                {
                    "lineno": 302,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Removed region for '%s' from database_util.py\", table_name)"
                },
                {
                    "lineno": 312,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"No existing CRUD stubs found for '%s'. Nothing removed.\", table_name)"
                },
                {
                    "lineno": 314,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Removed existing CRUD methods for '%s'.\", table_name)"
                },
                {
                    "lineno": 332,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"database_trigger.py not found at %s\", triggers_file_path)"
                },
                {
                    "lineno": 350,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"database_trigger.py updated for table '%s'.\", table_name)"
                },
                {
                    "lineno": 352,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"No changes made to database_trigger.py for table '%s'.\", table_name)"
                },
                {
                    "lineno": 364,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"Celery tasks import for '%s' already present. Skipping import addition.\", table_name)"
                },
                {
                    "lineno": 405,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"Routing for table '%s' already exists. Skipping creation.\", table_name)"
                },
                {
                    "lineno": 416,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"No TASK_ROUTING dict found; creating one at bottom for table '%s'.\", table_name)"
                },
                {
                    "lineno": 433,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"No references found in database_trigger.py for %s. Nothing removed.\", table_name)"
                },
                {
                    "lineno": 435,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Removed references for '%s' from database_trigger.py\", table_name)"
                },
                {
                    "lineno": 453,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"database_trigger_service.py not found at %s\", trigger_service_path)"
                },
                {
                    "lineno": 469,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"database_trigger_service.py updated for table '%s'.\", table_name)"
                },
                {
                    "lineno": 471,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"No changes made to database_trigger_service.py for '%s'.\", table_name)"
                },
                {
                    "lineno": 477,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(f\"Trigger region for '{table_name}' already exists. Skipping creation.\")"
                },
                {
                    "lineno": 482,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Added new trigger region for '%s' to database_trigger_service.py\", table_name)"
                },
                {
                    "lineno": 508,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Removed region block for '%s' triggers from database_trigger_service.py\", table_name)"
                },
                {
                    "lineno": 518,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"No trigger methods found to remove for '%s' in database_trigger_service.py.\", table_name)"
                },
                {
                    "lineno": 520,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Removed trigger methods for '%s' from database_trigger_service.py\", table_name)"
                },
                {
                    "lineno": 537,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"celery_tasks.py not found at %s\", celery_file_path)"
                },
                {
                    "lineno": 553,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"celery_tasks.py updated for table '%s'.\", table_name)"
                },
                {
                    "lineno": 555,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"No changes made to celery_tasks.py for table '%s'.\", table_name)"
                },
                {
                    "lineno": 561,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"Celery tasks region for '%s' already exists. Skipping creation.\", table_name)"
                },
                {
                    "lineno": 570,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"Celery tasks for '%s' already exist. Skipping creation.\", table_name)"
                },
                {
                    "lineno": 672,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Removed region block for '%s' tasks from celery_tasks.py\", table_name)"
                },
                {
                    "lineno": 682,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"No Celery tasks found to remove for '%s'.\", table_name)"
                },
                {
                    "lineno": 684,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Removed Celery tasks for table '%s'.\", table_name)"
                }
            ]
        }
    },
    {
        "file_path": "server_agent/chat_service.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 4,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 25,
                    "code": "logging.getLogger(\"agent_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 32,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"Database initialized in ChatService constructor.\")"
                },
                {
                    "lineno": 39,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"create_table -> {table_name}, columns={columns_or_defs}\")"
                },
                {
                    "lineno": 57,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Table '{table_name}' created successfully in DB + code.\")"
                },
                {
                    "lineno": 63,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"update_table -> {table_name}, updates={updates}\")"
                },
                {
                    "lineno": 73,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Table '{table_name}' updated successfully (DB + code).\")"
                },
                {
                    "lineno": 76,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"delete_table -> {table_name}\")"
                },
                {
                    "lineno": 85,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Table '{table_name}' dropped (DB + code).\")"
                },
                {
                    "lineno": 90,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"insert_data -> {table_name}, data={data}\")"
                },
                {
                    "lineno": 93,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"No model found for {table_name}, insert aborted.\")"
                },
                {
                    "lineno": 96,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Data inserted into {table_name}.\")"
                },
                {
                    "lineno": 99,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"update_data -> {table_name}, updates={updates}, where={where}\")"
                },
                {
                    "lineno": 102,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"No model found for {table_name}, update aborted.\")"
                },
                {
                    "lineno": 111,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"No matching records. Skipping update.\")"
                },
                {
                    "lineno": 121,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Update successful.\")"
                },
                {
                    "lineno": 124,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"query_data -> {table_name}, filters={filters}\")"
                },
                {
                    "lineno": 127,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"No model found for {table_name}, query aborted.\")"
                },
                {
                    "lineno": 134,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"answer_general_question -> {user_input}\")"
                }
            ]
        }
    },
    {
        "file_path": "server_agent/agent_app.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 5,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 66,
                    "code": "logging.getLogger(\"agent_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 123,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error parsing user intent: {e}\", exc_info=True)"
                },
                {
                    "lineno": 157,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"No direct DB action recognized; treating as general question.\")"
                }
            ]
        }
    },
    {
        "file_path": "database/database_view_util.py",
        "logging_data": {
            "logging_imports": [],
            "logger_creations": [],
            "logger_calls": []
        }
    },
    {
        "file_path": "database/models.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 3,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 24,
                    "code": "logging.getLogger(\"sqlalchemy.engine.Engine\")"
                },
                {
                    "lineno": 25,
                    "code": "logging.getLogger(\"sqlalchemy.pool\")"
                }
            ],
            "logger_calls": []
        }
    },
    {
        "file_path": "database/db_util.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 8,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 11,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 22,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(f\"Database connection string: {connection_string}\")"
                }
            ]
        }
    },
    {
        "file_path": "database/__init__.py",
        "logging_data": {
            "logging_imports": [],
            "logger_creations": [],
            "logger_calls": []
        }
    },
    {
        "file_path": "database/database_util.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 19,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 63,
                    "code": "logging.getLogger(\"db_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 64,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83c\udf1f Hello from DatabaseOperations constructor! Ready to keep the DB in check!\")"
                },
                {
                    "lineno": 77,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\udd13 Pulling record: {record_values.get('id', 'N/A')} from table {record.__table__}\")"
                },
                {
                    "lineno": 106,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd75\ufe0f Searching {model.__name__} with filters: {list(zip(column_names, values))}\")"
                },
                {
                    "lineno": 107,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                f\"\ud83d\udea6 Checking if there are any matches in {model.__name__} \"\n                f\"for columns & values: {list(zip(column_names, values))}\"\n            )"
                },
                {
                    "lineno": 113,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                    \"\u26a0\ufe0f Oops, mismatch: The number of column names and values do not match. Returning empty list.\"\n                )"
                },
                {
                    "lineno": 118,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd75\ufe0f No filters provided. Retrieving all records from {model.__name__}.\")"
                },
                {
                    "lineno": 119,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udea6 Fetching the entire {model.__name__} table without any filters.\")"
                },
                {
                    "lineno": 128,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                                f\"\ud83d\ude2c '{col_name}' is not a valid column in {model.__name__}. Returning empty list.\"\n                            )"
                },
                {
                    "lineno": 136,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\ude45 No records found in the DB for these filters. Maybe next time!\")"
                },
                {
                    "lineno": 139,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u2705 Found exactly ONE record. Bingo!\")"
                },
                {
                    "lineno": 142,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Located {len(records)} records! Bundling them all up.\")"
                },
                {
                    "lineno": 147,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\ud83d\udca5 Error searching {model.__name__}: {e}\", exc_info=True)"
                },
                {
                    "lineno": 167,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\uddd1\u200d\ud83d\udcbb Creating new {model.__name__} using data: {kwargs}\")"
                },
                {
                    "lineno": 168,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83c\udf31 About to insert a fresh record into {model.__name__} with {kwargs}\")"
                },
                {
                    "lineno": 177,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\ude84 Flushed new {model.__name__}. ID now: {record.id}\")"
                },
                {
                    "lineno": 180,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83c\udf89 Creation successful! Record is now in the DB.\")"
                },
                {
                    "lineno": 185,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2757 IntegrityError creating {model.__name__}\")"
                },
                {
                    "lineno": 190,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"Attempting concurrency fallback re-query using 'unique_lookup'...\")"
                },
                {
                    "lineno": 198,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                                f\"Found {len(found)} record(s) matching unique_lookup; returning the first.\"\n                            )"
                },
                {
                    "lineno": 203,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Found exactly one existing record after concurrency fallback.\")"
                },
                {
                    "lineno": 206,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                            f\"No record found after concurrency fallback for {model.__name__} with {unique_lookup}\"\n                        )"
                },
                {
                    "lineno": 211,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                        \"No 'unique_lookup' provided, cannot re-query for concurrency fallback. Returning None.\"\n                    )"
                },
                {
                    "lineno": 218,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\ud83d\udca5 Trouble creating {model.__name__}: {e}\", exc_info=True)"
                },
                {
                    "lineno": 245,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd27 Attempting to update {model.__name__}(id={record_id}). Fields: {kwargs}\")"
                },
                {
                    "lineno": 246,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83e\udd1d Checking if {model.__name__}(id={record_id}) exists, then updating with {kwargs}.\")"
                },
                {
                    "lineno": 253,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\ude45 No {model.__name__} with id={record_id} found.\")"
                },
                {
                    "lineno": 261,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                            f\"\u26a0\ufe0f The attribute '{key}' doesn't exist on {model.__name__}. Skipping.\"\n                        )"
                },
                {
                    "lineno": 266,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\ude84 Flushed updated {model.__name__}(id={record_id}).\")"
                },
                {
                    "lineno": 269,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u2705 Done updating! The record is all set.\")"
                },
                {
                    "lineno": 273,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u2757 IntegrityError updating {model.__name__}(id={record_id})\")"
                },
                {
                    "lineno": 277,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"Attempting concurrency fallback re-query with 'unique_lookup' after update...\")"
                },
                {
                    "lineno": 285,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                                f\"Found {len(found)} record(s) matching unique_lookup; returning the first.\"\n                            )"
                },
                {
                    "lineno": 290,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Found exactly one existing record after concurrency fallback.\")"
                },
                {
                    "lineno": 293,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                            f\"No record found after concurrency fallback for {model.__name__} with {unique_lookup}\"\n                        )"
                },
                {
                    "lineno": 298,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"No 'unique_lookup' provided for fallback; returning None.\")"
                },
                {
                    "lineno": 303,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\ud83d\udca5 Had an issue updating {model.__name__}: {e}\", exc_info=True)"
                },
                {
                    "lineno": 309,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udd0e Searching for Account Code entries...\")"
                },
                {
                    "lineno": 316,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udf08 Creating an AccountCode with data={kwargs}\")"
                },
                {
                    "lineno": 325,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcdd search_purchase_orders: columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 333,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcdd create_purchase_order with {kwargs}\")"
                },
                {
                    "lineno": 347,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcdd update_purchase_order -> PurchaseOrder(id={po_id}), data={kwargs}\")"
                },
                {
                    "lineno": 387,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                f\"Cannot create PurchaseOrder because Project with project_number={project_number} not found.\"\n            )"
                },
                {
                    "lineno": 417,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0e search_detail_items: columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 421,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\uddf1 Creating a detail item with {kwargs}\")"
                },
                {
                    "lineno": 437,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd27 update_detail_item -> DetailItem(id={detail_item_id}), data={kwargs}\")"
                },
                {
                    "lineno": 525,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcbc Searching Contacts with column_names={column_names}, values={values}\")"
                },
                {
                    "lineno": 529,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\ude4b create_contact with {kwargs}\")"
                },
                {
                    "lineno": 537,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udc81\u200d\u2640\ufe0f update_contact -> Contact(id={contact_id}), data={kwargs}\")"
                },
                {
                    "lineno": 548,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"No existing contacts provided to match against.\")"
                },
                {
                    "lineno": 567,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udfd7 Searching Projects with columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 571,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udfd7 create_project with {kwargs}\")"
                },
                {
                    "lineno": 579,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\udd16 update_project -> Project(id={project_id}), data={kwargs}\")"
                },
                {
                    "lineno": 585,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcb0 search_bank_transactions: columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 589,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcb8 create_bank_transaction with {kwargs}\")"
                },
                {
                    "lineno": 593,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcb8 update_bank_transaction -> BankTransaction(id={transaction_id}), data={kwargs}\")"
                },
                {
                    "lineno": 599,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcdc search_bill_line_items: columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 603,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcdc create_bill_line_item with {kwargs}\")"
                },
                {
                    "lineno": 615,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcdc update_bill_line_item -> BillLineItem(id={bill_line_item_id}), data={kwargs}\")"
                },
                {
                    "lineno": 694,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\uddfe search_invoices: columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 698,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\uddfe create_invoice with {kwargs}\")"
                },
                {
                    "lineno": 705,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\uddfe update_invoice -> Invoice(id={invoice_id}), data={kwargs}\")"
                },
                {
                    "lineno": 741,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\uddfe search_receipts: columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 745,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\uddfe create_receipt with {kwargs}\")"
                },
                {
                    "lineno": 749,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\uddfe update_receipt_by_id -> Receipt(id={receipt_id}), data={kwargs}\")"
                },
                {
                    "lineno": 816,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n            f\"\ud83d\udcb5 search_spend_money: columns={column_names}, values={values}, deleted={deleted}\"\n        )"
                },
                {
                    "lineno": 835,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcb8 create_spend_money with {kwargs}\")"
                },
                {
                    "lineno": 839,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcb8 update_spend_money -> SpendMoney(id={spend_money_id}), data={kwargs}\")"
                },
                {
                    "lineno": 914,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udfe6 search_tax_accounts with columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 918,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udfe6 create_tax_account with {kwargs}\")"
                },
                {
                    "lineno": 922,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udfe6 update_tax_account -> TaxAccount(id={tax_account_id}), data={kwargs}\")"
                },
                {
                    "lineno": 928,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udff7 search_xero_bills with columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 935,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udff7 create_xero_bill with {kwargs}\")"
                },
                {
                    "lineno": 942,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udff7 update_xero_bill -> XeroBill(id={parent_id}), data={kwargs}\")"
                },
                {
                    "lineno": 1010,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udc64 search_users: columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 1014,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udc64 create_user with {kwargs}\")"
                },
                {
                    "lineno": 1023,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udc64 update_user -> User(id={user_id}), data={kwargs}\")"
                },
                {
                    "lineno": 1029,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcd2 search_tax_ledgers: columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 1033,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcd2 create_tax_ledger with {kwargs}\")"
                },
                {
                    "lineno": 1039,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcd2 update_tax_ledger -> TaxLedger(id={ledger_id}), data={kwargs}\")"
                },
                {
                    "lineno": 1045,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcca search_budget_maps: columns={column_names}, values={values}\")"
                },
                {
                    "lineno": 1049,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcca create_budget_map with {kwargs}\")"
                },
                {
                    "lineno": 1055,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcca update_budget_map -> BudgetMap(id={map_id}), data={kwargs}\")"
                },
                {
                    "lineno": 1081,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                f\"Cannot check changes for {model.__name__}, neither record_id nor unique_filters given.\"\n            )"
                },
                {
                    "lineno": 1108,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                f\"No single {model.__name__} record found to compare. Returning False.\"\n            )"
                }
            ]
        }
    },
    {
        "file_path": "database/utils.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 8,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 12,
                    "code": "logging.getLogger(__name__)"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 25,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(f\"PO {item_id} not found\")"
                },
                {
                    "lineno": 28,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"Error retrieving PO state: {e}\")"
                },
                {
                    "lineno": 80,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(\"Missing 'columnId' in the event.\")"
                },
                {
                    "lineno": 87,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(f\"No mapping found for column ID: {column_id}\")"
                },
                {
                    "lineno": 148,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(f\"Unhandled columnType: {column_type}\")"
                },
                {
                    "lineno": 162,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"Invalid value for numeric field '{field_name}': {value}. Defaulting to NULL.\")"
                },
                {
                    "lineno": 167,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(f\"Parsing transaction_date: '{date_str}'\")"
                },
                {
                    "lineno": 181,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"Invalid date format: {date_str}\")"
                },
                {
                    "lineno": 196,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"Empty detail_item_id received. Defaulting to 1.\")"
                },
                {
                    "lineno": 202,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(f\"Extracted last segment from detail_item_id '{raw_id}': '{last_segment}'\")"
                },
                {
                    "lineno": 206,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(f\"Stripped leading zeros from '{last_segment}': '{stripped_segment}'\")"
                },
                {
                    "lineno": 214,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(f\"Converted '{stripped_segment}' to integer: {detail_item_id}\")"
                },
                {
                    "lineno": 218,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"Error processing detail_item_id '{raw_id}': {e}. Defaulting to 1.\")"
                }
            ]
        }
    },
    {
        "file_path": "database/account_code_loader.py",
        "logging_data": {
            "logging_imports": [],
            "logger_creations": [],
            "logger_calls": []
        }
    },
    {
        "file_path": "database/base.py",
        "logging_data": {
            "logging_imports": [],
            "logger_creations": [],
            "logger_calls": []
        }
    },
    {
        "file_path": "files_xero/xero_auth.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 11,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 27,
                    "code": "logging.getLogger(__name__)"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 68,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Redirecting user to Xero authorization URL.\")"
                },
                {
                    "lineno": 85,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Successfully verified tokens with Xero.\")"
                },
                {
                    "lineno": 93,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Saving tokens to .env file...\")"
                },
                {
                    "lineno": 97,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Tenant set. Tokens verified, stored in .env, and ready to use!\")"
                },
                {
                    "lineno": 111,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(\"Token expired; refreshing now...\")"
                },
                {
                    "lineno": 117,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Refreshed tokens. Saving to .env file...\")"
                },
                {
                    "lineno": 121,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"CREDENTIALS ARE FINE\")"
                }
            ]
        }
    },
    {
        "file_path": "files_xero/xero_api.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 15,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 68,
                    "code": "logging.getLogger(\"admin_loggere\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 100,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\ude80 XeroAPI (PyXero) initialized.\")"
                },
                {
                    "lineno": 112,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udd11 Token is still valid, no refresh necessary.\")"
                },
                {
                    "lineno": 116,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udd11 Token expired or force-refresh requested; refreshing now...\")"
                },
                {
                    "lineno": 118,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udd04 Successfully refreshed Xero tokens with PyXero!\")"
                },
                {
                    "lineno": 125,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83c\udfe2 Tenant set to {self.credentials.tenant_id}\")"
                },
                {
                    "lineno": 127,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\u26a0\ufe0f No tenants found for this user/token.\")"
                },
                {
                    "lineno": 146,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                \"\u274c Encountered an error (possibly expired refresh token). Re-auth may be required.\"\n            )"
                },
                {
                    "lineno": 163,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\u26a0\ufe0f XeroUnauthorized caught mid-operation, attempting a force-refresh...\")"
                },
                {
                    "lineno": 166,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                    f\"\ud83d\udd03 Rate limit hit. Attempt {attempt} of {max_retries}. \"\n                    f\"Sleeping for 65 seconds before retry...\"\n                )"
                },
                {
                    "lineno": 173,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c XeroException occurred: {str(e)}\")"
                },
                {
                    "lineno": 177,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"\u274c Failed to call Xero API after multiple retry attempts.\")"
                },
                {
                    "lineno": 195,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                f\"\u26a0\ufe0f Error retrieving tax code for DetailItem ID {detail_item.id}: {str(e)}\"\n            )"
                },
                {
                    "lineno": 223,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                f\"\ud83d\uddd2\ufe0f Detail item not found for ID {detail_item_id}, creating VOIDED spend money record.\"\n            )"
                },
                {
                    "lineno": 247,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udcb8 Creating spend money transaction in Xero (PyXero)...\")"
                },
                {
                    "lineno": 252,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0d Xero create response: {created}\")"
                },
                {
                    "lineno": 255,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Failed to create spend money transaction in Xero: {str(e)}\")"
                },
                {
                    "lineno": 263,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd04 Updating spend money transaction {xero_spend_money_id} to {new_state}...\")"
                },
                {
                    "lineno": 271,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f No bank transaction found with ID {xero_spend_money_id}\")"
                },
                {
                    "lineno": 278,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0d Updated spend money transaction: {updated}\")"
                },
                {
                    "lineno": 281,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Failed to update spend money transaction in Xero: {str(e)}\")"
                },
                {
                    "lineno": 299,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Failed to create voided spend money transaction: {str(e)}\")"
                },
                {
                    "lineno": 318,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\u26a0\ufe0f No detail items found; creating empty Bill.\")"
                },
                {
                    "lineno": 350,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcbc Creating Xero bill for reference {reference}...\")"
                },
                {
                    "lineno": 354,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0d Xero create invoice response: {created_invoice}\")"
                },
                {
                    "lineno": 357,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Failed to create bill (ACCPAY) in Xero: {str(e)}\")"
                },
                {
                    "lineno": 365,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd04 Updating bill (invoice_id={invoice_id}) to status {new_status}...\")"
                },
                {
                    "lineno": 373,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f No invoice found with ID {invoice_id}\")"
                },
                {
                    "lineno": 380,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0d Updated invoice: {updated_invoices}\")"
                },
                {
                    "lineno": 383,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Failed to update bill in Xero: {str(e)}\")"
                },
                {
                    "lineno": 402,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udcc4 Retrieving all ACCPAY invoices from Xero (2-step with paging + individual fetch).\")"
                },
                {
                    "lineno": 410,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0e Fetching page {page_number} of ACCPAY invoice summaries...\")"
                },
                {
                    "lineno": 419,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u23f9\ufe0f No invoices found on page {page_number}. Stopping.\")"
                },
                {
                    "lineno": 423,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2705 Retrieved {len(invoices_page)} invoices on page {page_number}.\")"
                },
                {
                    "lineno": 431,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u2139\ufe0f No ACCPAY invoices found in Xero at all.\")"
                },
                {
                    "lineno": 434,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n            f\"\ud83d\udd0e Fetched {len(all_invoices_summary)} ACCPAY invoice summaries. Now retrieving full details...\"\n        )"
                },
                {
                    "lineno": 443,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u23e9 Skipping DELETED invoice {summary_inv.get('InvoiceID')}\")"
                },
                {
                    "lineno": 448,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\u26a0\ufe0f Invoice summary is missing InvoiceID; skipping.\")"
                },
                {
                    "lineno": 453,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f No detailed invoice found for InvoiceID={invoice_id}; skipping.\")"
                },
                {
                    "lineno": 459,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u23e9 Skipping DELETED invoice detail {invoice_id}.\")"
                },
                {
                    "lineno": 464,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n            f\"\u2705 Finished retrieving {len(detailed_invoices)} detailed ACCPAY invoices (excluding DELETED).\"\n        )"
                },
                {
                    "lineno": 479,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd0e Fetching summary for ACCPAY invoices that match '{reference_substring}' in InvoiceNumber.\")"
                },
                {
                    "lineno": 486,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0d Requesting page {page_number} for filter: {raw_filter}\")"
                },
                {
                    "lineno": 504,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Found {len(all_summaries)} ACCPAY invoice summaries (excluding DELETED).\")"
                },
                {
                    "lineno": 514,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0e Fetching detailed invoice for InvoiceID={invoice_id}\")"
                },
                {
                    "lineno": 517,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f No detailed invoice found for InvoiceID={invoice_id}.\")"
                },
                {
                    "lineno": 525,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u23e9 Invoice {invoice_id} is DELETED; returning None.\")"
                },
                {
                    "lineno": 562,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcdd Retrieving bills (ACCPAY) from Xero with filter: {raw_filter}\")"
                },
                {
                    "lineno": 567,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2139\ufe0f No invoices found with filter '{raw_filter}'.\")"
                },
                {
                    "lineno": 572,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                f\"\u2705 Found {len(filtered_results)} non-DELETED invoice(s) with filter '{raw_filter}'.\"\n            )"
                },
                {
                    "lineno": 577,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Failed to retrieve bills from Xero: {str(e)}\")"
                },
                {
                    "lineno": 607,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcb0 Retrieving SPEND money transactions with filter: {raw_filter}\")"
                },
                {
                    "lineno": 612,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2139\ufe0f No spend money transactions found with filter '{raw_filter}'.\")"
                },
                {
                    "lineno": 617,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                f\"\u2705 Found {len(filtered_results)} spend money transaction(s) (excluding DELETED) with filter '{raw_filter}'.\"\n            )"
                },
                {
                    "lineno": 622,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Failed to retrieve spend money from Xero: {str(e)}\")"
                },
                {
                    "lineno": 633,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd0e Attempting to retrieve Xero contact by name: {name}\")"
                },
                {
                    "lineno": 638,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2705 Found Xero contact(s) for '{name}': {results}\")"
                },
                {
                    "lineno": 640,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2139\ufe0f No matching contact found for '{name}' in Xero.\")"
                },
                {
                    "lineno": 643,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Error retrieving contact by name '{name}': {str(e)}\")"
                },
                {
                    "lineno": 652,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udcc7 Fetching all contacts from Xero...\")"
                },
                {
                    "lineno": 656,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2705 Retrieved {len(contacts)} contact(s) from Xero.\")"
                },
                {
                    "lineno": 659,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Error retrieving all contacts: {str(e)}\")"
                },
                {
                    "lineno": 675,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udc64 Creating a new Xero contact with data: {contact_data}\")"
                },
                {
                    "lineno": 679,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2705 Successfully created contact in Xero: {created}\")"
                },
                {
                    "lineno": 682,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Failed to create contact in Xero: {str(e)}\")"
                },
                {
                    "lineno": 692,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd04 Attempting to update contact with ContactID={contact_data.get('ContactID')}\")"
                },
                {
                    "lineno": 695,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0d Updated contact data: {updated_contacts}\")"
                },
                {
                    "lineno": 697,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"\u274c Xero returned an empty response for contact update.\")"
                },
                {
                    "lineno": 701,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c XeroException occurred: {str(e)}\")"
                },
                {
                    "lineno": 704,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Unexpected error during contact update: {str(e)}\")"
                },
                {
                    "lineno": 718,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                    f\"\ud83d\udd03 Rate limit hit. Attempt {attempt} of {max_retries}. \"\n                    f\"Sleeping for 65 seconds before retry...\"\n                )"
                },
                {
                    "lineno": 724,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c XeroException while updating contact: {xe}\")"
                },
                {
                    "lineno": 727,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"\u274c Failed to update contact after multiple rate-limit retries.\")"
                },
                {
                    "lineno": 743,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                    f\"\ud83d\udd03 Rate limit hit. Attempt {attempt} of {max_retries}. \"\n                    f\"Sleeping for 65 seconds before retry...\"\n                )"
                },
                {
                    "lineno": 749,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c XeroException while updating contacts in batch: {xe}\")"
                },
                {
                    "lineno": 753,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"\u274c Failed to update contacts after multiple rate-limit retries.\")"
                }
            ]
        }
    },
    {
        "file_path": "files_xero/__init__.py",
        "logging_data": {
            "logging_imports": [],
            "logger_creations": [],
            "logger_calls": []
        }
    },
    {
        "file_path": "files_xero/xero_services.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 3,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 28,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 29,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"Initialized XeroServices.\")"
                },
                {
                    "lineno": 52,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Retrieving SPEND transactions from Xero...\")"
                },
                {
                    "lineno": 60,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"No SPEND transactions returned from Xero for the provided filters.\")"
                },
                {
                    "lineno": 93,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                        f\"Created new SpendMoney record for reference={reference_number}, ID={created['id']}.\"\n                    )"
                },
                {
                    "lineno": 97,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                        f\"Failed to create SpendMoney for reference={reference_number}.\"\n                    )"
                },
                {
                    "lineno": 112,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                        f\"Updated SpendMoney (id={spend_money_id}) for reference={reference_number}.\"\n                    )"
                },
                {
                    "lineno": 116,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                        f\"Failed to update SpendMoney (id={spend_money_id}) for reference={reference_number}.\"\n                    )"
                },
                {
                    "lineno": 125,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\ude80 Starting to populate Xero contacts from the local DB in a single batch...\")"
                },
                {
                    "lineno": 129,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Found {len(db_contacts)} contacts in the local DB to process.\")"
                },
                {
                    "lineno": 132,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Retrieving all contacts from Xero...\")"
                },
                {
                    "lineno": 136,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Failed to retrieve contacts from Xero: {xe}\")"
                },
                {
                    "lineno": 152,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                    f\"Skipping contact '{db_contact.get('name', 'Unnamed')}' due to validation errors: {errors}\"\n                )"
                },
                {
                    "lineno": 158,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd0e Checking if there's a matching Xero contact for '{contact_name}'\")"
                },
                {
                    "lineno": 165,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(msg)"
                },
                {
                    "lineno": 181,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Formatting SSN from '{tax_number}' to '{formatted_ssn}' for '{contact_name}'.\")"
                },
                {
                    "lineno": 212,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                    f\"Tax number changed for '{contact_name}' from '{xero_tax_number}' to '{tax_number}'.\"\n                )"
                },
                {
                    "lineno": 218,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                    f\"Email changed for '{contact_name}' from '{xero_email}' to '{email}'.\"\n                )"
                },
                {
                    "lineno": 225,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                    f\"Xero contact '{contact_name}' has fewer than 2 addresses stored. Triggering update.\"\n                )"
                },
                {
                    "lineno": 236,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                                f\"Address {idx} field '{field}' changed for '{contact_name}' \"\n                                f\"from '{old.get(field, '')}' to '{new.get(field, '')}'.\"\n                            )"
                },
                {
                    "lineno": 254,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83c\udf89  No change needed for '{contact_name}'.\")"
                },
                {
                    "lineno": 258,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                f\"\ud83d\udcbe Sending a batch update for {len(contacts_to_update)} Xero contacts...\"\n            )"
                },
                {
                    "lineno": 264,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                    f\"\ud83c\udf89 Successfully updated {len(contacts_to_update)} Xero contacts in a single batch.\"\n                )"
                },
                {
                    "lineno": 268,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"XeroException while updating contacts in batch: {xe}\")"
                },
                {
                    "lineno": 270,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Debugging the exception object: type={type(e)}, repr={repr(e)}\")"
                },
                {
                    "lineno": 272,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(error_message)"
                },
                {
                    "lineno": 274,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"No contacts required updating in Xero.\")"
                },
                {
                    "lineno": 276,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83c\udfc1 Finished populating Xero contacts from the local DB in a single batch.\")"
                },
                {
                    "lineno": 319,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n            f\"Retrieving ACCPAY invoices from Xero where InvoiceNumber contains '{project_number}'...\"\n        )"
                },
                {
                    "lineno": 325,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                f\"No ACCPAY invoices found with InvoiceNumber containing '{project_number}'.\"\n            )"
                },
                {
                    "lineno": 335,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                f\"Fetching full details for InvoiceNumber={invoice_number} (ID={invoice_id})...\"\n            )"
                },
                {
                    "lineno": 342,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"Skipping InvoiceID={invoice_id}, no line items returned.\")"
                },
                {
                    "lineno": 346,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                f\"Invoice {invoice_number} has {len(line_items)} line item(s).\"\n            )"
                },
                {
                    "lineno": 361,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                        f\"InvoiceNumber='{invoice_number}' not in numeric format. Skipping line item match.\"\n                    )"
                },
                {
                    "lineno": 366,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                    f\"InvoiceNumber='{invoice_number}' doesn't have at least two parts. Skipping line item match.\"\n                )"
                },
                {
                    "lineno": 388,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Failed to create xero_bill for {invoice_number}. Skipping line items.\")"
                },
                {
                    "lineno": 395,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Updating existing xero_bill (ID={xero_bill_id}) to status={status}.\")"
                },
                {
                    "lineno": 422,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"AccountCode '{account_code_str}' is not an integer. Using None.\")"
                },
                {
                    "lineno": 438,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                        f\"Updating existing BillLineItem (ID={bill_line_item_id}) with Xero line data.\"\n                    )"
                },
                {
                    "lineno": 450,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"BillLineItem (ID={bill_line_item_id}) successfully updated.\")"
                },
                {
                    "lineno": 452,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                            f\"Failed to update BillLineItem (ID={bill_line_item_id}).\"\n                        )"
                },
                {
                    "lineno": 458,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"No BillLineItem found for parent_xero_id={xero_line_number}. Creating a new one.\")"
                },
                {
                    "lineno": 484,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                            f\"Created BillLineItem with ID={new_line['id']} and parent_xero_id={xero_line_number}.\"\n                        )"
                },
                {
                    "lineno": 488,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                            f\"Failed to create BillLineItem for parent_xero_id={xero_line_number}.\"\n                        )"
                },
                {
                    "lineno": 492,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n            f\"Finished loading ACCPAY invoices matching '{project_number}', with line items mapped to local BillLineItems.\"\n        )"
                }
            ]
        }
    },
    {
        "file_path": "files_dropbox/dropbox_webhook_handler.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 3,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 20,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 22,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Dropbox Webhook Handler  initialized\")"
                },
                {
                    "lineno": 29,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Received Dropbox event.\")"
                },
                {
                    "lineno": 40,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Starting to process event data...\")"
                },
                {
                    "lineno": 50,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"No cursor found. Initializing cursor.\")"
                },
                {
                    "lineno": 54,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"Cursor initialized. No changes to process on first run.\")"
                },
                {
                    "lineno": 56,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Failed to initialize cursor: {e}\", exc_info=True)"
                },
                {
                    "lineno": 68,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"Cursor saved to prevent duplicate processing.\")"
                },
                {
                    "lineno": 70,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Failed to fetch folder changes: {e}\", exc_info=True)"
                },
                {
                    "lineno": 95,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"DELETE: {change}\")"
                },
                {
                    "lineno": 102,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Unhandled change type: {type(change)}\")"
                },
                {
                    "lineno": 106,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Changes ({len(categorized_changes['files_added'])}):\")"
                },
                {
                    "lineno": 108,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"File Added: {self.dropbox_util.get_last_path_component_generic(item['path'])}\")"
                },
                {
                    "lineno": 120,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"Cursor successfully updated in the finally block.\")"
                },
                {
                    "lineno": 122,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Failed to save cursor in the finally block: {e}\", exc_info=True)"
                }
            ]
        }
    },
    {
        "file_path": "files_dropbox/dropbox_service.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 20,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 85,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 97,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udce6 Dropbox Service initialized \ud83c\udf1f\")"
                },
                {
                    "lineno": 111,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n            f\"\ud83d\udd0d Checking file type for: {self.dropbox_util.get_last_path_component_generic(path)}\"\n        )"
                },
                {
                    "lineno": 125,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\uddc2 Identified as PO Log for Project ID {project_number}\")"
                },
                {
                    "lineno": 128,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Filename '{filename}' does not match PO Log format.\")"
                },
                {
                    "lineno": 133,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcb0 Identified as invoice: {filename}\")"
                },
                {
                    "lineno": 138,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcbc Identified as tax form: {filename}\")"
                },
                {
                    "lineno": 143,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83e\uddfe Identified as receipt: {filename}\")"
                },
                {
                    "lineno": 148,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcd1 Identified as budget file: {filename}\")"
                },
                {
                    "lineno": 152,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u274c Unsupported file type: {filename}\")"
                },
                {
                    "lineno": 163,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcbc Processing budget: {dropbox_path}\")"
                },
                {
                    "lineno": 167,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u274c Not a valid .mbb file.\")"
                },
                {
                    "lineno": 177,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u274c Not enough path segments.\")"
                },
                {
                    "lineno": 185,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u274c Budget file not in correct folder.\")"
                },
                {
                    "lineno": 190,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u274c Can't determine Project ID.\")"
                },
                {
                    "lineno": 194,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd11 Project ID: {project_number}\")"
                },
                {
                    "lineno": 202,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\uddc2 PO Logs folder: {po_logs_path}\")"
                },
                {
                    "lineno": 210,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udda8 Triggering ShowbizPoLogPrinter via server with file URL...\")"
                },
                {
                    "lineno": 219,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83c\udf89 Triggered server job with job_id: {job_id}\")"
                },
                {
                    "lineno": 221,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                    f\"\u274c Failed to trigger server job. Status: {response.status_code}, Response: {response.text}\")"
                },
                {
                    "lineno": 228,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u2705 process_budget completed successfully, server job triggered with file URL.\")"
                },
                {
                    "lineno": 238,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcdd Processing PO log: {path}\")"
                },
                {
                    "lineno": 257,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udd27 DB and Monday processing dispatched to background threads.\")"
                },
                {
                    "lineno": 269,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                f\"\ud83d\udcdd Parsed PO Log for project {project_number}: \"\n                f\"{len(main_items)} main items, {len(detail_items)} detail items, {len(contacts)} contacts.\"\n            )"
                },
                {
                    "lineno": 292,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd27 [NEW BATCH LOGIC] Processing project_number={project_number} with batch queries.\")"
                },
                {
                    "lineno": 297,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Retrieved {len(all_db_contacts) if isinstance(all_db_contacts, list) else 1} contacts.\")"
                },
                {
                    "lineno": 309,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Found {len(existing_pos)} existing POs for project_number={pn_int}.\")"
                },
                {
                    "lineno": 342,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd04 Updating existing PO {po_number} for project {pn_int}.\")"
                },
                {
                    "lineno": 353,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u23ed No changes detected for existing PO {po_number}. Skipping update.\")"
                },
                {
                    "lineno": 356,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83c\udd95 Creating new PO {po_number} for project {pn_int}.\")"
                },
                {
                    "lineno": 367,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                    f\"\ud83d\udca5 Error processing PO creation/update for po_number={item.get('po_number')}: {ex}\",\n                    exc_info=True\n                )"
                },
                {
                    "lineno": 384,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Found {len(existing_details)} existing DetailItems for project_number={pn_int}.\")"
                },
                {
                    "lineno": 475,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                            f\"\u23ed DetailItem {key} is in final state '{current_state}'. Skipping update.\"\n                        )"
                },
                {
                    "lineno": 481,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd04 Updating existing DetailItem {key} in the database.\")"
                },
                {
                    "lineno": 502,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u23ed No changes detected for existing DetailItem {key}. Skipping update.\")"
                },
                {
                    "lineno": 505,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udd95 Creating detail item {key}\")"
                },
                {
                    "lineno": 526,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                    f\"\ud83d\udca5 Error processing DetailItem creation/update for PO={po_number}, \"\n                    f\"detail={detail_number}, line={line_number}: {ex}\",\n                    exc_info=True\n                )"
                },
                {
                    "lineno": 532,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u2705 [NEW BATCH LOGIC] Completed batch PO & DetailItem processing.\")"
                },
                {
                    "lineno": 545,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd0d Checking for Contact: {contact_name}\")"
                },
                {
                    "lineno": 552,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83c\udd95 Creating Contact: {contact_name}\")"
                },
                {
                    "lineno": 572,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcc4 Processing invoice: {dropbox_path}\")"
                },
                {
                    "lineno": 579,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Invoice filename '{filename}' doesn't match the expected pattern.\")"
                },
                {
                    "lineno": 595,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd17 Obtained Dropbox link for invoice: {file_share_link}\")"
                },
                {
                    "lineno": 603,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Could not download invoice file: {dropbox_path}\")"
                },
                {
                    "lineno": 609,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udd0e Scanning invoice file for data with OCRService + OpenAI...\")"
                },
                {
                    "lineno": 613,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u274c Could not parse invoice data from OpenAI. Using defaults. Error: {err}\")"
                },
                {
                    "lineno": 649,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                    f\"\ud83c\udd95 Creating new invoice #{invoice_number} for PO {po_number} (project {project_number}).\"\n                )"
                },
                {
                    "lineno": 667,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                    f\"\ud83d\udd04 Updating existing invoice #{invoice_number} for PO {po_number}.\"\n                )"
                },
                {
                    "lineno": 684,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Minimal invoice processing complete for: {dropbox_path}\")"
                },
                {
                    "lineno": 706,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83e\uddfe Processing receipt: {dropbox_path}\")"
                },
                {
                    "lineno": 727,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u274c Filename '{filename}' does not match receipt pattern.\")"
                },
                {
                    "lineno": 756,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\ud83d\uded1 Failed to download receipt: {filename}\")"
                },
                {
                    "lineno": 767,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"PDF extraction found no text; falling back to OCR.\")"
                },
                {
                    "lineno": 774,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                    f\"\ud83d\uded1 No text extracted from receipt: {filename}. Will mark as ISSUE but continue.\"\n                )"
                },
                {
                    "lineno": 786,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\ud83d\uded1 Could not parse receipt info from AI for: {filename} - marking as ISSUE.\")"
                },
                {
                    "lineno": 789,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"Skipping AI parsing because no text was extracted for {filename}.\")"
                },
                {
                    "lineno": 813,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u274c Could not generate shareable link for {dropbox_path}: {e}\")"
                },
                {
                    "lineno": 825,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                    f\"\u2757 No matching detail item found for project={project_number}, \"\n                    f\"PO={po_number}, detail={detail_number}, line={line_number_number}.\"\n                )"
                },
                {
                    "lineno": 856,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                    f\"\ud83d\udd04 Created new receipt with ID={receipt_id} for detail_number={detail_number}\"\n                )"
                },
                {
                    "lineno": 872,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                    f\"\u270f\ufe0f Updated existing receipt with ID={receipt_id} for detail_number={detail_number}\"\n                )"
                },
                {
                    "lineno": 882,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Marking this receipt as ISSUE because parsing failed for {filename}.\")"
                },
                {
                    "lineno": 887,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                                \"Receipt total matches the detail item subtotal. Setting state to REVIEWED.\"\n                            )"
                },
                {
                    "lineno": 891,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                                \"Receipt total does not match the detail item subtotal. Setting state to PO MISMATCH.\"\n                            )"
                },
                {
                    "lineno": 910,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Receipt succesfully captured: {dropbox_path}\")"
                },
                {
                    "lineno": 926,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\uddc2 Processing Tax Form: {dropbox_path}\")"
                },
                {
                    "lineno": 945,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"SYNCING PO FOLDER LINKS\")"
                },
                {
                    "lineno": 957,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                                f\"\u2705Folder Link is already present for {db_project['project_number']}_{db_po['po_number']}\")"
                },
                {
                    "lineno": 960,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Folder link not found in DB -- retrieving from Dropbox\")"
                },
                {
                    "lineno": 974,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                                    f\"Database is missing the tax form link for Contact {db_contact['id']}. \"\n                                    f\"Fetching a new link from Dropbox...\"\n                                )"
                },
                {
                    "lineno": 985,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"\u274c - Unable to get link from contact\")"
                },
                {
                    "lineno": 987,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                                    f\"\u2705 Tax Link is already present for {db_contact['name']}\")"
                },
                {
                    "lineno": 1008,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                        f\"Both folder links and contact sync done. Now creating POs in Monday for project_id={project_number}.\"\n                    )"
                },
                {
                    "lineno": 1014,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"SKIPPING MONDAY PO CREATION\")"
                },
                {
                    "lineno": 1016,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\u274c Could not determine project_id from processed_items.\")"
                },
                {
                    "lineno": 1018,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\u274c processed_items is empty, skipping create_pos_in_monday.\")"
                },
                {
                    "lineno": 1021,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c after_db_done encountered an error: {e}\", exc_info=True)"
                },
                {
                    "lineno": 1026,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\ude80Finding folder link for PO: {project_number}_{str(po_number).zfill(2)}\")"
                },
                {
                    "lineno": 1031,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\n                    f\"\u274c No PO data returned for PO={project_number}_{str(po_number).zfill(2)}, aborting link updates.\")"
                },
                {
                    "lineno": 1036,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(\"Link already present: skipping\")"
                },
                {
                    "lineno": 1042,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\n                    f\"\u26a0\ufe0f Could not determine project folder name for {project_number}, no links will be found.\")"
                },
                {
                    "lineno": 1048,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(f\"Project folder name retrieved: '{po_folder_name}'\")"
                },
                {
                    "lineno": 1049,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(f\"Link update for PO: {po_folder_name}', \")"
                },
                {
                    "lineno": 1052,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 Folder link found\")"
                },
                {
                    "lineno": 1055,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"\u26a0\ufe0f No folder link found.\")"
                },
                {
                    "lineno": 1057,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Completed folder linking for: {project_number}_{str(po_number).zfill(2)}\")"
                },
                {
                    "lineno": 1060,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(\"\ud83d\udca5 Error linking dropbox folder:\", exc_info=True)"
                },
                {
                    "lineno": 1087,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcd1 Updated tax form link for PO {project_number}_{po_number} => {new_tax_form_link}\")"
                },
                {
                    "lineno": 1090,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\ud83d\udca5 Could not update PO tax form link for {project_number}_{po_number}: {e}\",\n                              exc_info=True)"
                },
                {
                    "lineno": 1102,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83c\udf10 Processing PO data in Monday.com...\")"
                },
                {
                    "lineno": 1164,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Item differs for PO {po_no}. Differences: {differences}\")"
                },
                {
                    "lineno": 1171,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"No changes for PO {po_no}, skipping update.\")"
                },
                {
                    "lineno": 1183,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83c\udd95 Need to create {len(items_to_create)} main items on Monday.\")"
                },
                {
                    "lineno": 1201,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u270f\ufe0f Need to update {len(items_to_update)} main items on Monday.\")"
                },
                {
                    "lineno": 1228,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\uddc2 PO {po_no} now has pulse_id {monday_item_id} in DB\")"
                },
                {
                    "lineno": 1238,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u274c No Monday main item found for PO {po_no}, skipping subitems.\")"
                },
                {
                    "lineno": 1352,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                            f\"Sub-item differs for detail #{sdb['detail_number']} (PO {po_no}). {differences}\"\n                        )"
                },
                {
                    "lineno": 1365,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                            f\"No changes for detail #{sdb['detail_number']} (PO {po_no}).\"\n                        )"
                },
                {
                    "lineno": 1375,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                                f\"Pulse mismatch for detail #{sdb['detail_number']} (PO {po_no}). \"\n                                f\"DB has pulse_id={current_pulse_id}, parent_pulse_id={current_parent_id}; \"\n                                f\"Monday is {sub_pulse_id}, {main_monday_id}.\"\n                            )"
                },
                {
                    "lineno": 1391,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                                f\"Pulse IDs already match for detail #{sdb['detail_number']} (PO {po_no}), no DB update needed.\"\n                            )"
                },
                {
                    "lineno": 1406,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83c\udd95 Need to create {len(subitems_to_create)} sub-items for PO {po_no}.\")"
                },
                {
                    "lineno": 1413,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u270f\ufe0f Need to update {len(subitems_to_update)} sub-items for PO {po_no}.\")"
                },
                {
                    "lineno": 1416,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u2705 Monday.com processing of PO data complete.\")"
                },
                {
                    "lineno": 1447,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Subitems create-chunk #{idx + 1} completed.\")"
                },
                {
                    "lineno": 1497,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Subitems update-chunk #{idx + 1} completed.\")"
                },
                {
                    "lineno": 1537,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcc2 File saved to {temp_file_path}\")"
                },
                {
                    "lineno": 1555,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Could not parse tax number '{tax_str}' as integer after removing hyphens.\")"
                },
                {
                    "lineno": 1565,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83e\uddf9 Cleaned up temp file {temp_file_path}\")"
                },
                {
                    "lineno": 1567,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Could not remove temp file: {e}\")"
                },
                {
                    "lineno": 1591,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"_extract_text_from_pdf: PDF data length={len(file_data)} bytes.\")"
                },
                {
                    "lineno": 1595,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"PyPDF2 sees {len(pdf_reader.pages)} page(s).\")"
                },
                {
                    "lineno": 1601,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"PyPDF2 page {idx}: extracted {len(page_text)} chars.\")"
                },
                {
                    "lineno": 1604,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"PyPDF2 page {idx}: no text found.\")"
                },
                {
                    "lineno": 1607,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"PyPDF2 total text length={len(extracted_text)}.\")"
                },
                {
                    "lineno": 1610,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                    f\"PyPDF2 extracted fewer than 20 chars ({len(extracted_text.strip())}), \"\n                    f\"treating as no text found.\"\n                )"
                },
                {
                    "lineno": 1620,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"No or insufficient text from PyPDF2; extracting images via PyMuPDF...\")"
                },
                {
                    "lineno": 1627,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Page {page_idx + 1}: found {len(images)} images.\")"
                },
                {
                    "lineno": 1636,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Image {img_ix}: OCR extracted {len(text_in_image)} chars.\")"
                },
                {
                    "lineno": 1639,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"Could not OCR an embedded PDF image: {e}\")"
                },
                {
                    "lineno": 1642,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"PyMuPDF fallback extracted {len(fallback_text)} chars in total.\")"
                },
                {
                    "lineno": 1646,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"Could not parse PDF with PyPDF2 or PyMuPDF: {e}\")"
                },
                {
                    "lineno": 1653,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"OCR extraction failed: {e}\")"
                },
                {
                    "lineno": 1663,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd0e Starting receipt scan for project_number={project_number}\")"
                },
                {
                    "lineno": 1669,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u274c Could not find a matching project folder for '{project_number}' under 2024.\")"
                },
                {
                    "lineno": 1672,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcc2 Project folder resolved: {project_folder_path}\")"
                },
                {
                    "lineno": 1687,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Finished scanning receipts for project_number={project_number}.\")"
                },
                {
                    "lineno": 1698,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcc2 No entries found under '{folder_path}'\")"
                },
                {
                    "lineno": 1716,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\uddfe Potential receipt found: {dropbox_path}\")"
                },
                {
                    "lineno": 1764,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Could not list folder recursively: {folder_path}, Error: {ex}\")"
                },
                {
                    "lineno": 1791,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcc4 Potential invoice found in {folder_path}: {dropbox_path}\")"
                }
            ]
        }
    },
    {
        "file_path": "files_dropbox/__init__.py",
        "logging_data": {
            "logging_imports": [],
            "logger_creations": [],
            "logger_calls": []
        }
    },
    {
        "file_path": "files_dropbox/dropbox_util.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 3,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 20,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 21,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Dropbox Util  initialized\")"
                },
                {
                    "lineno": 55,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(\"Detected file path. Extracted parent folder path.\")"
                },
                {
                    "lineno": 59,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Normalized Path Parts: {path_parts}\")"
                },
                {
                    "lineno": 63,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Path '{local_path}' does not have enough parts to be a valid PO folder.\")"
                },
                {
                    "lineno": 71,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(\n            f\"Checking PO folder: Project='{project_folder}', Purchase Orders='{purchase_orders_folder}', PO Folder='{folder_name}'\")"
                },
                {
                    "lineno": 77,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Folder name '{folder_name}' does not match PO folder pattern.\")"
                },
                {
                    "lineno": 82,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Expected '1. Purchase Orders', but found '{purchase_orders_folder}'.\")"
                },
                {
                    "lineno": 88,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Project folder '{project_folder}' does not match project pattern.\")"
                },
                {
                    "lineno": 92,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Path '{local_path}' is a valid PO folder.\")"
                },
                {
                    "lineno": 108,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Path parts for parsing: {path_parts}\")"
                },
                {
                    "lineno": 117,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Parsing folder path: {local_path}\")"
                },
                {
                    "lineno": 120,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Checking folder part: '{part}'\")"
                },
                {
                    "lineno": 134,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(\n                    f\"Found PO Number: '{po_number}', Vendor Name: '{vendor_name}', PO Type: '{po_type}' in folder part: '{part}'\")"
                },
                {
                    "lineno": 142,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Found Project ID: '{project_id}' in folder part: '{part}'\")"
                },
                {
                    "lineno": 150,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(\n                f\"Successfully parsed Project ID: '{project_id}', PO Number: '{po_number}', Vendor Name: '{vendor_name}', PO Type: '{po_type}'\")"
                },
                {
                    "lineno": 154,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(\n                f\"Could not parse Project ID, PO Number, Vendor Name, or PO Type from folder path '{local_path}'.\")"
                },
                {
                    "lineno": 177,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Parsed Filename '{filename}':\")"
                },
                {
                    "lineno": 178,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"  Project ID: {project_id}\")"
                },
                {
                    "lineno": 179,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"  PO Number: {po_number}\")"
                },
                {
                    "lineno": 180,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"  Receipt Number: {invoice_receipt_number}\")"
                },
                {
                    "lineno": 181,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"  Vendor Name: {vendor_name}\")"
                },
                {
                    "lineno": 182,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"  File Type: {file_type}\")"
                },
                {
                    "lineno": 183,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"  Invoice Number: {invoice_number}\")"
                },
                {
                    "lineno": 187,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Filename '{filename}' did not match the parsing pattern.\")"
                },
                {
                    "lineno": 201,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(\"Empty path_display provided to get_parent_path.\")"
                },
                {
                    "lineno": 212,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"No parent directory for path: '{path_display}'. Returning empty string.\")"
                },
                {
                    "lineno": 217,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Extracted parent path: '{parent_path}' from path: '{path_display}'\")"
                },
                {
                    "lineno": 230,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Generated file link for {dropbox_path}: {link}\")"
                },
                {
                    "lineno": 236,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"Shared link already exists, retrieving existing link.\")"
                },
                {
                    "lineno": 239,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Failed to get file link for {dropbox_path}: {e}\", exc_info=True)"
                },
                {
                    "lineno": 251,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Found existing shared link for {dropbox_path}: {link.url}\")"
                },
                {
                    "lineno": 253,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                f\"No existing shared link found for {dropbox_path}, even though Dropbox reported one exists.\")"
                },
                {
                    "lineno": 257,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Failed to retrieve existing shared link for {dropbox_path}: {e}\", exc_info=True)"
                }
            ]
        }
    },
    {
        "file_path": "files_dropbox/dropbox_database_util.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 3,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 14,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 16,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udce6 Dropbox Database Util initialized \ud83c\udf1f\")"
                },
                {
                    "lineno": 27,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"PurchaseOrder not found for {project_id}_{po_number}. Cannot add invoice link.\")"
                },
                {
                    "lineno": 52,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"Transaction date '{transaction_date}' not in expected format YYYY-MM-DD.\")"
                },
                {
                    "lineno": 61,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"PurchaseOrder not found for {project_id}_{po_number}. Cannot create/update invoice.\")"
                },
                {
                    "lineno": 97,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                    f\"PurchaseOrder not found for {project_id}_{po_number}. Cannot get detail item pulse_ids.\"\n                )"
                }
            ]
        }
    },
    {
        "file_path": "files_dropbox/dropbox_client.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 4,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 22,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 35,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Dropbox Client Initialized\")"
                },
                {
                    "lineno": 55,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(f\"Member with email '{self.MY_EMAIL}' not found in the team.\")"
                },
                {
                    "lineno": 60,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(f\"Impersonated user '{self.MY_EMAIL}' with member ID '{self.member_id}'.\")"
                },
                {
                    "lineno": 71,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(\n                    f\"Found namespace '{self.NAMESPACE_NAME}' with ID '{self.namespace_id}'. Setting path root.\")"
                },
                {
                    "lineno": 75,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Path root set to namespace ID '{self.namespace_id}'.\")"
                },
                {
                    "lineno": 77,
                    "func": "warning",
                    "caller": "logging",
                    "code": "logging.warning(f\"Namespace '{self.NAMESPACE_NAME}' not found. Using default path root.\")"
                },
                {
                    "lineno": 86,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(f\"An error occurred while creating Dropbox client: {e}\", exc_info=True)"
                },
                {
                    "lineno": 110,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(\"Access token refreshed successfully.\")"
                },
                {
                    "lineno": 113,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(f\"Failed to refresh token: {response.text}\")"
                },
                {
                    "lineno": 148,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(\"Access token expired.\")"
                },
                {
                    "lineno": 151,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(f\"JSON decode error: {e}\")"
                },
                {
                    "lineno": 154,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(\"Access token file not found.\")"
                },
                {
                    "lineno": 164,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(\"Refreshing access token.\")"
                },
                {
                    "lineno": 174,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(\"Root folder contents:\")"
                },
                {
                    "lineno": 176,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(f\" - {entry.name}\")"
                },
                {
                    "lineno": 178,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(f\"Error listing root folder: {e}\", exc_info=True)"
                },
                {
                    "lineno": 188,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"Fetching changes using the cursor.\")"
                },
                {
                    "lineno": 194,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Fetched {len(changes)} changes.\")"
                },
                {
                    "lineno": 197,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(f\"Error listing folder changes: {e}\", exc_info=True)"
                },
                {
                    "lineno": 206,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(f\"No cursor file found for member ID {self.member_id}. Initializing cursor.\")"
                },
                {
                    "lineno": 212,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Loaded cursor for member {self.member_id}: {cursor}\")"
                },
                {
                    "lineno": 215,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(f\"Error loading cursor for member {self.member_id}: {e}\", exc_info=True)"
                },
                {
                    "lineno": 228,
                    "func": "debug",
                    "caller": "logging",
                    "code": "logging.debug(f\"Saved cursor for member {self.member_id}: {cursor}\")"
                },
                {
                    "lineno": 230,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(f\"Error saving cursor for member {self.member_id}: {e}\", exc_info=True)"
                },
                {
                    "lineno": 247,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(\"Token refresher thread started.\")"
                },
                {
                    "lineno": 259,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(\"Refreshing access token.\")"
                },
                {
                    "lineno": 272,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(\"Access token refreshed and Dropbox client updated.\")"
                },
                {
                    "lineno": 274,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(f\"Failed to refresh access token: {e}\", exc_info=True)"
                }
            ]
        }
    },
    {
        "file_path": "files_dropbox/ocr_service.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 8,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 14,
                    "code": "logging.getLogger(\"app_logger\")"
                },
                {
                    "lineno": 21,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 24,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"OCR Service initialized\")"
                },
                {
                    "lineno": 35,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"OCR extraction failed: {e}\")"
                },
                {
                    "lineno": 105,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(\"Failed to parse JSON from OpenAI response\")"
                },
                {
                    "lineno": 108,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(f\"An error occurred in extract_info_with_openai: {e}\")"
                },
                {
                    "lineno": 143,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(\"Failed to parse JSON from OpenAI response\")"
                },
                {
                    "lineno": 161,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(f\"\ud83d\udd0e [OCRService] Processing PDF with pdfplumber: {local_file_path}\")"
                },
                {
                    "lineno": 168,
                    "func": "info",
                    "caller": "logging",
                    "code": "logging.info(f\"\ud83d\udd0e [OCRService] Processing image with pytesseract: {local_file_path}\")"
                },
                {
                    "lineno": 172,
                    "func": "error",
                    "caller": "logging",
                    "code": "logging.error(f\"\u274c [OCRService] Failed to extract text from file {local_file_path}: {e}\", exc_info=True)"
                }
            ]
        }
    },
    {
        "file_path": "files_dropbox/dropbox_api.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 3,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 22,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 96,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcc2 Listing files under '{folder_path}'\")"
                },
                {
                    "lineno": 138,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udcc1 No project_number provided. Retrieving all PO folders under the '2024' namespace.\")"
                },
                {
                    "lineno": 141,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\u26a0\ufe0f No projects found under the '2024' namespace.\")"
                },
                {
                    "lineno": 151,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2139\ufe0f No PO folders found for project_number={current_project_number} at '{po_base_path}'\")"
                },
                {
                    "lineno": 162,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcbc Identified as tax form: {file['file_name']}\")"
                },
                {
                    "lineno": 174,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcbc Identified as tax form: {file['file_name']} ({form_type})\")"
                },
                {
                    "lineno": 184,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcc1 Retrieving PO folders for project_number={project_number}\")"
                },
                {
                    "lineno": 187,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Unable to find project folder for project_number={project_number}\")"
                },
                {
                    "lineno": 193,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2139\ufe0f No PO folders found for project_number={project_number} at '{po_base_path}'\")"
                },
                {
                    "lineno": 204,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcbc Identified as tax form: {file['file_name']}\")"
                },
                {
                    "lineno": 216,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcbc Identified as tax form: {file['file_name']} ({form_type})\")"
                },
                {
                    "lineno": 226,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcc1 Retrieving PO folder for project_number={project_number} and po_number={po_number}\")"
                },
                {
                    "lineno": 229,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Unable to find project folder for project_number={project_number}\")"
                },
                {
                    "lineno": 234,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udccc Formatted po_number: {formatted_po_number}\")"
                },
                {
                    "lineno": 239,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2139\ufe0f No PO folders found for project_number={project_number} at '{po_base_path}'\")"
                },
                {
                    "lineno": 254,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcbc Identified as tax form: {file['file_name']}\")"
                },
                {
                    "lineno": 266,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcbc Identified as tax form: {file['file_name']} ({form_type})\")"
                },
                {
                    "lineno": 275,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"\u2757 Invalid combination of parameters provided.\")"
                },
                {
                    "lineno": 282,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Retrieved {len(project_po_data)} PO folders based on the provided parameters.\")"
                },
                {
                    "lineno": 306,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udcc1 No project_number provided. Retrieving all PO folders under the '2024' namespace.\")"
                },
                {
                    "lineno": 309,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\u26a0\ufe0f No projects found under the '2024' namespace.\")"
                },
                {
                    "lineno": 319,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2139\ufe0f No PO folders found for project_number={current_project_number} at '{po_base_path}'\")"
                },
                {
                    "lineno": 332,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcc1 Retrieving PO folders for project_number={project_number}\")"
                },
                {
                    "lineno": 335,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Unable to find project folder for project_number={project_number}\")"
                },
                {
                    "lineno": 341,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2139\ufe0f No PO folders found for project_number={project_number} at '{po_base_path}'\")"
                },
                {
                    "lineno": 354,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcc1 Retrieving PO folder for project_number={project_number} and po_number={po_number}\")"
                },
                {
                    "lineno": 357,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Unable to find project folder for project_number={project_number}\")"
                },
                {
                    "lineno": 362,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udccc Formatted po_number: {formatted_po_number}\")"
                },
                {
                    "lineno": 367,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2139\ufe0f No PO folders found for project_number={project_number} at '{po_base_path}'\")"
                },
                {
                    "lineno": 384,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f PO folder with po_number={formatted_po_number} not found in project_number={project_number}\")"
                },
                {
                    "lineno": 388,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"\u2757 Invalid combination of parameters provided.\")"
                },
                {
                    "lineno": 395,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Retrieved {len(project_po_data)} PO folders based on the provided parameters.\")"
                },
                {
                    "lineno": 443,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c API error while listing projects: {e}\")"
                },
                {
                    "lineno": 460,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd0d Searching for project folder with project_number='{project_number}' in namespace='{namespace}'.\")"
                },
                {
                    "lineno": 465,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f No projects found in namespace='{namespace}'.\")"
                },
                {
                    "lineno": 472,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2705 Found project folder: '{project['id']}' at '{project['path']}'\")"
                },
                {
                    "lineno": 475,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Project folder with project_number='{project_number}' not found in namespace='{namespace}'.\")"
                },
                {
                    "lineno": 498,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Existing shared link found for '{normalized_path}': {existing_links[0].url}\")"
                },
                {
                    "lineno": 506,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Created new shared link for '{normalized_path}': {shared_link.url}\")"
                },
                {
                    "lineno": 510,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error creating shared link for '{dropbox_path}': {e}\")"
                },
                {
                    "lineno": 513,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error creating shared link for '{dropbox_path}': {e}\")"
                },
                {
                    "lineno": 527,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcc2 Listing PO folders under '{po_base_path}'\")"
                },
                {
                    "lineno": 560,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2705 Found {len(folders)} folders under '{po_base_path}'.\")"
                },
                {
                    "lineno": 568,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"No pulse_id to update Monday link.\")"
                },
                {
                    "lineno": 582,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                f\"\u2705 Updated Monday contact (pulse_id={pulse_id}) tax_form_link='{new_link}'.\"\n            )"
                }
            ]
        }
    },
    {
        "file_path": "files_monday/monday_util.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 4,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 132,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 142,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"Monday API Token not found. Please set it in the environment variables.\")"
                },
                {
                    "lineno": 155,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Retrieved subitem board ID: {self._subitem_board_id}\")"
                },
                {
                    "lineno": 211,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Found subitems column ID: {column['id']}\")"
                },
                {
                    "lineno": 214,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Failed to retrieve columns: {data}\")"
                },
                {
                    "lineno": 264,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"Setting link to None because of unexpected Monday Link Value.\")"
                },
                {
                    "lineno": 276,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"Setting Account ID to None because of unexpected Monday Account Value.\")"
                },
                {
                    "lineno": 337,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Creating item with variables: {variables}\")"
                },
                {
                    "lineno": 346,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Created new item '{item_name}' with ID {item_id}\")"
                },
                {
                    "lineno": 349,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error creating item in Monday.com: {data['errors']}\")"
                },
                {
                    "lineno": 352,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Unexpected response structure: {data}\")"
                },
                {
                    "lineno": 355,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"HTTP Error {response.status_code}: {response.text}\")"
                },
                {
                    "lineno": 396,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Updating item {item_id} with columns: {column_values}\")"
                },
                {
                    "lineno": 403,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Successfully updated item {item_id} in Monday.com.\")"
                },
                {
                    "lineno": 406,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error updating item in Monday.com: {data['errors']}\")"
                },
                {
                    "lineno": 409,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Unexpected response structure: {data}\")"
                },
                {
                    "lineno": 412,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"HTTP Error {response.status_code}: {response.text}\")"
                },
                {
                    "lineno": 463,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Invalid quantity '{quantity}': {e}\")"
                },
                {
                    "lineno": 471,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Invalid rate '{rate}': {e}\")"
                },
                {
                    "lineno": 479,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Invalid OT '{OT}': {e}\")"
                },
                {
                    "lineno": 487,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Invalid fringes '{fringes}': {e}\")"
                },
                {
                    "lineno": 500,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error parsing date '{date}': {e}\")"
                },
                {
                    "lineno": 516,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error parsing due_date '{due_date}': {e}\")"
                },
                {
                    "lineno": 527,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Invalid account number '{account_number}': {e}\")"
                },
                {
                    "lineno": 586,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Creating subitem under parent {parent_item_id} with name '{subitem_name}'.\")"
                },
                {
                    "lineno": 596,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Created subitem with ID {subitem_id}\")"
                },
                {
                    "lineno": 599,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error creating subitem in Monday.com: {data['errors']}\")"
                },
                {
                    "lineno": 602,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Unexpected response structure: {data}\")"
                },
                {
                    "lineno": 605,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"HTTP Error {response.status_code}: {response.text}\")"
                },
                {
                    "lineno": 635,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Updating subitem {subitem_id} with columns: {column_values}\")"
                },
                {
                    "lineno": 643,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Successfully updated subitem {subitem_id} in Monday.com.\")"
                },
                {
                    "lineno": 646,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error updating subitem in Monday.com: {data['errors']}\")"
                },
                {
                    "lineno": 649,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Unexpected response structure: {data}\")"
                },
                {
                    "lineno": 652,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"HTTP Error {response.status_code}: {response.text}\")"
                },
                {
                    "lineno": 696,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Linking contact {contact_item_id} to PO item {po_item_id}.\")"
                },
                {
                    "lineno": 705,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Successfully linked contact item {contact_item_id} to PO item {po_item_id}.\")"
                },
                {
                    "lineno": 708,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error linking contact to PO item in Monday.com: {data['errors']}\")"
                },
                {
                    "lineno": 711,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Unexpected response structure: {data}\")"
                },
                {
                    "lineno": 714,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"HTTP Error {response.status_code}: {response.text}\")"
                },
                {
                    "lineno": 734,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"Missing 'Authorization' header.\")"
                },
                {
                    "lineno": 740,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"Invalid 'Authorization' header format.\")"
                },
                {
                    "lineno": 743,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"Invalid API token.\")"
                },
                {
                    "lineno": 745,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Request validated successfully.\")"
                },
                {
                    "lineno": 951,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"Subitem missing one of the required identifiers.\")"
                }
            ]
        }
    },
    {
        "file_path": "files_monday/__init__.py",
        "logging_data": {
            "logging_imports": [],
            "logger_creations": [],
            "logger_calls": []
        }
    },
    {
        "file_path": "files_monday/monday_api.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 4,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 39,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 40,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"Initializing MondayAPI singleton... \u2699\ufe0f\")"
                },
                {
                    "lineno": 44,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\u26a0\ufe0f MONDAY_API_TOKEN is not set. Check .env or your configuration.\")"
                },
                {
                    "lineno": 59,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u2705 Monday API initialized successfully \ud83c\udfd7\ufe0f\")"
                },
                {
                    "lineno": 94,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udce1 Attempt {attempt + 1}/{MAX_RETRIES}: Sending request to Monday.com\")"
                },
                {
                    "lineno": 113,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Connection error: {ce}. Attempt {attempt + 1}/{MAX_RETRIES}. Retrying...\")"
                },
                {
                    "lineno": 118,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c HTTP error encountered: {he}\")"
                },
                {
                    "lineno": 122,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\ud83d\udd04 Rate limit (429) hit. Waiting {retry_after} seconds before retry.\")"
                },
                {
                    "lineno": 129,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Unexpected exception during request: {e}\")"
                },
                {
                    "lineno": 132,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"\u274c Max retries reached without success. Failing the request.\")"
                },
                {
                    "lineno": 143,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"\ud83d\udca5 Complexity limit reached!\")"
                },
                {
                    "lineno": 146,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"\ud83d\udca5 Daily limit exceeded!\")"
                },
                {
                    "lineno": 149,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\u231b Minute limit exceeded! Consider waiting and retrying.\")"
                },
                {
                    "lineno": 152,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\ud83d\udd51 Concurrency limit exceeded! Throttling requests.\")"
                },
                {
                    "lineno": 155,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\ud83d\udca5 GraphQL error: {message}\")"
                },
                {
                    "lineno": 168,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0e Complexity: query={query_complexity}, before={before}, after={after}\")"
                },
                {
                    "lineno": 184,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udd95 Creating item on board {board_id}, group '{group_id}', name='{name}'...\")"
                },
                {
                    "lineno": 208,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udd95 Creating subitem under parent {parent_item_id} with name='{subitem_name}'...\")"
                },
                {
                    "lineno": 229,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83c\udd95 Creating contact with name='{name}'...\")"
                },
                {
                    "lineno": 254,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2699\ufe0f Updating item {item_id} on type='{type}' board...\")"
                },
                {
                    "lineno": 290,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udce5 Fetching all items from board {board_id} with limit={limit}...\")"
                },
                {
                    "lineno": 341,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Error fetching items: {e}\")"
                },
                {
                    "lineno": 349,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f No boards found for board_id {board_id}. Check your permissions or ID.\")"
                },
                {
                    "lineno": 358,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\u2705 No more pages left to fetch for this board.\")"
                },
                {
                    "lineno": 361,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcc4 Fetched {len(items)} items from board {board_id}. Continuing pagination...\")"
                },
                {
                    "lineno": 370,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udce5 Fetching all subitems from subitem board {self.SUBITEM_BOARD_ID}, limit={limit}...\")"
                },
                {
                    "lineno": 427,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Error fetching subitems: {e}\")"
                },
                {
                    "lineno": 435,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                        f\"\u26a0\ufe0f No boards found for board_id {self.SUBITEM_BOARD_ID}. Check your permissions or ID.\"\n                    )"
                },
                {
                    "lineno": 448,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\u2705 No more subitem pages left to fetch.\")"
                },
                {
                    "lineno": 451,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcc4 Fetched {len(valid_items)} valid subitems from board {self.SUBITEM_BOARD_ID}. Continuing...\")"
                },
                {
                    "lineno": 494,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n            f\"\ud83d\udce5 Fetching subitems from board_id={board_id}, project_number={project_number}\"\n        )"
                },
                {
                    "lineno": 560,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Error fetching subitems: {e}\")"
                },
                {
                    "lineno": 568,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f No boards found for board_id={board_id}.\")"
                },
                {
                    "lineno": 593,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\u2705 No more subitem pages to fetch.\")"
                },
                {
                    "lineno": 596,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                    f\"\ud83d\udd04 Fetched {len(valid_items)} subitems so far, continuing pagination...\"\n                )"
                },
                {
                    "lineno": 669,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Error fetching subitems by project_number: {e}\")"
                },
                {
                    "lineno": 696,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\u2705 No more pages for filtered subitems.\")"
                },
                {
                    "lineno": 699,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                    f\"\ud83d\udd04 Fetched {len(valid_items)} matching subitems so far, continuing pagination...\"\n                )"
                },
                {
                    "lineno": 711,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udce5 Fetching all contacts from the Contacts board...\")"
                },
                {
                    "lineno": 760,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Error fetching contacts: {e}\")"
                },
                {
                    "lineno": 768,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                        f\"\u26a0\ufe0f No boards found for board_id {self.monday_util.CONTACT_BOARD_ID}. Check your permissions or ID.\"\n                    )"
                },
                {
                    "lineno": 779,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\u2705 All contacts fetched successfully.\")"
                },
                {
                    "lineno": 782,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd04 Fetched {len(items)} contacts so far. Continuing pagination...\")"
                },
                {
                    "lineno": 794,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd75\ufe0f Searching for item by ID '{id}'...\")"
                },
                {
                    "lineno": 817,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udc40 No item found with ID {id}. Returning None.\")"
                },
                {
                    "lineno": 821,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Error fetching item by ID {id}: {e}\")"
                },
                {
                    "lineno": 830,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd75\ufe0f Searching for group ID matching project_id='{project_id}' on board {self.PO_BOARD_ID}...\")"
                },
                {
                    "lineno": 846,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2705 Found group '{group['title']}' with ID '{group['id']}'.\")"
                },
                {
                    "lineno": 848,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udd75\ufe0f No matching group found.\")"
                },
                {
                    "lineno": 858,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0d Searching subitem by receipt_number='{receipt_number}', line_number='{line_number}'...\")"
                },
                {
                    "lineno": 901,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0d Searching for item with project_id='{project_id}', po_number='{po_number}'...\")"
                },
                {
                    "lineno": 933,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0d Searching subitem (PO='{po_number}', receipt='{receipt_number}', line_number='{line_number}')...\")"
                },
                {
                    "lineno": 971,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2705 Found subitem with ID {items[0]['id']}\")"
                },
                {
                    "lineno": 973,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udd75\ufe0f No subitem found for the given PO, receipt, and line.\")"
                },
                {
                    "lineno": 983,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0e Searching item by name='{name}' on '{board}' board...\")"
                },
                {
                    "lineno": 1010,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udd75\ufe0f No single matching item found or multiple matches encountered.\")"
                },
                {
                    "lineno": 1012,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2705 Found item with ID={item_list[0]['id']}.\")"
                },
                {
                    "lineno": 1033,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udce5 Fetching all items in project_id='{project_id}' from board {self.PO_BOARD_ID} ...\")"
                },
                {
                    "lineno": 1086,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\u2705 No further cursor. All project items fetched.\")"
                },
                {
                    "lineno": 1089,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udd04 Found next cursor. Fetching additional items...\")"
                },
                {
                    "lineno": 1104,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udce5 Fetching subitems for item_id={item_id} ...\")"
                },
                {
                    "lineno": 1127,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd75\ufe0f No parent item found with ID {item_id}. Returning empty list.\")"
                },
                {
                    "lineno": 1136,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2705 Retrieved {len(subitems)} subitems for item {item_id}.\")"
                },
                {
                    "lineno": 1153,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n            f\"\u2699\ufe0f Processing a batch of {len(batch)} items for project_id='{project_id}', create={create}...\"\n        )"
                },
                {
                    "lineno": 1169,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                f\"Splitting batch into {len(sub_batches)} sub-batches of up to {chunk_size} items each.\"\n            )"
                },
                {
                    "lineno": 1178,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                        f\"Submitting sub-batch #{idx + 1} with {len(sub_batch)} items.\"\n                    )"
                },
                {
                    "lineno": 1189,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Sub-batch #{idx + 1} completed.\")"
                },
                {
                    "lineno": 1211,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\n                        f\"\u26a0\ufe0f No monday_item_id provided for update. Skipping item: {db_item}\"\n                    )"
                },
                {
                    "lineno": 1217,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                        f\"\ud83d\udd04 Updating item {item_id} with new column values...\"\n                    )"
                },
                {
                    "lineno": 1242,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2699\ufe0f Processing a batch of {len(subitems_batch)} subitems for parent_item_id='{parent_item_id}', create={create}...\")"
                },
                {
                    "lineno": 1254,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udc76 Creating subitem '{subitem_name}' under parent {parent_item_id}...\")"
                },
                {
                    "lineno": 1266,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd04 Updating subitem '{sub_id}' with new column values...\")"
                },
                {
                    "lineno": 1283,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd28 Bulk-creating {len(batch)} items for project_id='{project_id}' in one request...\")"
                },
                {
                    "lineno": 1313,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2705 Created item index {i} with new ID {itm['monday_item_id']}\")"
                },
                {
                    "lineno": 1315,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f No ID returned for item index {i} in batch.\")"
                },
                {
                    "lineno": 1329,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd0e Checking if item with project_id='{item['project_id']}' and PO='{item['PO']}' exists...\")"
                },
                {
                    "lineno": 1334,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\u2705 Found existing item. Updating if needed...\")"
                },
                {
                    "lineno": 1340,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd04 Updating item name from '{response_item['name']}' to '{item['name']}'...\")"
                },
                {
                    "lineno": 1350,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83c\udd95 No matching item found. Creating a new item...\")"
                },
                {
                    "lineno": 1354,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83c\udf89 Created new item with pulse_id={item['item_pulse_id']}.\")"
                },
                {
                    "lineno": 1356,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c Response Error: {response}\")"
                },
                {
                    "lineno": 1368,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0e Checking subitem with line_number='{sub_item.get('line_number')}' under parent {parent_item.get('item_pulse_id')}...\")"
                },
                {
                    "lineno": 1391,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\u274c JSON decode error for incoming_values: {jde}\")"
                },
                {
                    "lineno": 1397,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd0e Subitem already has pulse_id={pulse_id}. Checking if it exists on Monday...\")"
                },
                {
                    "lineno": 1402,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f pulse_id {pulse_id} not found on Monday. Creating a new subitem.\")"
                },
                {
                    "lineno": 1411,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Created new subitem with pulse_id={new_pulse_id}.\")"
                },
                {
                    "lineno": 1427,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd0e Subitem {pulse_id} is identical to incoming data. No update needed.\")"
                },
                {
                    "lineno": 1430,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcbe Updating subitem {pulse_id} due to changes in column values.\")"
                },
                {
                    "lineno": 1436,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udd75\ufe0f Searching subitem by PO, receipt_number, line_number to avoid duplicates...\")"
                },
                {
                    "lineno": 1445,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Found existing subitem with ID={existing_subitem['id']}. Not creating duplicate.\")"
                },
                {
                    "lineno": 1448,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83c\udd95 No matching subitem found. Creating a new subitem.\")"
                },
                {
                    "lineno": 1457,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 New subitem created with pulse_id={new_pulse_id}.\")"
                },
                {
                    "lineno": 1475,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"No tax_str provided. Returning None.\")"
                },
                {
                    "lineno": 1481,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\uddfe Parsed tax number '{tax_str}' -> {parsed}\")"
                },
                {
                    "lineno": 1484,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f Could not parse tax number '{tax_str}' as int after removing hyphens.\")"
                },
                {
                    "lineno": 1491,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udce6 Extracting contact fields from item ID={contact_item.get('id')}...\")"
                },
                {
                    "lineno": 1534,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2795 Creating new Monday contact with name='{name}'...\")"
                },
                {
                    "lineno": 1537,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Contact created with pulse_id={new_id}. Fetching the new item's data...\")"
                },
                {
                    "lineno": 1547,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f DB Contact id={db_contact.id} has no pulse_id. Use 'find_or_create_contact_in_monday' first.\")"
                },
                {
                    "lineno": 1550,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udd04 Updating Monday contact (pulse_id={db_contact.pulse_id}) with DB fields...\")"
                },
                {
                    "lineno": 1570,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Monday contact (pulse_id={db_contact.pulse_id}) updated successfully.\")"
                },
                {
                    "lineno": 1579,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"\u26a0\ufe0f No pulse_id provided to update Monday link. Aborting update.\")"
                },
                {
                    "lineno": 1596,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd17 Updating tax_form_link for pulse_id={pulse_id} to '{new_link}' (label='{link_text}')...\")"
                },
                {
                    "lineno": 1598,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Updated tax_form_link for contact (pulse_id={pulse_id}) to '{new_link}'.\")"
                }
            ]
        }
    },
    {
        "file_path": "files_monday/monday_database_util.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 13,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 31,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 36,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"Monday API Token not found. Please set it in environment variables.\")"
                },
                {
                    "lineno": 43,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Monday Database Utility initialized\")"
                },
                {
                    "lineno": 58,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"No pulse_id specified in item_data. Cannot create or update.\")"
                },
                {
                    "lineno": 68,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Updated PO with pulse_id={pulse_id} in DB.\")"
                },
                {
                    "lineno": 73,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Created new PO with pulse_id={pulse_id}\")"
                },
                {
                    "lineno": 83,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(\"No pulse_id specified in subitem_data. Cannot create or update.\")"
                },
                {
                    "lineno": 94,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Updated DetailItem with pulse_id={pulse_id} in DB.\")"
                },
                {
                    "lineno": 100,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Created new DetailItem with pulse_id={pulse_id}\")"
                },
                {
                    "lineno": 142,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"Incomplete change_item data provided.\")"
                },
                {
                    "lineno": 148,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"No DetailItem found with pulse_id {pulse_id}.\")"
                },
                {
                    "lineno": 156,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Updated DetailItem {pulse_id}: set {db_field} to {new_value}\")"
                },
                {
                    "lineno": 168,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"PurchaseOrder with pulse_id {pulse_id} does not exist.\")"
                },
                {
                    "lineno": 181,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"PO with ID {found_po['id']} does not exist.\")"
                },
                {
                    "lineno": 185,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Deleted PurchaseOrder with ID {found_po['id']}.\")"
                },
                {
                    "lineno": 194,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"DetailItem with pulse_id {pulse_id} does not exist.\")"
                },
                {
                    "lineno": 204,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"DetailItem with ID {found_sub['id']} does not exist.\")"
                },
                {
                    "lineno": 208,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Deleted DetailItem with ID {found_sub['id']}.\")"
                }
            ]
        }
    },
    {
        "file_path": "files_monday/monday_service.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 4,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 25,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 37,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Monday Service initialized\")"
                },
                {
                    "lineno": 88,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Updated PO status for item ID {pulse_id} to '{status}'.\")"
                },
                {
                    "lineno": 90,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Failed to update PO status for item ID {pulse_id}: {e}\")"
                },
                {
                    "lineno": 109,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Found existing contact '{vendor_name}' with ID {contact_id}.\")"
                },
                {
                    "lineno": 112,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"No existing contact found for '{vendor_name}'. Creating a new contact.\")"
                },
                {
                    "lineno": 126,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Failed to create contact for vendor '{vendor_name}'.\")"
                },
                {
                    "lineno": 131,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Linked contact ID {contact_id} to PO number '{po_number}'.\")"
                },
                {
                    "lineno": 134,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error in match_or_create_contact: {e}\")"
                },
                {
                    "lineno": 150,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Retrieved PO number '{po_number}' for item ID {item_id}.\")"
                },
                {
                    "lineno": 153,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"PO number not found for item ID {item_id}.\")"
                },
                {
                    "lineno": 156,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error retrieving PO number for item ID {item_id}: {e}\")"
                },
                {
                    "lineno": 164,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Fetching items from board {self.board_id}...\")"
                },
                {
                    "lineno": 166,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Total items fetched from board {self.board_id}: {len(all_items)}\")"
                },
                {
                    "lineno": 172,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Synced PO with pulse_id {creation_item.get('pulse_id')}: {status}\")"
                },
                {
                    "lineno": 183,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Fetching sub-items from board {self.subitem_board_id}...\")"
                },
                {
                    "lineno": 185,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Total sub-items fetched from board {self.subitem_board_id}: {len(all_subitems)}\")"
                },
                {
                    "lineno": 187,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error fetching sub-items from Monday.com: {e}\")"
                },
                {
                    "lineno": 196,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Skipping sub-item with pulse_id {subitem.get('id')} due to missing parent.\")"
                },
                {
                    "lineno": 202,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Failed to sync sub-item with pulse_id: {creation_item.get('pulse_id')}\")"
                },
                {
                    "lineno": 207,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                        f\"Skipped orphan with pulse_id: {creation_item.get('pulse_id')}, \"\n                    )"
                },
                {
                    "lineno": 211,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                        f\"Successfully created sub-item with pulse_id: {creation_item.get('pulse_id')}\")"
                },
                {
                    "lineno": 214,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n                        f\"Successfully updated sub-item with pulse_id: {creation_item.get('pulse_id')}\"\n                    )"
                },
                {
                    "lineno": 218,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\n                        f\"Failed to sync sub-item with pulse_id: {creation_item.get('pulse_id')}. \"\n                        f\"Error: {result.get('error')}\"\n                    )"
                },
                {
                    "lineno": 224,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Sub-items synchronization completed successfully.\")"
                },
                {
                    "lineno": 225,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Skipped {orphan_count} orphans out of {len(all_subitems)} sub-items\")"
                },
                {
                    "lineno": 232,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Fetching contacts from board {self.contact_board_id}...\")"
                },
                {
                    "lineno": 234,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Total contacts fetched from board {self.contact_board_id}: {len(all_contacts)}\")"
                },
                {
                    "lineno": 236,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error fetching contacts from Monday.com: {e}\")"
                },
                {
                    "lineno": 296,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Synced {contact['name']}\")"
                },
                {
                    "lineno": 298,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error adding contact to DB: {e}\")"
                },
                {
                    "lineno": 300,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error syncing contacts to DB: {e}\")"
                },
                {
                    "lineno": 301,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Contacts synchronization completed successfully.\")"
                }
            ]
        }
    },
    {
        "file_path": "files_monday/monday_webhook_handler.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 3,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 25,
                    "code": "logging.getLogger(\"app_logger\")"
                },
                {
                    "lineno": 213,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 32,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"Monday Webhook Handler Initialized\")"
                },
                {
                    "lineno": 69,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Full data: {event_data}\")"
                },
                {
                    "lineno": 74,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Extracted item ID: {item_id}\")"
                },
                {
                    "lineno": 77,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"Missing 'pulseId' in the event.\")"
                },
                {
                    "lineno": 78,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Event data: {event}\")"
                },
                {
                    "lineno": 84,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Extracted new status: {new_status}\")"
                },
                {
                    "lineno": 87,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"Missing or empty status in the event.\")"
                },
                {
                    "lineno": 88,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Event value: {value}\")"
                },
                {
                    "lineno": 93,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Retrieved PO number: {po_number}\")"
                },
                {
                    "lineno": 96,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Unable to find PO number or item data for item ID: {item_id}\")"
                },
                {
                    "lineno": 99,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"PO {po_number} status changed to {new_status} in Monday.com.\")"
                },
                {
                    "lineno": 118,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"Incoming SubItem change event data: {event_data}\")"
                },
                {
                    "lineno": 123,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"Missing 'event' key in the event data.\")"
                },
                {
                    "lineno": 133,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Successfully processed SubItem change for ID: {change_item['pulse_id']}\")"
                },
                {
                    "lineno": 136,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"SubItem not found in DB, creating one.\")"
                },
                {
                    "lineno": 150,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"Failed to create or update the main PurchaseOrder item in the database.\")"
                },
                {
                    "lineno": 159,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"Failed to create new SubItem in the database.\")"
                },
                {
                    "lineno": 183,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"Processing SubItem delete event\")"
                },
                {
                    "lineno": 188,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"Missing 'event' key in the event data.\")"
                },
                {
                    "lineno": 194,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(\"Missing 'pulseId' in the event.\")"
                },
                {
                    "lineno": 200,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"Error deleting SubItem with ID {pulse_id}\")"
                },
                {
                    "lineno": 203,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"Successfully deleted SubItem with ID: {pulse_id}\")"
                },
                {
                    "lineno": 221,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(\"PO status change event received\")"
                },
                {
                    "lineno": 239,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(\"SubItem change event received\")"
                },
                {
                    "lineno": 257,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(\"SubItem delete event received\")"
                }
            ]
        }
    },
    {
        "file_path": "server_webhook/webhook_main.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 3,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 31,
                    "code": "logging.getLogger(__name__)"
                },
                {
                    "lineno": 120,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 65,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"Error during bulk update: {e}\", exc_info=True)"
                },
                {
                    "lineno": 78,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(project_id, po_number)"
                },
                {
                    "lineno": 87,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(e)"
                },
                {
                    "lineno": 94,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(project_ID)"
                },
                {
                    "lineno": 112,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"USE_TEMP_FILE toggled from {current_value} to {new_value}\")"
                },
                {
                    "lineno": 127,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Scheduled monday_main_items_sync\")"
                },
                {
                    "lineno": 130,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Scheduled monday_sub_items_sync\")"
                },
                {
                    "lineno": 134,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"No project number provided for scanning receipts.\")"
                },
                {
                    "lineno": 140,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"No project number provided for scanning receipts.\")"
                },
                {
                    "lineno": 145,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Scheduled monday_contact_sync\")"
                },
                {
                    "lineno": 148,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Called sync_spend_money_items\")"
                },
                {
                    "lineno": 151,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Called sync_contacts\")"
                },
                {
                    "lineno": 154,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Called sync_xero_bills\")"
                },
                {
                    "lineno": 156,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"Unknown function requested: {function_name}\")"
                },
                {
                    "lineno": 158,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"Error triggering function {function_name}: {e}\")"
                }
            ]
        }
    },
    {
        "file_path": "server_webhook/main.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 3,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 10,
                    "code": "logging.getLogger(\"app_logger\")"
                },
                {
                    "lineno": 24,
                    "code": "logging.getLogger(\"app_logger\")"
                },
                {
                    "lineno": 45,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 11,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Starting the application...\")"
                },
                {
                    "lineno": 25,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Starting Flask server for webhooks...\")"
                },
                {
                    "lineno": 36,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"Flask server running on port {Config.WEBHOOK_MAIN_PORT}.\")"
                },
                {
                    "lineno": 39,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Shutting down Flask server...\")"
                },
                {
                    "lineno": 52,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Database initialized.\")"
                },
                {
                    "lineno": 56,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Orchestrator initialized.\")"
                },
                {
                    "lineno": 70,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Shutting down the application...\")"
                }
            ]
        }
    },
    {
        "file_path": "server_celery/database_trigger_service.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 4,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 46,
                    "code": "logging.getLogger(\"admin_logger\")"
                }
            ],
            "logger_calls": []
        }
    },
    {
        "file_path": "server_celery/celery_server.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 9,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 15,
                    "code": "logging.getLogger(\"admin_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 59,
                    "func": "debug",
                    "caller": "logger",
                    "code": "logger.debug(f\"Celery config: worker_prefetch_multiplier={celery_app.conf.worker_prefetch_multiplier}, \"\n             f\"task_acks_late={celery_app.conf.task_acks_late}\")"
                },
                {
                    "lineno": 71,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Celery tasks have been finalized. Ready to go!\")"
                },
                {
                    "lineno": 78,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"Initializing DB inside Celery worker...\")"
                },
                {
                    "lineno": 82,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"\ud83d\udc77\u200d\u2640\ufe0f Celery Worker is starting up... Warm up the engines!\")"
                },
                {
                    "lineno": 86,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"\ud83d\ude80 Celery Worker is READY and waiting for tasks! Buckle up, folks.\")"
                },
                {
                    "lineno": 90,
                    "func": "warning",
                    "caller": "logger",
                    "code": "logger.warning(\"\ud83d\uded1 Celery Worker is shutting down. Everyone, please exit in an orderly fashion.\")"
                }
            ]
        }
    },
    {
        "file_path": "server_celery/__init__.py",
        "logging_data": {
            "logging_imports": [],
            "logger_creations": [],
            "logger_calls": []
        }
    },
    {
        "file_path": "server_celery/celery_tasks.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 13,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 15,
                    "code": "logging.getLogger(\"admin_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 29,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\ude80 Starting process_invoice_trigger shared task. invoice_id={invoice_id}.\")"
                },
                {
                    "lineno": 35,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 37,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 40,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done with invoice #{invoice_id}.\")"
                },
                {
                    "lineno": 43,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_invoice_trigger({invoice_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 51,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling invoice deletion for invoice_id={invoice_id}.\")"
                },
                {
                    "lineno": 57,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 59,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 63,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 Invoice #{invoice_id} deletion handled successfully.\")"
                },
                {
                    "lineno": 66,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_invoice_delete({invoice_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 81,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf00 Handling updated detail item for detail_item_id={detail_item_id}\")"
                },
                {
                    "lineno": 87,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 89,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 92,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 detail_item_set_to_rtp completed for id={detail_item_id}\")"
                },
                {
                    "lineno": 95,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem with detail_item_set_to_rtp({detail_item_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 103,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf00 Handling created detail item for detail_item_id={detail_item_id}\")"
                },
                {
                    "lineno": 109,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 111,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 114,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 detail_item_set_to_rtp completed for id={detail_item_id}\")"
                },
                {
                    "lineno": 117,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem with detail_item_set_to_rtp({detail_item_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 125,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling deleted detail item for detail_item_id={detail_item_id}\")"
                },
                {
                    "lineno": 131,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 133,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 137,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 Detail item deletion completed for id={detail_item_id}\")"
                },
                {
                    "lineno": 140,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem with detail_item_on_delete({detail_item_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 152,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\ude80 Starting process_purchase_order_create shared task. po_id={po_id}.\")"
                },
                {
                    "lineno": 158,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 160,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 164,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done processing newly created PO #{po_id}.\")"
                },
                {
                    "lineno": 167,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_purchase_order_create({po_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 172,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\udd04 Handling updated PurchaseOrder id={po_id}.\")"
                },
                {
                    "lineno": 178,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 180,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 184,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done updating PO #{po_id}.\")"
                },
                {
                    "lineno": 187,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_purchase_order_update({po_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 192,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling deleted PurchaseOrder id={po_id}.\")"
                },
                {
                    "lineno": 198,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 200,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 204,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 PurchaseOrder #{po_id} deletion handled.\")"
                },
                {
                    "lineno": 207,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_purchase_order_delete({po_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 219,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\ude80 Starting process_contact_create shared task. contact_id={contact_id}.\")"
                },
                {
                    "lineno": 225,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 227,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 231,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done processing newly created Contact #{contact_id}.\")"
                },
                {
                    "lineno": 234,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_contact_create({contact_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 239,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\udd04 Handling updated Contact id={contact_id}.\")"
                },
                {
                    "lineno": 245,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 247,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 251,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done updating Contact #{contact_id}.\")"
                },
                {
                    "lineno": 254,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_contact_update({contact_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 259,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling deleted Contact id={contact_id}.\")"
                },
                {
                    "lineno": 265,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 267,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 271,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 Contact #{contact_id} deletion handled.\")"
                },
                {
                    "lineno": 274,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_contact_delete({contact_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 286,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\ude80 Starting process_bill_line_item_create shared task. bill_line_item_id={bill_line_item_id}.\")"
                },
                {
                    "lineno": 292,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 294,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 298,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done processing newly created BillLineItem #{bill_line_item_id}.\")"
                },
                {
                    "lineno": 301,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_bill_line_item_create({bill_line_item_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 306,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\udd04 Handling updated BillLineItem id={bill_line_item_id}.\")"
                },
                {
                    "lineno": 312,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 314,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 318,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done updating BillLineItem #{bill_line_item_id}.\")"
                },
                {
                    "lineno": 321,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_bill_line_item_update({bill_line_item_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 326,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling deleted BillLineItem id={bill_line_item_id}.\")"
                },
                {
                    "lineno": 332,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 334,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 338,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 BillLineItem #{bill_line_item_id} deletion handled.\")"
                },
                {
                    "lineno": 341,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_bill_line_item_delete({bill_line_item_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 353,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\ude80 Starting process_bank_transaction_create shared task. bank_tx_id={bank_tx_id}.\")"
                },
                {
                    "lineno": 359,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 361,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 365,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done processing newly created BankTransaction #{bank_tx_id}.\")"
                },
                {
                    "lineno": 368,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_bank_transaction_create({bank_tx_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 373,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\udd04 Handling updated BankTransaction id={bank_tx_id}.\")"
                },
                {
                    "lineno": 379,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 381,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 385,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done updating BankTransaction #{bank_tx_id}.\")"
                },
                {
                    "lineno": 388,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_bank_transaction_update({bank_tx_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 393,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling deleted BankTransaction id={bank_tx_id}.\")"
                },
                {
                    "lineno": 399,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 401,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 405,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 BankTransaction #{bank_tx_id} deletion handled.\")"
                },
                {
                    "lineno": 408,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_bank_transaction_delete({bank_tx_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 420,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\ude80 Starting process_account_code_create shared task. account_code_id={account_code_id}.\")"
                },
                {
                    "lineno": 426,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 428,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 432,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done processing newly created AccountCode #{account_code_id}.\")"
                },
                {
                    "lineno": 435,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_account_code_create({account_code_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 440,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\udd04 Handling updated AccountCode id={account_code_id}.\")"
                },
                {
                    "lineno": 446,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 448,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 452,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done updating AccountCode #{account_code_id}.\")"
                },
                {
                    "lineno": 455,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_account_code_update({account_code_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 460,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling deleted AccountCode id={account_code_id}.\")"
                },
                {
                    "lineno": 466,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 468,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 472,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 AccountCode #{account_code_id} deletion handled.\")"
                },
                {
                    "lineno": 475,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_account_code_delete({account_code_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 487,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\ude80 Starting process_receipt_create shared task. receipt_id={receipt_id}.\")"
                },
                {
                    "lineno": 493,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 495,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 499,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done processing newly created Receipt #{receipt_id}.\")"
                },
                {
                    "lineno": 502,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_receipt_create({receipt_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 507,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\udd04 Handling updated Receipt id={receipt_id}.\")"
                },
                {
                    "lineno": 513,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 515,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 519,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done updating Receipt #{receipt_id}.\")"
                },
                {
                    "lineno": 522,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_receipt_update({receipt_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 527,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling deleted Receipt id={receipt_id}.\")"
                },
                {
                    "lineno": 533,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 535,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 539,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 Receipt #{receipt_id} deletion handled.\")"
                },
                {
                    "lineno": 542,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_receipt_delete({receipt_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 554,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\ude80 Starting process_spend_money_create shared task. spend_money_id={spend_money_id}.\")"
                },
                {
                    "lineno": 560,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 562,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 566,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done processing newly created SpendMoney #{spend_money_id}.\")"
                },
                {
                    "lineno": 569,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_spend_money_create({spend_money_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 574,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\udd04 Handling updated SpendMoney id={spend_money_id}.\")"
                },
                {
                    "lineno": 580,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 582,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 586,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done updating SpendMoney #{spend_money_id}.\")"
                },
                {
                    "lineno": 589,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_spend_money_update({spend_money_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 594,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling deleted SpendMoney id={spend_money_id}.\")"
                },
                {
                    "lineno": 600,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 602,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 606,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 SpendMoney #{spend_money_id} deletion handled.\")"
                },
                {
                    "lineno": 609,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_spend_money_delete({spend_money_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 621,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\ude80 Starting process_tax_account_create shared task. tax_account_id={tax_account_id}.\")"
                },
                {
                    "lineno": 627,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 629,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 633,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done processing newly created TaxAccount #{tax_account_id}.\")"
                },
                {
                    "lineno": 636,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_tax_account_create({tax_account_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 641,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\udd04 Handling updated TaxAccount id={tax_account_id}.\")"
                },
                {
                    "lineno": 647,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 649,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 653,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done updating TaxAccount #{tax_account_id}.\")"
                },
                {
                    "lineno": 656,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_tax_account_update({tax_account_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 661,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling deleted TaxAccount id={tax_account_id}.\")"
                },
                {
                    "lineno": 667,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 669,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 673,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 TaxAccount #{tax_account_id} deletion handled.\")"
                },
                {
                    "lineno": 676,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in process_tax_account_delete({tax_account_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 691,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\ude80 Starting update_xero_bill shared task. bill_id={bill_id}.\")"
                },
                {
                    "lineno": 697,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 699,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 703,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done with XeroBill #{bill_id}.\")"
                },
                {
                    "lineno": 706,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in update_xero_bill({bill_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 714,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf00 NEW TASK - CREATE - XERO BILL - STARTED \ud83c\udf00 {bill_id}.\")"
                },
                {
                    "lineno": 720,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 722,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 725,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf89 Done with XeroBill creation for bill_id={bill_id}.\")"
                },
                {
                    "lineno": 728,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in create_xero_bill({bill_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 736,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf00 Handling created line items for bill_id={bill_id}\")"
                },
                {
                    "lineno": 742,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 744,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 748,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 XeroBill line items created for bill_id={bill_id}\")"
                },
                {
                    "lineno": 751,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem with create_xero_bill_line_items({bill_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 759,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83c\udf00 Handling updated line item for line_item_id={line_item_id}\")"
                },
                {
                    "lineno": 765,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 767,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 770,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 XeroBill line item updated for id={line_item_id}\")"
                },
                {
                    "lineno": 773,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem with update_xero_bill_line_item({line_item_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 781,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling deleted XeroBill bill_id={bill_id}.\")"
                },
                {
                    "lineno": 787,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 789,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 793,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 XeroBill #{bill_id} deletion handled.\")"
                },
                {
                    "lineno": 796,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem in delete_xero_bill({bill_id}): {e}\", exc_info=True)"
                },
                {
                    "lineno": 804,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\ud83d\uddd1\ufe0f Handling deleted line item for line_item_id={line_item_id}\")"
                },
                {
                    "lineno": 810,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(\"DB initialization is done.\")"
                },
                {
                    "lineno": 812,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"DB initialization failed! Error={e}\", exc_info=True)"
                },
                {
                    "lineno": 816,
                    "func": "info",
                    "caller": "logger",
                    "code": "logger.info(f\"\u2705 XeroBill line item #{line_item_id} deletion handled.\")"
                },
                {
                    "lineno": 819,
                    "func": "error",
                    "caller": "logger",
                    "code": "logger.error(f\"\ud83d\udca5 Problem with delete_xero_bill_line_item({line_item_id}): {e}\", exc_info=True)"
                }
            ]
        }
    },
    {
        "file_path": "files_po_log/__init__.py",
        "logging_data": {
            "logging_imports": [],
            "logger_creations": [],
            "logger_calls": []
        }
    },
    {
        "file_path": "files_po_log/po_log_processor.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 2,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 17,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 18,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83c\udfac\ud83c\udf7f PO Log Processor initialized (Custom Version) \ud83c\udf1f\")"
                },
                {
                    "lineno": 23,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd0d Searching for project ID in filename: '{filename}'\")"
                },
                {
                    "lineno": 28,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u2705 Project ID '{project_number}' extracted from filename '{filename}'. \ud83c\udf89\")"
                },
                {
                    "lineno": 31,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f No Project ID found in filename '{filename}'. Defaulting to '0000' \ud83e\udd14\")"
                },
                {
                    "lineno": 35,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd27 Mapping payment type for raw_type='{raw_type}'\")"
                },
                {
                    "lineno": 88,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u23f0 Parsing date from '{date_str}'\")"
                },
                {
                    "lineno": 92,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u2757\ufe0f Date parsing error for '{date_str}': {e}, using today's date.\")"
                },
                {
                    "lineno": 96,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcb2 Cleaning numeric value '{num_str}'\")"
                },
                {
                    "lineno": 101,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u2757\ufe0f Numeric parsing error for '{num_str}': {e}, defaulting to 0.0\")"
                },
                {
                    "lineno": 105,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd27 Parsing factors: '{factors}' with subtotal='{subtotal}' \")"
                },
                {
                    "lineno": 120,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2714\ufe0f Found quantity='{quantity}' and rate='{rate}' from factors.\")"
                },
                {
                    "lineno": 123,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(error_msg)"
                },
                {
                    "lineno": 127,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(error_msg)"
                },
                {
                    "lineno": 135,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u2714\ufe0f Found OT='{ot}' from factors.\")"
                },
                {
                    "lineno": 137,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u2757\ufe0f Error parsing OT from factors '{factors}': {e}\")"
                },
                {
                    "lineno": 142,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\udcc2 Reading file: '{file_path}' for project_number='{project_number}'\")"
                },
                {
                    "lineno": 156,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\uddc2 Headers found: {headers}\")"
                },
                {
                    "lineno": 159,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcdc Processing row {row_number}: {row}\")"
                },
                {
                    "lineno": 161,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udeab Empty row skipped.\")"
                },
                {
                    "lineno": 164,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udeab Header-like row encountered, skipping.\")"
                },
                {
                    "lineno": 168,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                        f\"\ud83d\udd27 Row {row_number} has fewer than {expected_columns} columns. Padding with empty strings.\")"
                },
                {
                    "lineno": 172,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                        f\"\u26a0\ufe0f Row {row_number} has more than {expected_columns} columns. Truncating extras.\")"
                },
                {
                    "lineno": 189,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u2757\ufe0f Malformed line at row {row_number}: {row}, error: {e}\")"
                },
                {
                    "lineno": 193,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u2757\ufe0f Missing transaction date at row {row_number}: {row}\")"
                },
                {
                    "lineno": 196,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u2757\ufe0f Missing raw type at row {row_number}: {row}\")"
                },
                {
                    "lineno": 199,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u2757\ufe0f No PO number found at row {row_number}: {row}\")"
                },
                {
                    "lineno": 214,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u2757\ufe0f Invalid date at row {row_number}: {transaction_date_str}, error: {e}\")"
                },
                {
                    "lineno": 252,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udce6 Created main item for PO='{po_number}' with contact='{contact_name}'.\")"
                },
                {
                    "lineno": 257,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u2757\ufe0f Invalid date at row {row_number}: {transaction_date_str}, error: {e}\")"
                },
                {
                    "lineno": 272,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u2757\ufe0f Invalid envelope number '{envelope_str}' at row {row_number}\")"
                },
                {
                    "lineno": 297,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcdd Added raw entry: {entry}\")"
                },
                {
                    "lineno": 314,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd17 Tracked manual ID='{detail_item_id_key}' for PO='{po_number}'.\")"
                },
                {
                    "lineno": 320,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\u270f\ufe0f Updated main item description for PO='{po_number}'.\")"
                },
                {
                    "lineno": 322,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n            f\"\ud83d\udcd1 Finished reading entries. Found {len(main_items)} main items, {len(raw_entries)} raw entries.\")"
                },
                {
                    "lineno": 335,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udd16 Assigning detail_item_id and line_number to entries...\")"
                },
                {
                    "lineno": 342,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udd17 Manual ID='{mid}' recorded for key='{key_for_ids}'\")"
                },
                {
                    "lineno": 389,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\n                f\"\ud83c\udd94 Assigned detail_item_id='{detail_item_id}', line_number='{line_number}' \"\n                f\"for PO='{entry['po_number']}', payment_type='{payment_type}'.\"\n            )"
                },
                {
                    "lineno": 395,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\ud83d\ude80 Starting parse_showbiz_po_log for file: {file_path}\")"
                },
                {
                    "lineno": 402,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udd04 Creating detail_items from raw_entries...\")"
                },
                {
                    "lineno": 424,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcbe Created detail_item: {detail_item}\")"
                },
                {
                    "lineno": 427,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(\"\ud83d\udd22 Summing up amounts for main items...\")"
                },
                {
                    "lineno": 435,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\udcc8 PO='{m['po_number']}' total amount='{total_amount}'\")"
                },
                {
                    "lineno": 437,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\n            f\"\ud83c\udf89 Parsed {len(main_items)} main items, {len(detail_items)} detail items, and {len(contacts)} contacts for project {project_number}.\"\n        )"
                },
                {
                    "lineno": 441,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\uddd2 Main Items: {main_items}\")"
                },
                {
                    "lineno": 442,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\uddd2 Detail Items: {detail_items}\")"
                },
                {
                    "lineno": 443,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\uddd2 Contacts: {contacts}\")"
                },
                {
                    "lineno": 445,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\u2705 Parsing completed successfully! \ud83c\udfc1\")"
                }
            ]
        }
    },
    {
        "file_path": "files_po_log/po_log_database_util.py",
        "logging_data": {
            "logging_imports": [
                {
                    "type": "import_logging",
                    "lineno": 11,
                    "code": "import logging"
                }
            ],
            "logger_creations": [
                {
                    "lineno": 38,
                    "code": "logging.getLogger(\"app_logger\")"
                }
            ],
            "logger_calls": [
                {
                    "lineno": 39,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"PO Log Database Util initialized\")"
                },
                {
                    "lineno": 58,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83e\udd1d Found in database: {contact.get('name')}\")"
                },
                {
                    "lineno": 67,
                    "func": "debug",
                    "caller": "self.logger",
                    "code": "self.logger.debug(f\"\ud83d\ude45 Not in database: {contact.get('name')}\")"
                },
                {
                    "lineno": 69,
                    "func": "error",
                    "caller": "self.logger",
                    "code": "self.logger.error(f\"\ud83d\udca5 Error processing contact '{contact.get('name', 'Unknown')}': {e}\", exc_info=True)"
                },
                {
                    "lineno": 78,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(\"\ud83d\udd17 link_contact_to_po is not fully migrated; use db_ops if needed.\")"
                },
                {
                    "lineno": 263,
                    "func": "info",
                    "caller": "self.logger",
                    "code": "self.logger.info(f\"\u26a0\ufe0f No contact found with name: {name}\")"
                },
                {
                    "lineno": 326,
                    "func": "warning",
                    "caller": "self.logger",
                    "code": "self.logger.warning(f\"\u26a0\ufe0f No PO found for {project_id}_{po_number}, cannot update folder_link.\")"
                }
            ]
        }
    }
]