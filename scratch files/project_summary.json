[
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_agent/codegen_service.py",
        "functions": [
            {
                "name": "apply_sql_script",
                "args": [
                    "sql_script"
                ],
                "decorators": [],
                "calls": [
                    "get_db_session"
                ],
                "docstring": "Execute multi-statement SQL script against the DB using the provided session factory.\nFor foreign key constraints, ensure the referencing and referenced tables use same engine (InnoDB).",
                "returns": null
            },
            {
                "name": "update_sqlalchemy_models",
                "args": [
                    "table_name",
                    "columns_or_updates",
                    "create",
                    "delete",
                    "models_file_path"
                ],
                "decorators": [],
                "calls": [
                    "_update_model_class",
                    "_remove_model_class",
                    "_table_name_to_class_name",
                    "_build_sqlalchemy_class"
                ],
                "docstring": "- If create=True, insert a new class into models.py (at bottom).\n- If delete=True, remove existing definition for that table.\n- Otherwise, do partial updates.",
                "returns": null
            },
            {
                "name": "_build_sqlalchemy_class",
                "args": [
                    "table_name",
                    "columns"
                ],
                "decorators": [],
                "calls": [
                    "_parse_column_def",
                    "_table_name_to_class_name"
                ],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "_parse_column_def",
                "args": [
                    "column_string"
                ],
                "decorators": [],
                "calls": [],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "_remove_model_class",
                "args": [
                    "table_name",
                    "file_content"
                ],
                "decorators": [],
                "calls": [
                    "_table_name_to_class_name"
                ],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "_update_model_class",
                "args": [
                    "table_name",
                    "file_content",
                    "updates"
                ],
                "decorators": [],
                "calls": [
                    "_table_name_to_class_name"
                ],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "_table_name_to_class_name",
                "args": [
                    "table_name"
                ],
                "decorators": [],
                "calls": [],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "update_database_util_files",
                "args": [
                    "table_name",
                    "create",
                    "delete",
                    "db_util_path"
                ],
                "decorators": [],
                "calls": [
                    "_build_crud_methods",
                    "_remove_crud_methods"
                ],
                "docstring": "If create=True, we append new CRUD stubs at bottom. If delete=True, remove them.",
                "returns": null
            },
            {
                "name": "_build_crud_methods",
                "args": [
                    "table_name"
                ],
                "decorators": [],
                "calls": [
                    "_table_name_to_class_name"
                ],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "_remove_crud_methods",
                "args": [
                    "table_name",
                    "content"
                ],
                "decorators": [],
                "calls": [],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "update_database_trigger_file",
                "args": [
                    "table_name",
                    "create",
                    "delete",
                    "triggers_file_path"
                ],
                "decorators": [],
                "calls": [
                    "_remove_trigger_routing",
                    "_add_trigger_routing",
                    "_add_import_for_celery_tasks"
                ],
                "docstring": "If create=True, add references to TASK_ROUTING or create it.\nCould also add an import for process_{table_name}_ tasks if needed.",
                "returns": null
            },
            {
                "name": "_add_import_for_celery_tasks",
                "args": [
                    "table_name",
                    "content"
                ],
                "decorators": [],
                "calls": [],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "_add_trigger_routing",
                "args": [
                    "table_name",
                    "content"
                ],
                "decorators": [],
                "calls": [],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "_remove_trigger_routing",
                "args": [
                    "table_name",
                    "content"
                ],
                "decorators": [],
                "calls": [],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "update_database_trigger_service_file",
                "args": [
                    "table_name",
                    "create",
                    "delete",
                    "trigger_service_path"
                ],
                "decorators": [],
                "calls": [
                    "_add_trigger_service_methods",
                    "_remove_trigger_service_methods"
                ],
                "docstring": "If create=True, add new <table_name>_trigger_on_create/update/delete at bottom.\nIf delete=True, remove them.",
                "returns": null
            },
            {
                "name": "_add_trigger_service_methods",
                "args": [
                    "table_name",
                    "content"
                ],
                "decorators": [],
                "calls": [
                    "_build_trigger_service_methods"
                ],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "_build_trigger_service_methods",
                "args": [
                    "table_name"
                ],
                "decorators": [],
                "calls": [
                    "_table_name_to_class_name"
                ],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "_remove_trigger_service_methods",
                "args": [
                    "table_name",
                    "content"
                ],
                "decorators": [],
                "calls": [],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "update_celery_tasks_file",
                "args": [
                    "table_name",
                    "create",
                    "delete",
                    "celery_file_path"
                ],
                "decorators": [],
                "calls": [
                    "_remove_celery_tasks",
                    "_add_celery_tasks"
                ],
                "docstring": "If create=True, add tasks at bottom. If delete=True, remove them.",
                "returns": null
            },
            {
                "name": "_add_celery_tasks",
                "args": [
                    "table_name",
                    "content"
                ],
                "decorators": [],
                "calls": [
                    "_build_celery_tasks"
                ],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "_build_celery_tasks",
                "args": [
                    "table_name"
                ],
                "decorators": [],
                "calls": [
                    "_table_name_to_class_name"
                ],
                "docstring": null,
                "returns": "str"
            },
            {
                "name": "_remove_celery_tasks",
                "args": [
                    "table_name",
                    "content"
                ],
                "decorators": [],
                "calls": [],
                "docstring": null,
                "returns": "str"
            }
        ],
        "classes": [
            {
                "name": "AiLogCaptureHandler",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "__init__"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "emit",
                        "args": [
                            "self",
                            "record"
                        ],
                        "decorators": [],
                        "calls": [
                            "format"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_logs",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "List[str]"
                    },
                    {
                        "name": "clear_logs",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "logger",
                "value": "logging.getLogger('agent_logger')"
            },
            {
                "name": "_ai_log_handler",
                "value": "AiLogCaptureHandler()"
            },
            {
                "name": "formatter",
                "value": "logging.Formatter('[%(levelname)s] %(name)s - %(message)s')"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_agent/chat_service.py",
        "functions": [],
        "classes": [
            {
                "name": "ChatService",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "initialize_database"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_table",
                        "args": [
                            "self",
                            "table_name",
                            "columns_or_defs"
                        ],
                        "decorators": [],
                        "calls": [
                            "_build_create_table_sql",
                            "update_database_trigger_file",
                            "apply_sql_script",
                            "update_database_util_files",
                            "update_celery_tasks_file",
                            "update_sqlalchemy_models"
                        ],
                        "docstring": "Creates a new table in the DB with the provided columns, then updates code references.",
                        "returns": null
                    },
                    {
                        "name": "update_table",
                        "args": [
                            "self",
                            "table_name",
                            "updates"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_database_trigger_file",
                            "apply_sql_script",
                            "update_database_util_files",
                            "update_celery_tasks_file",
                            "update_sqlalchemy_models",
                            "_build_alter_sql"
                        ],
                        "docstring": "Updates columns (add/drop) or other aspects, then updates references in code.",
                        "returns": null
                    },
                    {
                        "name": "delete_table",
                        "args": [
                            "self",
                            "table_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_database_trigger_file",
                            "apply_sql_script",
                            "update_database_util_files",
                            "update_celery_tasks_file",
                            "update_sqlalchemy_models"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "insert_data",
                        "args": [
                            "self",
                            "table_name",
                            "data"
                        ],
                        "decorators": [],
                        "calls": [
                            "_resolve_model",
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_data",
                        "args": [
                            "self",
                            "table_name",
                            "updates",
                            "where"
                        ],
                        "decorators": [],
                        "calls": [
                            "_resolve_model",
                            "_search_records",
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "query_data",
                        "args": [
                            "self",
                            "table_name",
                            "filters"
                        ],
                        "decorators": [],
                        "calls": [
                            "_resolve_model",
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "answer_general_question",
                        "args": [
                            "self",
                            "user_input"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "describe_data",
                        "args": [
                            "self",
                            "table_name"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Provides metadata and basic statistics about the specified table.\nReturns a formatted string with details.",
                        "returns": "str"
                    },
                    {
                        "name": "_resolve_model",
                        "args": [
                            "self",
                            "table_name"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Maps table_name to the actual SQLAlchemy model.",
                        "returns": null
                    },
                    {
                        "name": "_build_create_table_sql",
                        "args": [
                            "self",
                            "table_name",
                            "columns"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_build_alter_sql",
                        "args": [
                            "self",
                            "table_name",
                            "updates"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Builds an ALTER TABLE SQL command for the given updates.",
                        "returns": "str"
                    }
                ],
                "decorators": []
            }
        ],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_agent/agent_app.py",
        "functions": [],
        "classes": [
            {
                "name": "ChatAgent",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self",
                            "model"
                        ],
                        "decorators": [],
                        "calls": [
                            "_get_models_file_content",
                            "initialize_database"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "run_chat",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "handle_user_input"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "_format_as_ascii_table",
                        "args": [
                            "self",
                            "headers",
                            "rows"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_resolve_path",
                        "args": [
                            "self",
                            "path_str"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "Path"
                    },
                    {
                        "name": "_find_file_by_name",
                        "args": [
                            "self",
                            "filename"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "Optional[Path]"
                    },
                    {
                        "name": "_read_file",
                        "args": [
                            "self",
                            "filename"
                        ],
                        "decorators": [],
                        "calls": [
                            "_find_file_by_name",
                            "_resolve_path"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_write_file",
                        "args": [
                            "self",
                            "filename",
                            "new_content"
                        ],
                        "decorators": [],
                        "calls": [
                            "_resolve_path"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_edit_file",
                        "args": [
                            "self",
                            "filename",
                            "new_content"
                        ],
                        "decorators": [],
                        "calls": [
                            "_write_file"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_delete_file",
                        "args": [
                            "self",
                            "filename"
                        ],
                        "decorators": [],
                        "calls": [
                            "_resolve_path"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_count_python_files",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_confirm_file_access",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "_format_as_ascii_table"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_get_file_info",
                        "args": [
                            "self",
                            "filename"
                        ],
                        "decorators": [],
                        "calls": [
                            "_find_file_by_name",
                            "_resolve_path"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "disambiguate_query",
                        "args": [
                            "self",
                            "query"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Use the LLM to ask for clarification if the query is ambiguous.\nExpected return values are \"file\" or \"db\".",
                        "returns": "str"
                    },
                    {
                        "name": "_debug_error",
                        "args": [
                            "self",
                            "error",
                            "code",
                            "request"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_recommend_code",
                        "args": [
                            "self",
                            "filename"
                        ],
                        "decorators": [],
                        "calls": [
                            "_confirm_file_access",
                            "_read_file"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "decompose_request",
                        "args": [
                            "self",
                            "request"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "List[Dict[str, Any]]"
                    },
                    {
                        "name": "process_tasks",
                        "args": [
                            "self",
                            "tasks"
                        ],
                        "decorators": [],
                        "calls": [
                            "_write_file",
                            "_call_llm",
                            "_read_file",
                            "_auto_execute_task",
                            "_confirm_file_access",
                            "_edit_file",
                            "_delete_file"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "classify_intent",
                        "args": [
                            "self",
                            "user_input"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "parse_db_request",
                        "args": [
                            "self",
                            "user_input"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "dict"
                    },
                    {
                        "name": "_get_models_file_content",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "resolve_table_name",
                        "args": [
                            "self",
                            "input_name"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_format_result",
                        "args": [
                            "self",
                            "raw_result",
                            "request"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "handle_user_input",
                        "args": [
                            "self",
                            "user_input"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_table_by_column",
                            "_call_llm",
                            "_sum_column_in_table",
                            "_format_result",
                            "_edit_file",
                            "resolve_table_name",
                            "_avg_column_in_table",
                            "_debug_error",
                            "_min_column_in_table",
                            "_count_rows_in_table",
                            "_update_record",
                            "_confirm_file_access",
                            "_count_python_files",
                            "_write_file",
                            "_max_column_in_table",
                            "_read_file",
                            "parse_db_request",
                            "disambiguate_query",
                            "_list_all_rows_in_table",
                            "decompose_request",
                            "process_tasks",
                            "_recommend_code",
                            "classify_intent",
                            "_count_tables_in_db",
                            "_delete_record",
                            "_auto_execute_task",
                            "_describe_table",
                            "_insert_new_record",
                            "_delete_file"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_call_llm",
                        "args": [
                            "self",
                            "message"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_auto_execute_task",
                        "args": [
                            "self",
                            "request"
                        ],
                        "decorators": [],
                        "calls": [
                            "_call_llm_for_code",
                            "_debug_error"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_call_llm_for_code",
                        "args": [
                            "self",
                            "prompt"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_count_tables_in_db",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_list_table_names_in_db",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session",
                            "_format_as_ascii_table"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_describe_table",
                        "args": [
                            "self",
                            "table_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session",
                            "_format_as_ascii_table"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_add_column_to_table",
                        "args": [
                            "self",
                            "table_name",
                            "column_def"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_drop_column_from_table",
                        "args": [
                            "self",
                            "table_name",
                            "column_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_create_table",
                        "args": [
                            "self",
                            "table_name",
                            "column_info"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_drop_table",
                        "args": [
                            "self",
                            "table_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_count_rows_in_table",
                        "args": [
                            "self",
                            "table_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_list_all_rows_in_table",
                        "args": [
                            "self",
                            "table_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session",
                            "_format_as_ascii_table"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_search_table_by_column",
                        "args": [
                            "self",
                            "table_name",
                            "column_name",
                            "value"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session",
                            "_format_as_ascii_table"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_sum_column_in_table",
                        "args": [
                            "self",
                            "table_name",
                            "column_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_avg_column_in_table",
                        "args": [
                            "self",
                            "table_name",
                            "column_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_max_column_in_table",
                        "args": [
                            "self",
                            "table_name",
                            "column_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_min_column_in_table",
                        "args": [
                            "self",
                            "table_name",
                            "column_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_insert_new_record",
                        "args": [
                            "self",
                            "table_name",
                            "assignments"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_update_record",
                        "args": [
                            "self",
                            "table_name",
                            "set_part",
                            "where_part"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_delete_record",
                        "args": [
                            "self",
                            "table_name",
                            "where_part"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": "str"
                    }
                ],
                "decorators": []
            }
        ],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_agent/agent_v2.py",
        "functions": [
            {
                "name": "index",
                "args": [],
                "decorators": [
                    "app.route('/')"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "chat",
                "args": [],
                "decorators": [
                    "app.route('/chat')"
                ],
                "calls": [
                    "process_message"
                ],
                "docstring": null,
                "returns": null
            }
        ],
        "classes": [
            {
                "name": "DatabaseInterface",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session",
                            "initialize_database"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "execute_query",
                        "args": [
                            "self",
                            "sql_query"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "FileInterface",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self",
                            "base_dir"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "is_safe_path",
                        "args": [
                            "self",
                            "path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "read_file",
                        "args": [
                            "self",
                            "filename"
                        ],
                        "decorators": [],
                        "calls": [
                            "is_safe_path"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "write_file",
                        "args": [
                            "self",
                            "filename",
                            "content"
                        ],
                        "decorators": [],
                        "calls": [
                            "is_safe_path"
                        ],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "LLMClient",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self",
                            "api_key"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_response",
                        "args": [
                            "self",
                            "conversation_history"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "conversation_history is a list of {role: \"...\", content: \"...\"} dicts.\nWe'll feed that directly into client.chat.completions.create(...)",
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "ChatAgent",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self",
                            "llm_client",
                            "db_interface",
                            "file_interface"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "process_message",
                        "args": [
                            "self",
                            "user_message"
                        ],
                        "decorators": [],
                        "calls": [
                            "execute_query",
                            "get_response",
                            "write_file",
                            "read_file"
                        ],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "app",
                "value": "Flask(__name__)"
            },
            {
                "name": "OPENAI_API_KEY",
                "value": "os.getenv('OPENAI_API_KEY', 'your-api-key-here')"
            },
            {
                "name": "llm_client",
                "value": "LLMClient(api_key=OPENAI_API_KEY)"
            },
            {
                "name": "db_interface",
                "value": "DatabaseInterface()"
            },
            {
                "name": "file_interface",
                "value": "FileInterface()"
            },
            {
                "name": "chat_agent",
                "value": "ChatAgent(llm_client, db_interface, file_interface)"
            },
            {
                "name": "HTML_TEMPLATE",
                "value": "'\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Python-based Chat Agent</title>\\n    <style>\\n        body { font-family: Arial, sans-serif; margin: 40px; }\\n        #chat-box { width: 100%; height: 400px; border: 1px solid #ccc; overflow-y: scroll; padding: 10px; }\\n        #user-input { width: 80%; padding: 10px; }\\n        #send-btn { padding: 10px; }\\n        .message { margin: 5px 0; }\\n        .user { color: blue; }\\n        .agent { color: green; }\\n    </style>\\n</head>\\n<body>\\n    <h1>Python-based Chat Agent</h1>\\n    <div id=\"chat-box\"></div>\\n    <br>\\n    <input type=\"text\" id=\"user-input\" placeholder=\"Type your message here...\" />\\n    <button id=\"send-btn\">Send</button>\\n    <script>\\n        const chatBox = document.getElementById(\"chat-box\");\\n        const userInput = document.getElementById(\"user-input\");\\n        const sendBtn = document.getElementById(\"send-btn\");\\n\\n        function appendMessage(sender, text) {\\n            const msgDiv = document.createElement(\"div\");\\n            msgDiv.classList.add(\"message\", sender);\\n            msgDiv.textContent = sender.toUpperCase() + \": \" + text;\\n            chatBox.appendChild(msgDiv);\\n            chatBox.scrollTop = chatBox.scrollHeight;\\n        }\\n\\n        sendBtn.addEventListener(\"click\", () => {\\n            const message = userInput.value;\\n            if (message.trim() === \"\") return;\\n            appendMessage(\"user\", message);\\n            fetch(\"/chat\", {\\n                method: \"POST\",\\n                headers: { \"Content-Type\": \"application/json\" },\\n                body: JSON.stringify({ message: message })\\n            })\\n            .then(response => response.json())\\n            .then(data => {\\n                appendMessage(\"agent\", data.reply);\\n            })\\n            .catch(error => {\\n                appendMessage(\"agent\", \"Error: \" + error);\\n            });\\n            userInput.value = \"\";\\n        });\\n\\n        userInput.addEventListener(\"keypress\", (e) => {\\n            if (e.key === \"Enter\") {\\n                sendBtn.click();\\n            }\\n        });\\n    </script>\\n</body>\\n</html>\\n'"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_agent/logging_setup.py",
        "functions": [
            {
                "name": "setup_logging",
                "args": [],
                "decorators": [],
                "calls": [],
                "docstring": "Create loggers for each module: budget, dropbox, invoice, monday, po_log, xero, database.\nEach logger writes to a separate file in ./logs, plus a StreamHandler for the console.",
                "returns": null
            }
        ],
        "classes": [],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/database/models.py",
        "functions": [],
        "classes": [
            {
                "name": "Contact",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "User",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "BudgetMap",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "AccountCode",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "TaxLedger",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "TaxAccount",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "AuditLog",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "BankTransaction",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "XeroBill",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "XeroBillLineItem",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "PoLog",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "DetailItem",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "Project",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "PurchaseOrder",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "Invoice",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "Receipt",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "SpendMoney",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "SysTable",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "TaxForm",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            },
            {
                "name": "Dropboxfolder",
                "methods": [
                    {
                        "name": "to_dict",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "Base",
                "value": "declarative_base()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/database/db_util.py",
        "functions": [
            {
                "name": "initialize_database",
                "args": [
                    "connection_string"
                ],
                "decorators": [],
                "calls": [],
                "docstring": "Initializes the database engine, sessionmaker, and creates tables.\nImplements:\n  - pool_pre_ping=True to avoid stale connections\n  - pool_recycle=3600 to recycle connections older than 1h",
                "returns": null
            },
            {
                "name": "get_db_session",
                "args": [],
                "decorators": [
                    "contextmanager"
                ],
                "calls": [],
                "docstring": "A single, unified context manager for obtaining and releasing a DB session.",
                "returns": null
            }
        ],
        "classes": [],
        "variables": [
            {
                "name": "logger",
                "value": "logging.getLogger('database_logger')"
            },
            {
                "name": "engine",
                "value": "None"
            },
            {
                "name": "SessionLocal",
                "value": "None"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/database/__init__.py",
        "functions": [],
        "classes": [],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/database/database_util.py",
        "functions": [],
        "classes": [
            {
                "name": "DatabaseOperations",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "_serialize_record",
                        "args": [
                            "self",
                            "record"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Converts a SQLAlchemy model record into a dict of column_name -> value.\nReturns None if record is None.",
                        "returns": null
                    },
                    {
                        "name": "_search_records",
                        "args": [
                            "self",
                            "model",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session",
                            "_serialize_record"
                        ],
                        "docstring": "Searches for records of a given model based on multiple column filters.\nReturns:\n  - None if no records,\n  - A single dict if exactly one found,\n  - A list if multiple found,\n  - [] if mismatch or error.",
                        "returns": "Union[None, Dict[str, Any], List[Dict[str, Any]]]"
                    },
                    {
                        "name": "_create_record",
                        "args": [
                            "self",
                            "model",
                            "unique_lookup",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session",
                            "_serialize_record",
                            "_search_records"
                        ],
                        "docstring": "Creates a new record in the DB. Returns its dict form or None on error.\nIf an IntegrityError occurs and unique_lookup is set, attempts concurrency\nfallback by re-querying within a SAVEPOINT (nested transaction).",
                        "returns": "Optional[Dict[str, Any]]"
                    },
                    {
                        "name": "_update_record",
                        "args": [
                            "self",
                            "model",
                            "record_id",
                            "unique_lookup",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session",
                            "_serialize_record",
                            "_search_records"
                        ],
                        "docstring": "Updates an existing record by primary key. Returns updated record or None on error.\nIf IntegrityError and unique_lookup is set, tries concurrency fallback.",
                        "returns": "Optional[Dict[str, Any]]"
                    },
                    {
                        "name": "_delete_record",
                        "args": [
                            "self",
                            "model",
                            "record_id",
                            "unique_lookup",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session",
                            "_search_records"
                        ],
                        "docstring": "Deletes an existing record by primary key. Returns True if deleted, False otherwise.\nIf IntegrityError with unique_lookup, tries concurrency fallback.",
                        "returns": "bool"
                    },
                    {
                        "name": "_has_changes_for_record",
                        "args": [
                            "self",
                            "model",
                            "record_id",
                            "unique_filters",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session",
                            "_serialize_record",
                            "_search_records"
                        ],
                        "docstring": "Checks if a record has different values than provided. If record_id is given,\nfetch by ID. Otherwise uses unique_filters. Compares each kwarg to the record.\nReturns True if differences are found, else False.",
                        "returns": "bool"
                    },
                    {
                        "name": "create_account_code",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_account_codes",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_account_code",
                        "args": [
                            "self",
                            "account_code_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_account_code",
                        "args": [
                            "self",
                            "account_code_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "account_code_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "code",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "create_purchase_order",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_purchase_orders",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_purchase_order",
                        "args": [
                            "self",
                            "po_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_purchase_order",
                        "args": [
                            "self",
                            "po_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "purchase_order_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "project_number",
                            "po_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "search_purchase_order_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_purchase_orders"
                        ],
                        "docstring": null,
                        "returns": "Union[None, Dict[str, Any], List[Dict[str, Any]]]"
                    },
                    {
                        "name": "create_purchase_order_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_purchase_order",
                            "search_projects"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_purchase_order_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_purchase_order_by_keys",
                            "update_purchase_order"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_detail_item",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_detail_items",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_detail_item",
                        "args": [
                            "self",
                            "detail_item_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_detail_item",
                        "args": [
                            "self",
                            "detail_item_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "detail_item_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "search_detail_item_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_detail_items"
                        ],
                        "docstring": null,
                        "returns": "Union[None, Dict[str, Any], List[Dict[str, Any]]]"
                    },
                    {
                        "name": "create_detail_item_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_detail_item_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_detail_item",
                            "search_detail_item_by_keys"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_contact",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_contacts",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_contact",
                        "args": [
                            "self",
                            "contact_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_contact",
                        "args": [
                            "self",
                            "contact_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "contact_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "name",
                            "email",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "find_contact_close_match",
                        "args": [
                            "self",
                            "contact_name",
                            "all_db_contacts"
                        ],
                        "decorators": [],
                        "calls": [
                            "_is_one_edit_away"
                        ],
                        "docstring": "Finds contacts in all_db_contacts that have the same first character as contact_name and are at most one edit away.\n\nArgs:\n    contact_name (str): The name of the contact to match.\n    all_db_contacts (List[Dict[str, Any]]): A list of contact dictionaries to search within.\n\nReturns:\n    Optional[List[Dict[str, Any]]]: A list of matching contact dictionaries or None if no matches found.",
                        "returns": "Optional[List[Dict[str, Any]]]"
                    },
                    {
                        "name": "_is_one_edit_away",
                        "args": [
                            "self",
                            "s1",
                            "s2"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Determines if two strings are at most one edit away from each other.\nAn edit is an insertion, deletion, or substitution of a single character.\n\nArgs:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\nReturns:\n    bool: True if the strings are at most one edit away, False otherwise.",
                        "returns": "bool"
                    },
                    {
                        "name": "create_minimal_contact",
                        "args": [
                            "self",
                            "contact_name",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_contact"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_project",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_projects",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_project",
                        "args": [
                            "self",
                            "project_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_project",
                        "args": [
                            "self",
                            "project_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "project_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "project_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "create_bank_transaction",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_bank_transactions",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_bank_transaction",
                        "args": [
                            "self",
                            "transaction_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_bank_transaction",
                        "args": [
                            "self",
                            "transaction_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "bank_transaction_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "transaction_id_xero",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "create_xero_bill_line_item",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_xero_bill_line_items",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_xero_bill_line_item",
                        "args": [
                            "self",
                            "xero_bill_line_item_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_xero_bill_line_item",
                        "args": [
                            "self",
                            "xero_bill_line_item_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "xero_bill_line_item_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "parent_id",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "search_xero_bill_line_item_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_xero_bill_line_items"
                        ],
                        "docstring": null,
                        "returns": "Union[None, Dict[str, Any], List[Dict[str, Any]]]"
                    },
                    {
                        "name": "create_xero_bill_line_item_by_keys",
                        "args": [
                            "self",
                            "parent_id",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_xero_bill_line_item_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_xero_bill_line_item_by_keys",
                            "update_xero_bill_line_item"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_invoice",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_invoices",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_invoice",
                        "args": [
                            "self",
                            "invoice_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_invoice",
                        "args": [
                            "self",
                            "invoice_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "invoice_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "invoice_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "search_invoice_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "invoice_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_invoices"
                        ],
                        "docstring": null,
                        "returns": "Union[None, Dict[str, Any], List[Dict[str, Any]]]"
                    },
                    {
                        "name": "create_receipt",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_receipts",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_receipt_by_id",
                        "args": [
                            "self",
                            "receipt_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_receipt_by_id",
                        "args": [
                            "self",
                            "receipt_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "receipt_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "search_receipt_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_receipts"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_receipt_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_receipt"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_receipt_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_receipt_by_keys",
                            "update_receipt_by_id"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_spend_money",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_spend_money",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "deleted",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_spend_money",
                        "args": [
                            "self",
                            "spend_money_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_spend_money",
                        "args": [
                            "self",
                            "spend_money_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "spend_money_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "search_spend_money_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "deleted",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_spend_money"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_spend_money_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_spend_money_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_spend_money",
                            "search_spend_money_by_keys"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_tax_account",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_tax_accounts",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_tax_account",
                        "args": [
                            "self",
                            "tax_account_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_tax_account",
                        "args": [
                            "self",
                            "tax_account_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "tax_account_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "tax_code",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "create_xero_bill",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_xero_bills",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_xero_bill",
                        "args": [
                            "self",
                            "xero_bill_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_xero_bill",
                        "args": [
                            "self",
                            "xero_bill_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "bulk_create_xero_bill_line_items",
                        "args": [
                            "self",
                            "bill_id",
                            "items",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_serialize_record",
                            "search_xero_bill_line_items"
                        ],
                        "docstring": "Bulk create XeroBillLineItem records for a given XeroBill, skipping any\nthat already exist either in the database or within the provided items list.\n\nParameters:\n  bill_id (int): The ID of the parent XeroBill record.\n  items (List[dict]): A list of dictionaries, each containing the fields for a new XeroBillLineItem.\n  session (Session, optional): A SQLAlchemy session to use for the operation.\n\nReturns:\n  List[Dict[str, Any]]: A list of dictionaries representing the newly created XeroBillLineItem records.",
                        "returns": "List[Dict[str, Any]]"
                    },
                    {
                        "name": "xero_bill_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "search_xero_bill_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_xero_bills"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_xero_bill_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_xero_bill_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "po_number",
                            "detail_number",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_xero_bill",
                            "search_xero_bill_by_keys"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_user",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_users",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_user",
                        "args": [
                            "self",
                            "user_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_user",
                        "args": [
                            "self",
                            "user_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "user_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "username",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "create_tax_ledger",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_tax_ledgers",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_tax_ledger",
                        "args": [
                            "self",
                            "ledger_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_tax_ledger",
                        "args": [
                            "self",
                            "ledger_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "tax_ledger_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "name",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "create_budget_map",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "search_budget_maps",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_budget_map",
                        "args": [
                            "self",
                            "map_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_budget_map",
                        "args": [
                            "self",
                            "map_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "budget_map_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "map_name",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": null,
                        "returns": "bool"
                    },
                    {
                        "name": "create_po_log",
                        "args": [
                            "self",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": "Creates a new PoLog record in the DB.\nReturns the created record as a dict or None on failure.",
                        "returns": null
                    },
                    {
                        "name": "search_po_logs",
                        "args": [
                            "self",
                            "column_names",
                            "values",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_search_records"
                        ],
                        "docstring": "Searches PoLog records with optional filters.\nReturns None, a dict, or a list of dicts.",
                        "returns": null
                    },
                    {
                        "name": "update_po_log",
                        "args": [
                            "self",
                            "po_log_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_update_record"
                        ],
                        "docstring": "Updates an existing PoLog by ID. Returns updated dict or None on failure.",
                        "returns": null
                    },
                    {
                        "name": "delete_po_log",
                        "args": [
                            "self",
                            "po_log_id",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_delete_record"
                        ],
                        "docstring": "Deletes a PoLog by ID. Returns True if deleted, False otherwise.",
                        "returns": "bool"
                    },
                    {
                        "name": "po_log_has_changes",
                        "args": [
                            "self",
                            "record_id",
                            "project_number",
                            "filename",
                            "db_path",
                            "status",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_has_changes_for_record"
                        ],
                        "docstring": "Checks if a PoLog record has changed.",
                        "returns": "bool"
                    },
                    {
                        "name": "search_po_log_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "filename",
                            "db_path",
                            "status",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_po_logs"
                        ],
                        "docstring": "Searches for PoLog records based on unique keys.",
                        "returns": "Union[None, Dict[str, Any], List[Dict[str, Any]]]"
                    },
                    {
                        "name": "create_po_log_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "filename",
                            "db_path",
                            "status",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_record"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_po_log_by_keys",
                        "args": [
                            "self",
                            "project_number",
                            "filename",
                            "db_path",
                            "status",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_po_log_by_keys",
                            "update_po_log"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "batch_search_detail_items_by_keys",
                        "args": [
                            "self",
                            "keys",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_serialize_record"
                        ],
                        "docstring": "Batch search for DetailItem records using a list of key dictionaries.\nEach key dict should have: project_number, po_number, detail_number, and line_number.\nReturns a list of matching DetailItem records as dicts.",
                        "returns": "List[Dict[str, Any]]"
                    },
                    {
                        "name": "bulk_create_detail_items",
                        "args": [
                            "self",
                            "items",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_serialize_record"
                        ],
                        "docstring": "Bulk create DetailItem records.",
                        "returns": "List[Dict[str, Any]]"
                    },
                    {
                        "name": "bulk_update_detail_items",
                        "args": [
                            "self",
                            "items",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_serialize_record"
                        ],
                        "docstring": "Bulk update DetailItem records.\nEach item dict must contain the 'id' field and the fields to update.",
                        "returns": "List[Dict[str, Any]]"
                    },
                    {
                        "name": "batch_search_receipts_by_keys",
                        "args": [
                            "self",
                            "keys",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_serialize_record"
                        ],
                        "docstring": "Batch search for Receipt records using a list of keys.\nEach key is a tuple: (project_number, po_number, detail_number)\nReturns a list of matching Receipt records as dicts.",
                        "returns": "List[Dict[str, Any]]"
                    },
                    {
                        "name": "bulk_update_detail_items_state",
                        "args": [
                            "self",
                            "detail_ids",
                            "new_state",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_serialize_record"
                        ],
                        "docstring": "Bulk update the state of DetailItem records identified by detail_ids.\nReturns the updated records as dicts.",
                        "returns": "List[Dict[str, Any]]"
                    },
                    {
                        "name": "bulk_create_spend_money",
                        "args": [
                            "self",
                            "items",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_serialize_record"
                        ],
                        "docstring": "Bulk create SpendMoney records.",
                        "returns": "List[Dict[str, Any]]"
                    },
                    {
                        "name": "batch_search_invoices_by_keys",
                        "args": [
                            "self",
                            "keys",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "_serialize_record"
                        ],
                        "docstring": "Batch search for Invoice records using a list of keys.\nEach key is a tuple: (project_number, po_number, invoice_number).\nReturns a list of matching Invoice records as dicts.",
                        "returns": "List[Dict[str, Any]]"
                    }
                ],
                "decorators": []
            }
        ],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/database/utils.py",
        "functions": [
            {
                "name": "get_po_state",
                "args": [
                    "item_id"
                ],
                "decorators": [],
                "calls": [
                    "get_db_session"
                ],
                "docstring": "Gets the current state of a PO.",
                "returns": null
            },
            {
                "name": "extract_url",
                "args": [
                    "column_values",
                    "target_id"
                ],
                "decorators": [],
                "calls": [],
                "docstring": "Safely extracts the URL from the 'value' field of a column.\n\nParameters:\n- column_values (dict): Dictionary of column values.\n- target_id (str): The ID of the target column.\n\nReturns:\n- str: Extracted URL or None if not available.",
                "returns": null
            },
            {
                "name": "parse_float",
                "args": [
                    "value"
                ],
                "decorators": [],
                "calls": [],
                "docstring": "Safely converts a string to a float.\n\nParameters:\n- value (str): The string to convert.\n\nReturns:\n- float: The converted float or None if conversion fails.",
                "returns": null
            },
            {
                "name": "map_event_to_update_data",
                "args": [
                    "event"
                ],
                "decorators": [],
                "calls": [
                    "get_sub_item_column_mapping",
                    "parse_float",
                    "extract_text"
                ],
                "docstring": "Maps the event data to the fields that need to be updated in the DetailItem.",
                "returns": null
            },
            {
                "name": "get_sub_item_column_mapping",
                "args": [],
                "decorators": [],
                "calls": [],
                "docstring": "Returns a mapping from column IDs to DetailItem model fields.\nUpdate this mapping based on your actual column IDs and model fields.",
                "returns": null
            },
            {
                "name": "extract_text",
                "args": [
                    "event"
                ],
                "decorators": [],
                "calls": [
                    "extract_url"
                ],
                "docstring": "Extracts the text value based on columnType.\nReturns None if the value is empty or None.",
                "returns": null
            },
            {
                "name": "validate_numeric_field",
                "args": [
                    "value",
                    "field_name"
                ],
                "decorators": [],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "parse_transaction_date",
                "args": [
                    "date_str"
                ],
                "decorators": [],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "extract_detail_item_id",
                "args": [
                    "raw_id"
                ],
                "decorators": [],
                "calls": [],
                "docstring": "Extracts the last two digits from a detail_item_id string and strips leading zeros.\n\nParameters:\n    raw_id (str): The raw detail_item_id string (e.g., '2516_03_02').\n\nReturns:\n    int: The processed detail_item_id (e.g., 2).",
                "returns": null
            }
        ],
        "classes": [],
        "variables": [
            {
                "name": "logger",
                "value": "logging.getLogger(__name__)"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/database/account_code_loader.py",
        "functions": [
            {
                "name": "update_account_codes",
                "args": [
                    "file_path"
                ],
                "decorators": [],
                "calls": [
                    "get_db_session"
                ],
                "docstring": "Updates the `account_codes` table using data from the specified file.\n\nArgs:\n    file_path (str): Path to the file containing ACCOUNT codes and descriptions.",
                "returns": null
            }
        ],
        "classes": [],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/database/base.py",
        "functions": [],
        "classes": [],
        "variables": [
            {
                "name": "Base",
                "value": "declarative_base()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_invoice/__init__.py",
        "functions": [],
        "classes": [],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_xero/xero_auth.py",
        "functions": [
            {
                "name": "index",
                "args": [],
                "decorators": [
                    "app.route('/')"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "start_xero_auth",
                "args": [],
                "decorators": [
                    "app.route('/start_xero_auth')"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "xero_callback",
                "args": [],
                "decorators": [
                    "app.route('/xero_callback')"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "xero_api",
                "args": [],
                "decorators": [
                    "app.route('/xero_api')"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            }
        ],
        "classes": [],
        "variables": [
            {
                "name": "logger",
                "value": "logging.getLogger('xero_logger')"
            },
            {
                "name": "app",
                "value": "Flask(__name__)"
            },
            {
                "name": "CLIENT_ID",
                "value": "os.getenv('XERO_CLIENT_ID', 'YOUR_CLIENT_ID')"
            },
            {
                "name": "CLIENT_SECRET",
                "value": "os.getenv('XERO_CLIENT_SECRET', 'YOUR_CLIENT_SECRET')"
            },
            {
                "name": "CALLBACK_URI",
                "value": "'http://localhost:5002/xero_callback'"
            },
            {
                "name": "DEFAULT_SCOPES",
                "value": "[XeroScopes.OFFLINE_ACCESS, XeroScopes.ACCOUNTING_TRANSACTIONS, XeroScopes.ACCOUNTING_SETTINGS, XeroScopes.ACCOUNTING_CONTACTS]"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_xero/xero_api.py",
        "functions": [],
        "classes": [
            {
                "name": "XeroAPI",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "_refresh_token_if_needed"
                        ],
                        "docstring": "Initialize the XeroAPI client:\n  - Load environment variables\n  - Build OAuth2 credentials\n  - Create Xero client\n  - Refresh token if needed",
                        "returns": null
                    },
                    {
                        "name": "_refresh_token_if_needed",
                        "args": [
                            "self",
                            "force"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "_retry_on_unauthorized",
                        "args": [
                            "self",
                            "func"
                        ],
                        "decorators": [],
                        "calls": [
                            "_refresh_token_if_needed"
                        ],
                        "docstring": "Retry logic for certain Xero exceptions (Unauthorized, RateLimit, etc.).",
                        "returns": null
                    },
                    {
                        "name": "_get_tax_code_for_detail_item",
                        "args": [
                            "self",
                            "session",
                            "detail_item"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_convert_detail_item_to_line_item",
                        "args": [
                            "self",
                            "session",
                            "detail_item"
                        ],
                        "decorators": [],
                        "calls": [
                            "_get_tax_code_for_detail_item"
                        ],
                        "docstring": null,
                        "returns": "dict"
                    },
                    {
                        "name": "get_contact_by_name",
                        "args": [
                            "self",
                            "name"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_all_contacts",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_contact",
                        "args": [
                            "self",
                            "contact_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_contact",
                        "args": [
                            "self",
                            "contact_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_contact_with_retry",
                        "args": [
                            "self",
                            "contact_data",
                            "max_retries"
                        ],
                        "decorators": [],
                        "calls": [
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_contacts_with_retry",
                        "args": [
                            "self",
                            "contacts_data",
                            "max_retries"
                        ],
                        "decorators": [],
                        "calls": [
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_invoice",
                        "args": [
                            "self",
                            "payload"
                        ],
                        "decorators": [],
                        "calls": [
                            "_refresh_token_if_needed",
                            "_retry_on_unauthorized"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_invoice_bulk",
                        "args": [
                            "self",
                            "payloads"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_invoice",
                        "args": [
                            "self",
                            "xero_id",
                            "changes"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_invoice",
                        "args": [
                            "self",
                            "invoice_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_invoice_details",
                        "args": [
                            "self",
                            "invoice_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "add_line_item_to_invoice",
                        "args": [
                            "self",
                            "invoice_id",
                            "line_item_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": "dict"
                    },
                    {
                        "name": "update_line_item_in_invoice",
                        "args": [
                            "self",
                            "invoice_id",
                            "line_item_id",
                            "new_line_item_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": "dict"
                    },
                    {
                        "name": "create_bill",
                        "args": [
                            "self",
                            "session",
                            "project_id",
                            "po_number",
                            "detail_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "_convert_detail_item_to_line_item",
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_bill_status",
                        "args": [
                            "self",
                            "invoice_id",
                            "new_status"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_bills_by_reference",
                        "args": [
                            "self",
                            "reference_str"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_bills_by_references",
                        "args": [
                            "self",
                            "reference_list"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": "Bulk-retrieves ACCPAY invoices from Xero that match any of the provided reference strings.\n\nParameters:\n  reference_list (list): A list of reference strings to search for.\n\nReturns:\n  list: A list of invoices (dictionaries) that match the provided references,\n        excluding those with a 'DELETED' status.",
                        "returns": "list"
                    },
                    {
                        "name": "get_all_bills",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_acpay_invoices_summary_by_ref",
                        "args": [
                            "self",
                            "reference_substring"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": "list"
                    },
                    {
                        "name": "create_spend_money",
                        "args": [
                            "self",
                            "session",
                            "detail_item_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "_create_voided_spend_money",
                            "_convert_detail_item_to_line_item",
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_spend_money_in_xero",
                        "args": [
                            "self",
                            "spend_money_record"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_spend_money_via_detail_id",
                        "args": [
                            "self",
                            "detail_item_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_spend_money",
                        "args": [
                            "self",
                            "xero_spend_money_id",
                            "new_state"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_spend_transaction_status",
                        "args": [
                            "self",
                            "xero_spend_money_id",
                            "new_state"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_spend_money"
                        ],
                        "docstring": null,
                        "returns": "dict"
                    },
                    {
                        "name": "_create_voided_spend_money",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_spend_money_bulk",
                        "args": [
                            "self",
                            "spend_money_records"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": "Create multiple spend money transactions in Xero in a single API call.\nspend_money_records: list of dictionaries representing spend money transactions.\nReturns the response from Xero.",
                        "returns": null
                    },
                    {
                        "name": "update_spend_money_bulk",
                        "args": [
                            "self",
                            "spend_money_records"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": "Update multiple spend money transactions in Xero in a single API call.\nspend_money_records: list of dictionaries representing spend money transactions with updated data.\nReturns the response from Xero.",
                        "returns": null
                    },
                    {
                        "name": "get_spend_money_by_reference",
                        "args": [
                            "self",
                            "project_id",
                            "po_number",
                            "detail_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized",
                            "_refresh_token_if_needed"
                        ],
                        "docstring": "Retrieve SPEND transactions from Xero that match a specific reference constructed\nfrom the provided project_id, po_number, and detail_number.\n\nParameters:\n  project_id (int): The project ID component of the reference.\n  po_number (int, optional): The purchase order number component of the reference.\n  detail_number (int, optional): The detail number component of the reference.\n\nReturns:\n  list: A list of spend money transaction dictionaries that match the constructed reference,\n        excluding those marked as VOIDED.",
                        "returns": null
                    },
                    {
                        "name": "create_spend_money_in_batch",
                        "args": [
                            "self",
                            "session",
                            "detail_item_ids"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "upsert_contacts_batch",
                        "args": [
                            "self",
                            "contacts"
                        ],
                        "decorators": [],
                        "calls": [
                            "_retry_on_unauthorized"
                        ],
                        "docstring": "Attempts to upsert a batch of contacts in Xero (update if xero_id present,\notherwise create). Before creating new contacts, checks Xero for any\nexisting contacts by name and avoids double creation for those found.",
                        "returns": null
                    },
                    {
                        "name": "format_spend_money_bulk",
                        "args": [
                            "self",
                            "spend_money"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Formats a list of spend money dicts into the exact format for the Xero APIto create spend money items",
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "xero_api",
                "value": "XeroAPI()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_xero/__init__.py",
        "functions": [],
        "classes": [],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_xero/xero_services.py",
        "functions": [],
        "classes": [
            {
                "name": "XeroServices",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "handle_spend_money_create_bulk",
                        "args": [
                            "self",
                            "spend_money_items",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_spend_money",
                            "search_spend_money",
                            "update_spend_money_bulk",
                            "create_spend_money_bulk"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "handle_spend_money_create",
                        "args": [
                            "self",
                            "spend_money_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_spend_money",
                            "create_spend_money_via_detail_id",
                            "search_spend_money",
                            "create_spend_money_in_xero"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "handle_spend_money_update",
                        "args": [
                            "self",
                            "spend_money_id",
                            "new_state"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_spend_money",
                            "search_spend_money",
                            "update_spend_transaction_status",
                            "handle_spend_money_create"
                        ],
                        "docstring": "Example method that tries to update an existing Xero SPEND transaction\nto a new status (e.g., 'AUTHORISED', 'VOIDED', or 'RECONCILED').",
                        "returns": null
                    },
                    {
                        "name": "create_xero_bills_in_xero_bulk",
                        "args": [
                            "self",
                            "new_bills",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_xero_bill",
                            "create_contact",
                            "search_contacts",
                            "create_invoice_bulk",
                            "search_xero_bill_line_items",
                            "search_purchase_order_by_keys"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_xero_bill_in_xero",
                        "args": [
                            "self",
                            "xero_bill"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_invoice",
                            "update_xero_bill",
                            "search_contacts",
                            "search_purchase_orders",
                            "get_bills_by_reference"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_xero_bill",
                        "args": [
                            "self",
                            "bill_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_xero_bill_in_xero",
                            "search_xero_bill_line_items",
                            "update_detail_item",
                            "search_detail_item_by_keys",
                            "update_invoice",
                            "search_xero_bills"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_xero_bill",
                        "args": [
                            "self",
                            "bill_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "delete_invoice",
                            "search_xero_bills"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "load_spend_money_transactions",
                        "args": [
                            "self",
                            "project_id",
                            "po_number",
                            "detail_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_spend_money",
                            "spend_money_has_changes",
                            "search_spend_money_by_keys",
                            "create_contact",
                            "search_contacts",
                            "get_spend_money_by_reference",
                            "search_spend_money",
                            "create_spend_money"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "populate_xero_contacts",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_all_contacts",
                            "update_contact",
                            "search_contacts"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "validate_xero_data",
                        "args": [
                            "self",
                            "db_contact"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "buffered_upsert_contact",
                        "args": [
                            "self",
                            "contact_record"
                        ],
                        "decorators": [],
                        "calls": [
                            "validate_xero_data"
                        ],
                        "docstring": "Stage a single local 'contact_record' for eventual batch upsert in Xero.\nWe'll do the actual creation/update in 'execute_batch_upsert_contacts'\nto minimize repeated calls.",
                        "returns": null
                    },
                    {
                        "name": "execute_batch_upsert_contacts",
                        "args": [
                            "self",
                            "contacts",
                            "chunk_size"
                        ],
                        "decorators": [],
                        "calls": [
                            "process_chunk"
                        ],
                        "docstring": "Executes a batched 'upsert' (create or update) of contacts in Xero.\n- Splits into create vs. update lists\n- Optionally processes in chunks if lists are large\n- Logs success/failure counts",
                        "returns": "None"
                    },
                    {
                        "name": "_convert_contact_to_xero_schema",
                        "args": [
                            "self",
                            "db_contact"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "For new contacts (no xero_id): We supply a non-empty Name + a unique AccountNumber\nFor existing contacts (has xero_id): We omit Name + AccountNumber so we don't collide or rename.",
                        "returns": "dict"
                    },
                    {
                        "name": "process_chunk",
                        "args": [
                            "self",
                            "mode",
                            "data_chunk"
                        ],
                        "decorators": [],
                        "calls": [
                            "_convert_contact_to_xero_schema",
                            "_retry_on_unauthorized"
                        ],
                        "docstring": "mode='create' => xero.contacts.put(...) (requires Name, unique AccountNumber)\nmode='update' => xero.contacts.save(...) partial update, skipping Name + AccountNumber",
                        "returns": "int"
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "xero_services",
                "value": "XeroServices()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_budget/budget_service.py",
        "functions": [],
        "classes": [
            {
                "name": "BudgetService",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "process_contact_aggregator",
                        "args": [
                            "self",
                            "contacts_data",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_contact",
                            "search_contacts",
                            "find_contact_close_match",
                            "execute_batch_upsert_contacts",
                            "buffered_upsert_contact"
                        ],
                        "docstring": "Aggregator for CONTACTS with:\n  - Single commit at the end, using the session passed in.",
                        "returns": null
                    },
                    {
                        "name": "process_aggregator_pos",
                        "args": [
                            "self",
                            "po_data",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "buffered_upsert_po",
                            "search_purchase_order_by_keys",
                            "execute_batch_upsert_pos",
                            "search_contacts",
                            "search_projects",
                            "find_contact_close_match",
                            "purchase_order_has_changes",
                            "update_purchase_order",
                            "create_purchase_order_by_keys",
                            "create_project"
                        ],
                        "docstring": "Aggregator for PURCHASE ORDERS, single commit at the end.",
                        "returns": null
                    },
                    {
                        "name": "process_aggregator_detail_items",
                        "args": [
                            "self",
                            "po_log_data",
                            "session",
                            "chunk_size"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_tax_code_from_account_code",
                            "bulk_create_xero_bill_line_items",
                            "batch_search_detail_items_by_keys",
                            "handle_spend_money_create_bulk",
                            "create_xero_bill_by_keys",
                            "chunk_list",
                            "batch_search_invoices_by_keys",
                            "execute_batch_upsert_detail_items",
                            "bulk_update_detail_items",
                            "bulk_create_detail_items",
                            "bulk_create_spend_money",
                            "update_detail_item",
                            "buffered_upsert_detail_item",
                            "batch_search_receipts_by_keys",
                            "search_purchase_order_by_keys",
                            "create_xero_bills_in_xero_bulk"
                        ],
                        "docstring": "Aggregator for DETAIL ITEMS, with minimal DB queries and in-memory logic.\nStill commits once at the end (assuming `session` is managed externally).\n\nThis version ensures `detail_number` and `line_number` are cast to int,\nso we don't mistakenly create duplicates instead of updates.",
                        "returns": null
                    },
                    {
                        "name": "is_aggregator_in_progress",
                        "args": [
                            "self",
                            "record"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_po_logs"
                        ],
                        "docstring": "Determine if aggregator is still 'STARTED' for the project_number\nassociated with this record. If so => partial skip logic in triggers.\n\n:param record: Typically a PO or DetailItem dict with 'project_number'.\n:return: True if aggregator=STARTED, else False",
                        "returns": "bool"
                    },
                    {
                        "name": "is_aggregator_done",
                        "args": [
                            "self",
                            "record"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_po_logs"
                        ],
                        "docstring": "Optional method if you want to specifically confirm aggregator=COMPLETED.\n:param record: the DB record (PO, detail item, etc.)\n:return: True if aggregator found with status=COMPLETED, else False",
                        "returns": "bool"
                    },
                    {
                        "name": "set_invoice_details_rtp",
                        "args": [
                            "self",
                            "detail_item",
                            "buffer"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_detail_item"
                        ],
                        "docstring": "Marks all detail items (from the provided buffer) for the same invoice as 'RTP'.\nTypically used after sum_detail_items_and_compare_invoice returns True.",
                        "returns": null
                    },
                    {
                        "name": "sum_detail_items_and_compare_invoice",
                        "args": [
                            "self",
                            "detail_item",
                            "buffer",
                            "session"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_invoice_by_keys"
                        ],
                        "docstring": "Gathers all detail items matching (proj, po, detail_number),\nsums their sub_total, then compares with the matching invoice total in DB.\nReturns True if they match within threshold, else False.\nNow it always uses the aggregator's session.",
                        "returns": "bool"
                    },
                    {
                        "name": "check_siblings_all_rtp",
                        "args": [
                            "self",
                            "detail_item",
                            "buffer"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Returns True if all detail items in 'buffer' for the same invoice are in state='RTP'.",
                        "returns": "bool"
                    },
                    {
                        "name": "update_xero_bill_dates_from_detail_item",
                        "args": [
                            "self",
                            "xero_bill"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_xero_bill",
                            "search_detail_item_by_keys"
                        ],
                        "docstring": "Update the parent XeroBill's transaction_date => earliest among all detail items,\nand due_date => latest among them. If aggregator=STARTED, you might skip or do partial.\n\n:param xero_bill: dict with project_number, po_number, detail_number, etc.",
                        "returns": null
                    },
                    {
                        "name": "parse_po_log_data",
                        "args": [
                            "self",
                            "po_log"
                        ],
                        "decorators": [],
                        "calls": [
                            "download_file_from_dropbox",
                            "extract_data_from_po_log"
                        ],
                        "docstring": null,
                        "returns": "list[Any] | dict[str, Any]"
                    },
                    {
                        "name": "chunk_list",
                        "args": [
                            "self",
                            "items",
                            "chunk_size"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Generator that yields successive `chunk_size`-sized chunks\nfrom the given list.",
                        "returns": null
                    },
                    {
                        "name": "get_tax_code_from_account_code",
                        "args": [
                            "self",
                            "account_code"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_account_codes",
                            "search_tax_accounts"
                        ],
                        "docstring": "Helper method that looks up the tax code for a given account code by referencing\nthe AccountCode and TaxAccount tables in the database.\n\nArgs:\n    account_code (str): The account code to look up.\n\nReturns:\n    str: The matching tax code if found; otherwise, returns 0",
                        "returns": "int"
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "budget_service",
                "value": "BudgetService()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_budget/__init__.py",
        "functions": [],
        "classes": [],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_budget/showbiz_log_printer.py",
        "functions": [
            {
                "name": "retry_on_failure",
                "args": [
                    "action_func",
                    "action_description",
                    "retries",
                    "delay",
                    "fallback_func"
                ],
                "decorators": [],
                "calls": [],
                "docstring": "\ud83c\udf00 Generic retry wrapper: Tries the given action_func multiple times.\n- If the action fails, waits 'delay' seconds and tries again.\n- If all attempts fail, runs fallback_func (if provided).\n- Returns the result of action_func if it succeeds, else None.\n\n:param action_func: A callable that performs the action. Should raise Exception on failure.\n:param action_description: A string describing the action for logging.\n:param retries: Number of times to retry.\n:param delay: Delay in seconds between retries.\n:param fallback_func: A function to call if all retries fail.\n:return: The result of action_func on success, else None.",
                "returns": null
            },
            {
                "name": "bring_app_to_front",
                "args": [
                    "app_name"
                ],
                "decorators": [],
                "calls": [],
                "docstring": "\ud83e\ude9f Brings the specified application to the front using NSWorkspace.\nRaises an exception if the application is not found.",
                "returns": null
            },
            {
                "name": "worker",
                "args": [],
                "decorators": [],
                "calls": [
                    "run"
                ],
                "docstring": "\ud83c\udfa1 Background worker thread that processes jobs from the job_queue.",
                "returns": null
            },
            {
                "name": "enqueue_job",
                "args": [],
                "decorators": [
                    "app.route('/enqueue')"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "get_status",
                "args": [
                    "job_id"
                ],
                "decorators": [
                    "app.route('/status/<job_id>')"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            }
        ],
        "classes": [
            {
                "name": "ShowbizPoLogPrinter",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self",
                            "project_number",
                            "file_path",
                            "progress_callback",
                            "upload_only"
                        ],
                        "decorators": [],
                        "calls": [
                            "setup_images"
                        ],
                        "docstring": "\ud83d\udcbb Constructor:\nInitializes the printer with the given project_number and file_path.\n\n:param project_number: A string representing the project ID.\n:param file_path: The full path to the budget file.\n:param progress_callback: A callback function for reporting progress.\n:param upload_only: Boolean indicating if we only want to upload a previously generated PO log.",
                        "returns": null
                    },
                    {
                        "name": "setup_images",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83d\uddbc\ufe0f Setup and define all image paths for buttons, checkboxes, and other UI elements.",
                        "returns": null
                    },
                    {
                        "name": "report_progress",
                        "args": [
                            "self",
                            "message"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83d\udcac Report progress: Logs and optionally calls the progress callback.",
                        "returns": null
                    },
                    {
                        "name": "adjust_coordinates_for_retina",
                        "args": [
                            "self",
                            "x",
                            "y"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "is_program_running",
                        "args": [
                            "self",
                            "program_name"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83c\udfc3 Checks if the given program is running.",
                        "returns": null
                    },
                    {
                        "name": "open_file",
                        "args": [
                            "self",
                            "file_path"
                        ],
                        "decorators": [],
                        "calls": [
                            "run"
                        ],
                        "docstring": "\ud83d\udcc2 Opens the specified file using the 'open' command.",
                        "returns": null
                    },
                    {
                        "name": "bring_to_front",
                        "args": [
                            "self",
                            "app_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "bring_app_to_front",
                            "retry_on_failure"
                        ],
                        "docstring": "\ud83d\udcbb Brings the specified application to the front.\nUses retry logic in case of delays.",
                        "returns": null
                    },
                    {
                        "name": "is_file_open_by_window_title",
                        "args": [
                            "self",
                            "file_name",
                            "retries",
                            "delay"
                        ],
                        "decorators": [],
                        "calls": [
                            "run",
                            "bring_to_front"
                        ],
                        "docstring": "\ud83d\udd0e Checks if a window containing file_name is open in Showbiz.\nUses AppleScript and retries.",
                        "returns": null
                    },
                    {
                        "name": "send_keystroke",
                        "args": [
                            "self",
                            "command",
                            "modifier"
                        ],
                        "decorators": [],
                        "calls": [
                            "run"
                        ],
                        "docstring": "\u2328\ufe0f Sends a keystroke command to the system.",
                        "returns": null
                    },
                    {
                        "name": "click_button",
                        "args": [
                            "self",
                            "image_path",
                            "confidence"
                        ],
                        "decorators": [],
                        "calls": [
                            "adjust_coordinates_for_retina"
                        ],
                        "docstring": "\ud83d\uddb1\ufe0f Clicks a button identified by image_path on screen using pyautogui.",
                        "returns": null
                    },
                    {
                        "name": "type_in_field",
                        "args": [
                            "self",
                            "text"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83d\udcdd Types the given text into the currently active field.",
                        "returns": null
                    },
                    {
                        "name": "press_enter",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "click_detail_reports_button",
                        "args": [
                            "self",
                            "image_path"
                        ],
                        "decorators": [],
                        "calls": [
                            "retry_on_failure",
                            "adjust_coordinates_for_retina"
                        ],
                        "docstring": "\ud83d\udcdd Clicks the 'Detail Reports' button.",
                        "returns": null
                    },
                    {
                        "name": "ensure_checkbox_state",
                        "args": [
                            "self",
                            "checkbox_name",
                            "checked_image_path",
                            "unchecked_image_path",
                            "desired_state",
                            "retry"
                        ],
                        "decorators": [],
                        "calls": [
                            "adjust_coordinates_for_retina"
                        ],
                        "docstring": "\u2705 Ensures a checkbox is in the desired state (checked or unchecked).\nRetries a few times before giving up.",
                        "returns": null
                    },
                    {
                        "name": "ensure_all_settings",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "ensure_checkbox_state"
                        ],
                        "docstring": "\u2705 Ensures all desired checkboxes are in the correct state.\nUses the logic:\n  - Invoice, Time Card, Check, Petty Cash, Credit Card, Projection, EFT, Show Inactive Items = checked\n  - Non-Detail = unchecked",
                        "returns": null
                    },
                    {
                        "name": "close_preview",
                        "args": [
                            "self",
                            "temp_x",
                            "temp_y"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "ensure_no_subtotal",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "adjust_coordinates_for_retina",
                            "press_enter"
                        ],
                        "docstring": "\ud83d\udcca Ensures 'Don't Subtotal' is selected.\nIf not selectable, logs an error but continues.",
                        "returns": null
                    },
                    {
                        "name": "set_phase_to_actual",
                        "args": [
                            "self",
                            "other_reports_position"
                        ],
                        "decorators": [],
                        "calls": [
                            "type_in_field",
                            "press_enter"
                        ],
                        "docstring": "\ud83c\udfac Sets the phase to Actual by simulating UI interactions.",
                        "returns": null
                    },
                    {
                        "name": "retry_set_phase_to_actual",
                        "args": [
                            "self",
                            "other_reports_position",
                            "retries"
                        ],
                        "decorators": [],
                        "calls": [
                            "close_budget",
                            "click_detail_reports_button",
                            "report_progress",
                            "set_phase_to_actual",
                            "send_keystroke",
                            "open_file"
                        ],
                        "docstring": "\ud83d\udd04 Attempts to set the phase to Actual multiple times.\nIf it fails, it will close and reopen the budget file and try again.",
                        "returns": null
                    },
                    {
                        "name": "get_po_log_file_link",
                        "args": [
                            "self",
                            "filename"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83d\udd17 Returns a file URI for the given PO log filename on the user's Desktop.",
                        "returns": null
                    },
                    {
                        "name": "find_latest_po_log_file",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "report_progress"
                        ],
                        "docstring": "\ud83d\udd0d Finds the latest PO_LOG_*.txt file from ~/Desktop/PO_LOGS.",
                        "returns": null
                    },
                    {
                        "name": "extract_top_level_folder",
                        "args": [
                            "self",
                            "file_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83c\udf9b\ufe0f Extracts the top-level folder name from the given file_path.",
                        "returns": null
                    },
                    {
                        "name": "upload_po_log",
                        "args": [
                            "self",
                            "local_path",
                            "project_folder_name"
                        ],
                        "decorators": [],
                        "calls": [
                            "report_progress",
                            "upload_file"
                        ],
                        "docstring": "\u23eb Uploads the PO log file to Dropbox under the correct project folder.",
                        "returns": null
                    },
                    {
                        "name": "click_button_with_retry_and_reopen",
                        "args": [
                            "self",
                            "image_path",
                            "retries",
                            "delay"
                        ],
                        "decorators": [],
                        "calls": [
                            "report_progress",
                            "open_file",
                            "close_budget",
                            "click_button"
                        ],
                        "docstring": "\u23f3 Attempts to click a button multiple times. If it fails, closes the budget and reopens.",
                        "returns": null
                    },
                    {
                        "name": "close_budget",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83d\udd12 Closes the Showbiz Budgeting application by terminating its process.\nEnsures a clean state for the next run.",
                        "returns": null
                    },
                    {
                        "name": "run",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "retry_set_phase_to_actual",
                            "retry_on_failure",
                            "get_po_log_file_link",
                            "type_in_field",
                            "close_budget",
                            "click_button",
                            "close_preview",
                            "report_progress",
                            "click_detail_reports_button",
                            "ensure_no_subtotal",
                            "upload_po_log",
                            "is_program_running",
                            "send_keystroke",
                            "ensure_all_settings",
                            "open_file",
                            "press_enter"
                        ],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "logger",
                "value": "logging.getLogger('admin_logger')"
            },
            {
                "name": "RUN_FROM_LOCAL",
                "value": "False"
            },
            {
                "name": "UPLOAD_ONLY",
                "value": "False"
            },
            {
                "name": "job_queue",
                "value": "queue.Queue()"
            },
            {
                "name": "job_statuses",
                "value": "{}"
            },
            {
                "name": "app",
                "value": "Flask(__name__)"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_budget/po_log_processor.py",
        "functions": [],
        "classes": [
            {
                "name": "POLogProcessor",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "_extract_project_number",
                        "args": [
                            "self",
                            "file_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_map_payment_type",
                        "args": [
                            "self",
                            "raw_type"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "_determine_status_and_due_date",
                        "args": [
                            "self",
                            "pay_id",
                            "payment_type",
                            "transaction_date"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Determines the status and due_date based on the rules:\n  - If status = \"PAID\" and payment type = CC or PC => status=PAID,  due_date=transaction_date\n  - If status = \"RTP\"  and payment type = INV     => status=RTP,   due_date=current_date\n  - If status = \"NET0\" and payment type = INV     => status=RTP,   due_date=transaction_date\n  - If status = \"NET(some number)\" and payment type = INV\n         => status=RTP, due_date=transaction_date + that number of days\n  - If status = \"PAID\" and payment type = INV     => status=PAID,  due_date=current_date\n  - If none of the above and payment type = INV   => status=PENDING, due_date=transaction_date + 30 days\n  - Otherwise, default to status=PENDING, due_date=transaction_date",
                        "returns": "(str, datetime)"
                    },
                    {
                        "name": "_parse_date",
                        "args": [
                            "self",
                            "date_str"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "datetime"
                    },
                    {
                        "name": "_clean_numeric",
                        "args": [
                            "self",
                            "num_str"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": "float"
                    },
                    {
                        "name": "_parse_factors",
                        "args": [
                            "self",
                            "factors",
                            "subtotal"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "_read_and_store_entries",
                        "args": [
                            "self",
                            "file_path",
                            "project_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "_map_payment_type",
                            "_parse_date",
                            "_determine_status_and_due_date",
                            "_clean_numeric"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "_assign_item_ids",
                        "args": [
                            "self",
                            "raw_entries",
                            "manual_ids_by_po"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Logic Changes:\n1) Retain PC logic (petty cash). If item_id_raw is missing for PC, we set line_number=1.\n2) For non-PC:\n   - If item_id_raw is empty -> detail_item_id=\"1\"\n   - If item_id_raw is present -> detail_item_id=<parsed numeric>\n   - We **auto-increment** line_number for each repeated (po_number, detail_item_id).",
                        "returns": null
                    },
                    {
                        "name": "parse_showbiz_po_log",
                        "args": [
                            "self",
                            "file_path"
                        ],
                        "decorators": [],
                        "calls": [
                            "_extract_project_number",
                            "_read_and_store_entries",
                            "_assign_item_ids",
                            "_parse_factors"
                        ],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "po_log_processor",
                "value": "POLogProcessor()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_budget/po_log_database_util.py",
        "functions": [],
        "classes": [
            {
                "name": "PoLogDatabaseUtil",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_contact_surrogate_ids",
                        "args": [
                            "self",
                            "contacts_list"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_contacts"
                        ],
                        "docstring": "\ud83d\uddc2 Example usage showing searching the Contact model with DatabaseOperations.",
                        "returns": null
                    },
                    {
                        "name": "link_contact_to_po",
                        "args": [
                            "self",
                            "contacts",
                            "project_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83d\udd17 Example method to show linking logic. This might now be replaced by\ndirect usage of create/update from DatabaseOperations if you prefer.",
                        "returns": null
                    },
                    {
                        "name": "find_or_create_contact_item_in_db",
                        "args": [
                            "self",
                            "item"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_contact",
                            "create_contact",
                            "search_contacts"
                        ],
                        "docstring": "\ud83c\udfd7 Example wrapper around db_ops for contact creation.",
                        "returns": null
                    },
                    {
                        "name": "create_or_update_main_item_in_db",
                        "args": [
                            "self",
                            "item"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_purchase_order",
                            "search_purchase_orders",
                            "update_purchase_order"
                        ],
                        "docstring": "\ud83c\udfd7 Create or update a PurchaseOrder.",
                        "returns": null
                    },
                    {
                        "name": "create_or_update_sub_item_in_db",
                        "args": [
                            "self",
                            "sub_item"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_detail_items",
                            "update_detail_item",
                            "create_detail_item"
                        ],
                        "docstring": "\ud83c\udfd7 Create or update a DetailItem.",
                        "returns": null
                    },
                    {
                        "name": "get_contact_by_name",
                        "args": [
                            "self",
                            "name"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_contacts"
                        ],
                        "docstring": "\ud83d\uddc2 Simplified retrieval via db_ops.search_contacts",
                        "returns": null
                    },
                    {
                        "name": "get_subitems",
                        "args": [
                            "self",
                            "project_id",
                            "po_number",
                            "detail_number",
                            "line_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_detail_items"
                        ],
                        "docstring": "\ud83d\udcda Example retrieval using db_ops.search_detail_items with possible filters.",
                        "returns": null
                    },
                    {
                        "name": "get_purchase_orders",
                        "args": [
                            "self",
                            "project_id",
                            "po_number",
                            "po_type"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_purchase_orders"
                        ],
                        "docstring": "Retrieve POs with optional filters. For example, pass in po_type=\"INV\".",
                        "returns": null
                    },
                    {
                        "name": "update_po_folder_link",
                        "args": [
                            "self",
                            "project_id",
                            "po_number",
                            "folder_link"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_purchase_orders",
                            "update_purchase_order"
                        ],
                        "docstring": "\ud83d\uddc4 Example: find the PO and update the folder_link",
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "po_log_database_util",
                "value": "PoLogDatabaseUtil()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_dropbox/dropbox_webhook_handler.py",
        "functions": [
            {
                "name": "dropbox_webhook",
                "args": [],
                "decorators": [
                    "dropbox_blueprint.route('/')"
                ],
                "calls": [
                    "handle_dropbox_event"
                ],
                "docstring": null,
                "returns": null
            }
        ],
        "classes": [
            {
                "name": "DropboxWebhookHandler",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "handle_dropbox_event",
                        "args": [
                            "self",
                            "event"
                        ],
                        "decorators": [],
                        "calls": [
                            "process_event_data"
                        ],
                        "docstring": "Handle incoming Dropbox webhook event.",
                        "returns": null
                    },
                    {
                        "name": "process_event_data",
                        "args": [
                            "self",
                            "event_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "determine_file_type",
                            "save_cursor",
                            "load_cursor",
                            "list_root_folder",
                            "list_folder_changes"
                        ],
                        "docstring": "Processes the event data received from Dropbox webhook.\nFetches the latest changes since the last cursor,\ncategorizes them by folder/file and event type (added, deleted),\nlogs the changes, and ensures duplicate events with the same cursor are ignored.",
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "logger",
                "value": "logging.getLogger('dropbox')"
            },
            {
                "name": "dropbox_blueprint",
                "value": "Blueprint('files_dropbox', __name__)"
            },
            {
                "name": "dropbox_webhook_handler",
                "value": "DropboxWebhookHandler()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_dropbox/dropbox_service.py",
        "functions": [],
        "classes": [
            {
                "name": "DropboxService",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Initializes the DropboxService singleton, setting up logging, external\nAPIs, and the new DatabaseOperations object for DB interactions.",
                        "returns": null
                    },
                    {
                        "name": "determine_file_type",
                        "args": [
                            "self",
                            "path"
                        ],
                        "decorators": [],
                        "calls": [
                            "process_tax_form",
                            "process_receipt",
                            "get_last_path_component_generic",
                            "process_budget",
                            "po_log_orchestrator",
                            "process_invoice"
                        ],
                        "docstring": "Determine the file type by matching patterns in its name,\nthen route the file to the appropriate process_* handler.",
                        "returns": null
                    },
                    {
                        "name": "po_log_orchestrator",
                        "args": [
                            "self",
                            "path"
                        ],
                        "decorators": [],
                        "calls": [
                            "download_file_from_dropbox",
                            "add_po_data_to_db",
                            "extract_data_from_po_log",
                            "extract_project_number",
                            "create_po_log"
                        ],
                        "docstring": "Process a PO log file from Dropbox, parse it, then store the results in the DB.\nIncludes adding Contacts, PurchaseOrders, and DetailItems.",
                        "returns": null
                    },
                    {
                        "name": "extract_data_from_po_log",
                        "args": [
                            "self",
                            "temp_file_path",
                            "project_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "parse_showbiz_po_log"
                        ],
                        "docstring": "Parse the local PO log file to extract main_items, detail_items, and contacts.",
                        "returns": null
                    },
                    {
                        "name": "add_po_data_to_db",
                        "args": [
                            "self",
                            "main_items",
                            "detail_items",
                            "contacts",
                            "project_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_detail_items",
                            "_find_or_create_contact_in_db",
                            "search_contacts",
                            "create_detail_item_by_keys",
                            "search_purchase_orders",
                            "update_purchase_order_by_keys",
                            "create_purchase_order_by_keys",
                            "update_detail_item_by_keys"
                        ],
                        "docstring": "\ud83d\ude80 DB Processing Method\n----------------------\n*New Batch Logic*:\n1) Convert project_number to int.\n2) Fetch existing POs for that project_number in one shot.\n3) For each main_item, decide if it's new or existing in DB; update or create.\n4) Fetch all existing DetailItems for that project_number.\n5) For each detail_item, decide if new or existing; link to DB.\n6) Link contact if needed (fuzzy or direct create).",
                        "returns": null
                    },
                    {
                        "name": "process_budget",
                        "args": [
                            "self",
                            "dropbox_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Handle .mbb (Showbiz) budgets from Dropbox.\n(Original logic remains here.)",
                        "returns": null
                    },
                    {
                        "name": "process_invoice",
                        "args": [
                            "self",
                            "dropbox_path"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_invoice",
                            "extract_info_with_openai",
                            "get_file_link",
                            "download_file_from_dropbox",
                            "cleanup_temp_file",
                            "search_invoice_by_keys",
                            "extract_text",
                            "update_invoice"
                        ],
                        "docstring": "Insert or update an 'invoice' record in the DB (plus a share link).\nOther logic (detail item linking, sum checks, etc.) is handled by triggers.",
                        "returns": null
                    },
                    {
                        "name": "process_tax_form",
                        "args": [
                            "self",
                            "dropbox_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Stub function for processing a tax form from Dropbox.",
                        "returns": null
                    },
                    {
                        "name": "process_receipt",
                        "args": [
                            "self",
                            "dropbox_path"
                        ],
                        "decorators": [],
                        "calls": [
                            "extract_receipt_info_with_openai",
                            "get_file_link",
                            "_extract_text_from_pdf_with_ocr",
                            "download_file_from_dropbox",
                            "cleanup_temp_file",
                            "update_detail_item_by_keys",
                            "_extract_text_from_pdf",
                            "_extract_text_via_ocr",
                            "create_receipt",
                            "search_detail_item_by_keys",
                            "update_receipt_by_keys",
                            "search_receipts"
                        ],
                        "docstring": "\ud83e\uddfe process_receipt\n-----------------\n1) Parse file name (project_number, po_number, detail_number, vendor_name).\n2) Download the receipt file from Dropbox.\n3) If PDF, try text extraction via PyPDF2. If that fails (or not a PDF), do OCR.\n4) Use OCRService's 'extract_receipt_info_with_openai' to parse total, date, description.\n5) Generate file link in Dropbox.\n6) Create or update the 'receipt' table, linking to the appropriate detail item.\n7) Update the corresponding subitem in Monday with the link.\n8) After creation/update, link `receipt_id` to the relevant detail item.",
                        "returns": null
                    },
                    {
                        "name": "find_or_create_vendor_contact",
                        "args": [
                            "self",
                            "po_record"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_contact",
                            "find_contact_close_match",
                            "search_contacts"
                        ],
                        "docstring": "If the PO record has no contact_id or vendor_name, attempt to find\nan existing contact by vendor_name. If none found, create one.\nReturns contact_id or None.",
                        "returns": null
                    },
                    {
                        "name": "_find_or_create_contact_in_db",
                        "args": [
                            "self",
                            "vendor_name",
                            "all_db_contacts"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_contact",
                            "find_contact_close_match"
                        ],
                        "docstring": "Helper method to do a quick fuzzy search for an existing contact,\nor create a new contact if no match. Returns contact_id or None.",
                        "returns": "Optional[int]"
                    },
                    {
                        "name": "match_receipt_for_detail",
                        "args": [
                            "self",
                            "detail_item"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_receipt_by_keys"
                        ],
                        "docstring": "Attempt to match a receipt in DB to see if there's a total matching detail_item['sub_total'].\nReturn a dict like {'total': float, 'path': str} if found, else None.",
                        "returns": null
                    },
                    {
                        "name": "find_po_folder_link",
                        "args": [
                            "self",
                            "po_record"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Check Dropbox for a folder associated with this PO, e.g. by project_number + po_number.\nReturn a shareable link or None if not found.",
                        "returns": null
                    },
                    {
                        "name": "download_file_from_dropbox",
                        "args": [
                            "self",
                            "path",
                            "temp_file_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Download a file from Dropbox to a local temp_file_path.",
                        "returns": "bool"
                    },
                    {
                        "name": "cleanup_temp_file",
                        "args": [
                            "self",
                            "temp_file_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Attempt to remove a temporary file.",
                        "returns": null
                    },
                    {
                        "name": "extract_project_number",
                        "args": [
                            "self",
                            "file_name"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Extract the first 4-digit sequence from a file name\nto interpret as the project number.",
                        "returns": "str"
                    },
                    {
                        "name": "_extract_text_from_pdf",
                        "args": [
                            "self",
                            "file_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "_extract_text_via_ocr",
                            "extract_text"
                        ],
                        "docstring": "Attempt direct text extraction with PyPDF2, then fallback to PyMuPDF-based\nimage extraction if minimal text is found.",
                        "returns": "str"
                    },
                    {
                        "name": "_extract_text_from_pdf_with_ocr",
                        "args": [
                            "self",
                            "file_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "_extract_text_via_ocr"
                        ],
                        "docstring": "A direct OCR approach if PyPDF2 text extraction yields nothing.\nReuses _extract_text_via_ocr for convenience.",
                        "returns": "str"
                    },
                    {
                        "name": "_extract_text_via_ocr",
                        "args": [
                            "self",
                            "file_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "extract_text_from_receipt"
                        ],
                        "docstring": "Use the OCRService to extract text from the provided file data.",
                        "returns": "str"
                    },
                    {
                        "name": "folder_tax_conact_trigger",
                        "args": [
                            "self",
                            "fut"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_po_tax_form_links",
                            "create_pos_in_monday",
                            "update_po_folder_link"
                        ],
                        "docstring": "Callback for DB process completion. Possibly triggers Monday or Dropbox tasks next.",
                        "returns": null
                    },
                    {
                        "name": "update_po_folder_link",
                        "args": [
                            "self",
                            "project_number",
                            "po_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_purchase_order_by_keys",
                            "get_project_po_folders_with_link",
                            "update_purchase_order"
                        ],
                        "docstring": "Check and update the dropbox folder references for the specified PO.",
                        "returns": null
                    },
                    {
                        "name": "update_po_tax_form_links",
                        "args": [
                            "self",
                            "project_number",
                            "po_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_purchase_order_by_keys",
                            "update_contact",
                            "get_po_tax_form_link"
                        ],
                        "docstring": "Update or set the tax_form_link for a PurchaseOrder in Dropbox if needed.",
                        "returns": null
                    },
                    {
                        "name": "create_pos_in_monday",
                        "args": [
                            "self",
                            "project_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_account_codes",
                            "batch_create_or_update_items",
                            "get_subitems_in_board",
                            "search_purchase_order_by_keys",
                            "is_sub_item_different",
                            "po_column_values_formatter",
                            "_batch_update_subitems",
                            "update_purchase_order_by_keys",
                            "update_purchase_order",
                            "extract_subitem_identifiers",
                            "search_receipts",
                            "search_contacts",
                            "search_detail_item_by_keys",
                            "_batch_create_subitems",
                            "update_detail_item_by_keys",
                            "is_main_item_different",
                            "get_items_in_project",
                            "search_invoices",
                            "subitem_column_values_formatter"
                        ],
                        "docstring": "Demonstrates how to fetch all subitems once from Monday,\nthen process them locally to avoid multiple queries.",
                        "returns": null
                    },
                    {
                        "name": "_batch_create_subitems",
                        "args": [
                            "self",
                            "subitems_to_create",
                            "parent_item_id",
                            "project_number",
                            "db_item"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_detail_item_by_keys"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "_batch_update_subitems",
                        "args": [
                            "self",
                            "subitems_to_update",
                            "parent_item_id",
                            "project_number",
                            "db_item"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_detail_item_by_keys"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "scan_project_receipts",
                        "args": [
                            "self",
                            "project_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "_scan_and_process_receipts_in_folder",
                            "find_project_folder"
                        ],
                        "docstring": "Scans credit-card/vendor receipt folders (1. Purchase Orders) and\npetty-cash receipt folders (3. Petty Cash/1. Crew PC Folders) for the project.",
                        "returns": null
                    },
                    {
                        "name": "_scan_and_process_receipts_in_folder",
                        "args": [
                            "self",
                            "folder_path",
                            "project_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "process_receipt",
                            "_list_folder_recursive"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "_list_folder_recursive",
                        "args": [
                            "self",
                            "folder_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "_scan_po_folder_for_invoices",
                        "args": [
                            "self",
                            "folder_path",
                            "project_number",
                            "folder_po_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "process_invoice",
                            "_list_folder_recursive"
                        ],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "logger",
                "value": "logging.getLogger('dropbox')"
            },
            {
                "name": "dropbox_service",
                "value": "DropboxService()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_dropbox/__init__.py",
        "functions": [],
        "classes": [],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_dropbox/dropbox_util.py",
        "functions": [],
        "classes": [
            {
                "name": "DropboxUtil",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "parse_file_name",
                        "args": [
                            "self",
                            "file_name"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Parse the file name to extract metadata.",
                        "returns": "Dict[str, str]"
                    },
                    {
                        "name": "is_po_folder",
                        "args": [
                            "self",
                            "local_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Determines if the specified folder path is a valid PO folder within the correct project structure.\n\nExpected structure:\n    .../<Project Folder>/1. Purchase Orders/<PO Folder>\n\nArgs:\n    local_path (str): The path to the folder or file to check.\n\nReturns:\n    bool: True if the folder is a PO folder within the correct project structure, False otherwise.",
                        "returns": null
                    },
                    {
                        "name": "parse_folder_path",
                        "args": [
                            "self",
                            "local_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Parses the folder path to extract the Project ID, PO Number, Vendor Name,\nand PO Type (vendor or cc).\n\nExpected folder structure: .../2024/Project Folder/Purchase Order Folder/...\nExample: '/Users/.../2024/2416 - Whop Keynote/1. Purchase Orders/2416_02 AMEX 8738/\n\nReturns:\n    Tuple (project_id, po_number, vendor_name, po_type) if found, else (None, None, None, None)",
                        "returns": null
                    },
                    {
                        "name": "parse_filename",
                        "args": [
                            "self",
                            "filename"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Parses the filename to extract project_id, po_number, receipt_number (optional), vendor_name, file_type, and invoice_number.\nExpected filename formats:\n- '2417_10 Vendor Name Invoice.pdf'\n- '2417_10 Vendor Name Invoice 3.pdf'\n- '2417_10_03 Citibank Receipt.pdf'",
                        "returns": null
                    },
                    {
                        "name": "get_parent_path",
                        "args": [
                            "self",
                            "path_display"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Extracts the parent directory path from a given Dropbox path.\n\nArgs:\n    path_display (str): The full Dropbox path to a file or folder.\n\nReturns:\n    str: The parent directory path. Returns an empty string if no parent exists.",
                        "returns": null
                    },
                    {
                        "name": "get_last_path_component_generic",
                        "args": [
                            "self",
                            "path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_file_link",
                        "args": [
                            "self",
                            "dropbox_path"
                        ],
                        "decorators": [],
                        "calls": [
                            "retrieve_existing_shared_link"
                        ],
                        "docstring": null,
                        "returns": "str"
                    },
                    {
                        "name": "retrieve_existing_shared_link",
                        "args": [
                            "self",
                            "dbx",
                            "dropbox_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Retrieve an existing shared link for the specified file.",
                        "returns": "str"
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "dropbox_util",
                "value": "DropboxUtil()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_dropbox/dropbox_database_util.py",
        "functions": [],
        "classes": [
            {
                "name": "DropboxDatabaseUtil",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "add_invoice_link_to_detail_items",
                        "args": [
                            "self",
                            "project_id",
                            "po_number",
                            "invoice_number",
                            "file_link"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_or_update_invoice",
                        "args": [
                            "self",
                            "project_id",
                            "po_number",
                            "invoice_number",
                            "transaction_date",
                            "term",
                            "total",
                            "file_link"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_detail_item_pulse_ids_for_invoice",
                        "args": [
                            "self",
                            "project_id",
                            "po_number",
                            "invoice_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session"
                        ],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "dropbox_database_util",
                "value": "DropboxDatabaseUtil()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_dropbox/dropbox_client.py",
        "functions": [],
        "classes": [
            {
                "name": "DropboxClient",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "start_token_refresher",
                            "get_access_token"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_new_access_token",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "save_access_token"
                        ],
                        "docstring": "Use the refresh token to get a new access token.",
                        "returns": null
                    },
                    {
                        "name": "save_access_token",
                        "args": [
                            "self",
                            "access_token",
                            "expires_in"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Store the access token and its expiration time.",
                        "returns": null
                    },
                    {
                        "name": "load_access_token",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Load the access token from storage.",
                        "returns": null
                    },
                    {
                        "name": "get_access_token",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "load_access_token",
                            "get_new_access_token"
                        ],
                        "docstring": "Get the valid access token, refreshing it if necessary.",
                        "returns": null
                    },
                    {
                        "name": "list_root_folder",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Lists the contents of the root folder to verify connection.",
                        "returns": null
                    },
                    {
                        "name": "list_folder_changes",
                        "args": [
                            "self",
                            "cursor"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Lists changes in the specified folder using the provided cursor.\nReturns a tuple of (changes, new_cursor).",
                        "returns": null
                    },
                    {
                        "name": "load_cursor",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_cursor_file_path"
                        ],
                        "docstring": "Load the cursor for the member.",
                        "returns": null
                    },
                    {
                        "name": "save_cursor",
                        "args": [
                            "self",
                            "cursor"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_cursor_file_path"
                        ],
                        "docstring": "Save the cursor for the member.",
                        "returns": null
                    },
                    {
                        "name": "get_cursor_file_path",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Get the file path for storing the cursor.",
                        "returns": null
                    },
                    {
                        "name": "start_token_refresher",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Starts a background thread to refresh the access token before it expires.",
                        "returns": null
                    },
                    {
                        "name": "token_refresher",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_new_access_token"
                        ],
                        "docstring": "Refreshes the access token periodically before it expires.",
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "dropbox_client",
                "value": "DropboxClient()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_dropbox/ocr_service.py",
        "functions": [],
        "classes": [
            {
                "name": "OCRService",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "extract_text_from_file",
                        "args": [
                            "self",
                            "file_data"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Extract text from a file (invoice, receipt, or W-9).",
                        "returns": "str"
                    },
                    {
                        "name": "extract_text_from_invoice",
                        "args": [
                            "self",
                            "file_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "extract_text_from_file"
                        ],
                        "docstring": "Extract text specifically from an invoice file.",
                        "returns": "str"
                    },
                    {
                        "name": "parse_invoice_details",
                        "args": [
                            "self",
                            "text_data"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Parse invoice details from extracted text.",
                        "returns": "dict"
                    },
                    {
                        "name": "extract_text_from_w9",
                        "args": [
                            "self",
                            "file_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "extract_text_from_file"
                        ],
                        "docstring": "Extract text from a W-9 form.",
                        "returns": "str"
                    },
                    {
                        "name": "parse_w9_details",
                        "args": [
                            "self",
                            "text_data"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Parse details from a W-9 form.",
                        "returns": "dict"
                    },
                    {
                        "name": "extract_text_from_receipt",
                        "args": [
                            "self",
                            "file_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "extract_text_from_file"
                        ],
                        "docstring": "Extract text from a receipt.",
                        "returns": "str"
                    },
                    {
                        "name": "parse_receipt_details",
                        "args": [
                            "self",
                            "text_data"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Parse receipt details from extracted text.",
                        "returns": "dict"
                    },
                    {
                        "name": "extract_info_with_openai",
                        "args": [
                            "self",
                            "text"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "extract_receipt_info_with_openai",
                        "args": [
                            "self",
                            "text"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "extract_text",
                        "args": [
                            "self",
                            "local_file_path"
                        ],
                        "decorators": [],
                        "calls": [
                            "extract_text"
                        ],
                        "docstring": "Extracts text from a PDF or image file using OCR or direct PDF text extraction.\n\n:param local_file_path: The local file path of the document or image.\n:return: A string containing all text extracted from the file.",
                        "returns": "str"
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "logger",
                "value": "logging.getLogger('dropbox')"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_dropbox/dropbox_api.py",
        "functions": [],
        "classes": [
            {
                "name": "DropboxAPI",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "upload_file",
                        "args": [
                            "self",
                            "file_path",
                            "destination_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Uploads a file to Dropbox.",
                        "returns": null
                    },
                    {
                        "name": "download_file",
                        "args": [
                            "self",
                            "file_path",
                            "local_destination"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Downloads a file from Dropbox.",
                        "returns": null
                    },
                    {
                        "name": "get_file_metadata",
                        "args": [
                            "self",
                            "file_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Retrieves metadata for a file.",
                        "returns": null
                    },
                    {
                        "name": "list_folder_contents",
                        "args": [
                            "self",
                            "folder_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Lists the contents of a folder.",
                        "returns": null
                    },
                    {
                        "name": "create_folder",
                        "args": [
                            "self",
                            "folder_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Creates a folder in Dropbox.",
                        "returns": null
                    },
                    {
                        "name": "delete_file_or_folder",
                        "args": [
                            "self",
                            "path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Deletes a file or folder in Dropbox.",
                        "returns": null
                    },
                    {
                        "name": "list_files_in_folder",
                        "args": [
                            "self",
                            "folder_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Lists all files under the given folder_path and returns a list of dicts\ncontaining 'file_name' and 'file_link' for each file.",
                        "returns": "list"
                    },
                    {
                        "name": "get_po_tax_form_link",
                        "args": [
                            "self",
                            "project_number",
                            "po_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "list_files_in_folder",
                            "list_project_po_folders",
                            "create_share_link",
                            "list_all_projects",
                            "find_project_folder"
                        ],
                        "docstring": "Retrieves PO folders and their shared links based on provided parameters.\n\nArgs:\n    project_number (str, optional): The ID of the project. Defaults to None.\n    po_number (str, optional): The number of the PO. Defaults to None.\n\nReturns:\n    List[Dict[str, str]]: A list of dictionaries containing 'po_folder_name',\n                            'po_folder_path', and 'po_folder_link'.",
                        "returns": "List[Dict[str, str]]"
                    },
                    {
                        "name": "get_project_po_folders_with_link",
                        "args": [
                            "self",
                            "project_number",
                            "po_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_share_link",
                            "find_project_folder",
                            "list_all_projects",
                            "list_project_po_folders"
                        ],
                        "docstring": "Retrieves PO folders and their shared links based on provided parameters.\n\nArgs:\n    project_number (str, optional): The ID of the project. Defaults to None.\n    po_number (str, optional): The number of the PO. Defaults to None.\n\nReturns:\n    List[Dict[str, str]]: A list of dictionaries containing 'po_folder_name',\n                            'po_folder_path', and 'po_folder_link'.",
                        "returns": "List[Dict[str, str]]"
                    },
                    {
                        "name": "list_all_projects",
                        "args": [
                            "self",
                            "namespace"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Lists all project folders under the specified namespace.\n\nArgs:\n    namespace (str): The namespace (e.g., '2024') under which all projects reside.\n\nReturns:\n    List[Dict[str, str]]: A list of projects, each dict with 'id' and 'path'.",
                        "returns": "List[Dict[str, str]]"
                    },
                    {
                        "name": "find_project_folder",
                        "args": [
                            "self",
                            "project_number",
                            "namespace"
                        ],
                        "decorators": [],
                        "calls": [
                            "list_all_projects"
                        ],
                        "docstring": "Searches for a folder whose name (or metadata) contains the given project_number under the specified namespace.\n\nArgs:\n    project_number (str): The ID of the project.\n    namespace (str): The namespace under which projects are stored. Defaults to '2024'.\n\nReturns:\n    Optional[str]: The path_lower of the matched project folder if found, else None.",
                        "returns": "Optional[str]"
                    },
                    {
                        "name": "create_share_link",
                        "args": [
                            "self",
                            "dropbox_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Creates a shared link for the specified Dropbox path within the team namespace.\n\nArgs:\n    dropbox_path (str): The path in Dropbox for which to create a share link.\n\nReturns:\n    Optional[str]: The shared link if successful, else None.",
                        "returns": "Optional[str]"
                    },
                    {
                        "name": "list_project_po_folders",
                        "args": [
                            "self",
                            "po_base_path"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Lists all PO folders under the given project's Purchase Orders directory.\nThis method was already provided, but in case it wasn't implemented, here is a sample implementation.\n\nArgs:\n    po_base_path (str): The path to the project's \"1. Purchase Orders\" directory in Dropbox.\n\nReturns:\n    list: A list of dictionaries representing PO folders, each dict containing 'name' and 'path'.",
                        "returns": "list"
                    },
                    {
                        "name": "_update_monday_tax_form_link",
                        "args": [
                            "self",
                            "pulse_id",
                            "new_link"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_item"
                        ],
                        "docstring": "Update Monday contact's tax_form_link column with the new link.",
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "dropbox_api",
                "value": "DropboxAPI()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_trigger/database_trigger.py",
        "functions": [
            {
                "name": "poll_audit_log",
                "args": [
                    "poll_interval"
                ],
                "decorators": [],
                "calls": [
                    "get_db_session"
                ],
                "docstring": "Continuously poll the `audit_log` table for new entries.\nFor each new row, route it to the appropriate Celery task.\nUses db_util.get_db_session() for all DB operations.",
                "returns": null
            },
            {
                "name": "signal_handler",
                "args": [
                    "sig",
                    "frame"
                ],
                "decorators": [],
                "calls": [],
                "docstring": "Graceful shutdown on SIGINT or SIGTERM.",
                "returns": null
            },
            {
                "name": "start_db_trigger_listener",
                "args": [],
                "decorators": [],
                "calls": [
                    "poll_audit_log"
                ],
                "docstring": "Call this function once at app startup in a dedicated thread or process.",
                "returns": null
            },
            {
                "name": "main",
                "args": [],
                "decorators": [],
                "calls": [
                    "start_db_trigger_listener",
                    "initialize_database"
                ],
                "docstring": "Main function for running this script as a dedicated server.",
                "returns": null
            }
        ],
        "classes": [],
        "variables": [
            {
                "name": "logger",
                "value": "logging.getLogger('admin_logger')"
            },
            {
                "name": "TASK_ROUTING",
                "value": "{('invoice', 'INSERT'): lambda rid: process_invoice_trigger.delay(rid), ('invoice', 'UPDATE'): lambda rid: process_invoice_trigger.delay(rid), ('invoice', 'DELETE'): lambda rid: process_invoice_delete.delay(rid), ('detail_item', 'INSERT'): lambda rid: process_detail_item_create.delay(rid), ('detail_item', 'UPDATE'): lambda rid: process_detail_item_update.delay(rid), ('detail_item', 'DELETE'): lambda rid: process_detail_item_delete.delay(rid), ('purchase_order', 'INSERT'): lambda rid: process_purchase_order_create.delay(rid), ('purchase_order', 'UPDATE'): lambda rid: process_purchase_order_update.delay(rid), ('purchase_order', 'DELETE'): lambda rid: process_purchase_order_delete.delay(rid), ('contact', 'INSERT'): lambda rid: process_contact_create.delay(rid), ('contact', 'UPDATE'): lambda rid: process_contact_update.delay(rid), ('contact', 'DELETE'): lambda rid: process_contact_delete.delay(rid), ('xero_bill_line_item', 'INSERT'): lambda rid: process_xero_bill_line_item_create.delay(rid), ('xero_bill_line_item', 'UPDATE'): lambda rid: process_xero_bill_line_item_update.delay(rid), ('xero_bill_line_item', 'DELETE'): lambda rid: process_xero_bill_line_item_delete.delay(rid), ('bank_transaction', 'INSERT'): lambda rid: process_bank_transaction_create.delay(rid), ('bank_transaction', 'UPDATE'): lambda rid: process_bank_transaction_update.delay(rid), ('bank_transaction', 'DELETE'): lambda rid: process_bank_transaction_delete.delay(rid), ('account_code', 'INSERT'): lambda rid: process_account_code_create.delay(rid), ('account_code', 'UPDATE'): lambda rid: process_account_code_update.delay(rid), ('account_code', 'DELETE'): lambda rid: process_account_code_delete.delay(rid), ('receipt', 'INSERT'): lambda rid: process_receipt_create.delay(rid), ('receipt', 'UPDATE'): lambda rid: process_receipt_update.delay(rid), ('receipt', 'DELETE'): lambda rid: process_receipt_delete.delay(rid), ('spend_money', 'INSERT'): lambda rid: process_spend_money_create.delay(rid), ('spend_money', 'UPDATE'): lambda rid: process_spend_money_update.delay(rid), ('spend_money', 'DELETE'): lambda rid: process_spend_money_delete.delay(rid), ('tax_account', 'INSERT'): lambda rid: process_tax_account_create.delay(rid), ('tax_account', 'UPDATE'): lambda rid: process_tax_account_update.delay(rid), ('tax_account', 'DELETE'): lambda rid: process_tax_account_delete.delay(rid), ('xero_bill', 'INSERT'): lambda rid: process_xero_bill_create.delay(rid), ('xero_bill', 'UPDATE'): lambda rid: process_xero_bill_update.delay(rid), ('xero_bill', 'DELETE'): lambda rid: process_xero_bill_delete.delay(rid), ('po_log', 'CREATE'): lambda rid: process_po_log_create.delay(rid)}"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_trigger/logging_setup.py",
        "functions": [
            {
                "name": "setup_logging",
                "args": [],
                "decorators": [],
                "calls": [],
                "docstring": "Create loggers for each module: budget, dropbox, invoice, monday, po_log, xero, database.\nEach logger writes to a separate file in ./logs, plus a StreamHandler for the console.",
                "returns": null
            }
        ],
        "classes": [],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_monday/monday_util.py",
        "functions": [],
        "classes": [
            {
                "name": "MondayUtil",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "retrieve_subitem_board_id"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "SUBITEM_BOARD_ID",
                        "args": [
                            "self"
                        ],
                        "decorators": [
                            "property"
                        ],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "retrieve_subitem_board_id",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_subitem_board_id",
                            "get_subitems_column_id"
                        ],
                        "docstring": "Retrieves the subitem board ID by first fetching the subitems\ncolumn ID and then extracting the board ID from its settings.\n\nReturns:\n    str: The subitem board ID.\n\nRaises:\n    Exception: If unable to retrieve the subitem board ID.",
                        "returns": null
                    },
                    {
                        "name": "get_subitems_column_id",
                        "args": [
                            "self",
                            "parent_board_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Retrieves the column ID for subitems in a given board.\n\nArgs:\n    parent_board_id (str): The ID of the parent board.\n\nReturns:\n    str: The column ID for subitems.\n\nRaises:\n    Exception: If the subitems column is not found or the\n    API request fails.",
                        "returns": null
                    },
                    {
                        "name": "get_subitem_board_id",
                        "args": [
                            "self",
                            "subitems_column_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Retrieves the subitem board ID for a given subitems column ID.\n\nArgs:\n    subitems_column_id (str): The ID of the subitems column.\n\nReturns:\n    str: The subitem board ID.\n\nRaises:\n    Exception: If the subitem board ID cannot be retrieved.",
                        "returns": null
                    },
                    {
                        "name": "_handle_date_column",
                        "args": [
                            "self",
                            "event"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Date handler for columns, extracting a single date.",
                        "returns": null
                    },
                    {
                        "name": "_handle_link_column",
                        "args": [
                            "self",
                            "event"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Handles link column type and extracts URL.",
                        "returns": null
                    },
                    {
                        "name": "_handle_dropdown_column",
                        "args": [
                            "self",
                            "event"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Handles dropdown column type and extracts chosen values.",
                        "returns": null
                    },
                    {
                        "name": "_handle_default_column",
                        "args": [
                            "self",
                            "event"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Default handler for columns, extracting a single text label.",
                        "returns": null
                    },
                    {
                        "name": "_handle_status_column",
                        "args": [
                            "self",
                            "event"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Handles status column type and extracts the label text.",
                        "returns": null
                    },
                    {
                        "name": "get_column_handler",
                        "args": [
                            "self",
                            "column_type"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Retrieves the appropriate handler method based on the column type.",
                        "returns": null
                    },
                    {
                        "name": "create_item",
                        "args": [
                            "self",
                            "group_id",
                            "item_name",
                            "column_values"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Creates a new item in Monday.com within the specified group.\n\nArgs:\n    group_id (str): The ID of the group where the item will be created.\n    item_name (str): The name of the new item.\n    column_values (dict): A dictionary of column IDs and their\n        corresponding values.\n\nReturns:\n    str or None: The ID of the created item if successful, else None.",
                        "returns": null
                    },
                    {
                        "name": "update_item_columns",
                        "args": [
                            "self",
                            "item_id",
                            "column_values",
                            "board"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Updates multiple columns of an item in Monday.com.\n\nArgs:\n    item_id (str): The ID of the item to update.\n    column_values (dict): A dictionary of column IDs and their\n        corresponding values.\n    board (str): Which board to update (e.g. 'po', 'contact',\n        or 'subitem').\n\nReturns:\n    bool: True if the update was successful, False otherwise.",
                        "returns": null
                    },
                    {
                        "name": "po_column_values_formatter",
                        "args": [
                            "self",
                            "project_id",
                            "po_number",
                            "tax_id",
                            "description",
                            "contact_pulse_id",
                            "folder_link",
                            "status",
                            "producer_id",
                            "name"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "prep_po_log_item_for_monday",
                        "args": [
                            "self",
                            "item"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "subitem_column_values_formatter",
                        "args": [
                            "self",
                            "project_id",
                            "po_number",
                            "detail_number",
                            "line_number",
                            "notes",
                            "status",
                            "description",
                            "quantity",
                            "rate",
                            "date",
                            "due_date",
                            "account_number",
                            "link",
                            "OT",
                            "fringes",
                            "xero_link"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_subitem",
                        "args": [
                            "self",
                            "parent_item_id",
                            "subitem_name",
                            "column_values"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Creates a subitem in Monday.com under a given parent item.\n\nArgs:\n    parent_item_id (str): The ID of the parent item to attach\n        the subitem to.\n    subitem_name (str): The name of the subitem.\n    column_values (dict): A dictionary of column IDs and their\n        corresponding values.\n\nReturns:\n    str or None: The ID of the created subitem if successful,\n    else None.",
                        "returns": null
                    },
                    {
                        "name": "update_subitem_columns",
                        "args": [
                            "self",
                            "subitem_id",
                            "column_values"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Updates the specified columns of a subitem in Monday.com.\n\nArgs:\n    subitem_id (str): The ID of the subitem to update.\n    column_values (dict): A dictionary where keys are column IDs\n        and values are the new values for those columns.\n\nReturns:\n    bool: True if the update was successful, False otherwise.",
                        "returns": null
                    },
                    {
                        "name": "prep_po_log_detail_for_monday",
                        "args": [
                            "self",
                            "item"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "link_contact_to_po_item",
                        "args": [
                            "self",
                            "po_item_id",
                            "contact_item_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Links a contact item from the Contacts board to a PO item\nin the PO board using the Connect Boards column.\n\nArgs:\n    po_item_id (str): The ID of the PO item in the PO board.\n    contact_item_id (str): The ID of the contact item in the\n        Contacts board.\n\nReturns:\n    bool: True if the link was successful, False otherwise.",
                        "returns": null
                    },
                    {
                        "name": "prep_po_log_contact_for_monday",
                        "args": [
                            "self",
                            "item"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "validate_monday_request",
                        "args": [
                            "self",
                            "request_headers"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Validates incoming webhook requests from Monday.com\nusing the API token.\n\nArgs:\n    request_headers (dict): The headers from the incoming request.\n\nReturns:\n    bool: True if the request is valid, False otherwise.",
                        "returns": null
                    },
                    {
                        "name": "get_item_data",
                        "args": [
                            "self",
                            "monday_response"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_contact_pulse_id",
                        "args": [
                            "self",
                            "columns_dict"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "is_main_item_different",
                        "args": [
                            "self",
                            "db_item",
                            "monday_item"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "is_sub_item_different",
                        "args": [
                            "self",
                            "db_sub_item",
                            "monday_sub_item"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "extract_subitem_identifiers",
                        "args": [
                            "self",
                            "monday_sub_item"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "_extract_tax_link_from_monday",
                        "args": [
                            "self",
                            "pulse_id",
                            "all_monday_contacts"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Given a contact's Monday pulse_id, find that contact in\n`all_monday_contacts` and return the link's 'url' if it exists.",
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "monday_util",
                "value": "MondayUtil()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_monday/__init__.py",
        "functions": [],
        "classes": [],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_monday/monday_api.py",
        "functions": [],
        "classes": [
            {
                "name": "MondayAPI",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83c\udfd7\ufe0f Sets up the Monday API singleton with proper logging, token initialization,\nand references to critical board and column IDs.",
                        "returns": null
                    },
                    {
                        "name": "_make_request",
                        "args": [
                            "self",
                            "query",
                            "variables"
                        ],
                        "decorators": [],
                        "calls": [
                            "_handle_graphql_errors",
                            "_log_complexity"
                        ],
                        "docstring": "\ud83d\udd12 Private Method: Executes a GraphQL request against the Monday.com API with:\n  - Complexity query insertion\n  - Retry logic for transient failures (e.g., connection errors)\n  - Handling of 429 (rate-limit) responses\n\n:param query: GraphQL query string\n:param variables: Optional variables dict\n:return: Parsed JSON response from Monday API\n:raises: ConnectionError if MAX_RETRIES exceeded or any unhandled error occurs",
                        "returns": null
                    },
                    {
                        "name": "_handle_graphql_errors",
                        "args": [
                            "self",
                            "errors"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83d\udd12 Private Method: Handles GraphQL-level errors returned by Monday.com.\nRaises specific exceptions based on error messages for clarity.",
                        "returns": null
                    },
                    {
                        "name": "_log_complexity",
                        "args": [
                            "self",
                            "data"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83d\udd12 Private Method: Logs complexity usage if available in the API response data.\nHelps track usage and avoid hitting Monday API limits.",
                        "returns": null
                    },
                    {
                        "name": "create_item",
                        "args": [
                            "self",
                            "board_id",
                            "group_id",
                            "name",
                            "column_values"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83c\udfa8 Create a new item on a board.\n:param board_id: Board ID where the item will be created\n:param group_id: The group_id to place the item in\n:param name: Name of the new item\n:param column_values: Column values in JSON or dict format\n:return: GraphQL response",
                        "returns": null
                    },
                    {
                        "name": "create_subitem",
                        "args": [
                            "self",
                            "parent_item_id",
                            "subitem_name",
                            "column_values"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83e\udde9 Create a subitem (child item) under a given parent item.\n:param parent_item_id: The parent item's ID\n:param subitem_name: Subitem name\n:param column_values: Column values in JSON or dict format\n:return: GraphQL response",
                        "returns": null
                    },
                    {
                        "name": "create_contact",
                        "args": [
                            "self",
                            "name"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\uddc2\ufe0f Create a new contact in the 'Contacts' board.\n:param name: Contact Name\n:return: GraphQL response with ID and name",
                        "returns": null
                    },
                    {
                        "name": "update_item",
                        "args": [
                            "self",
                            "item_id",
                            "column_values",
                            "type"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd27 Updates an existing item, subitem, or contact.\n:param item_id: Pulse (item) ID to update\n:param column_values: Dict/JSON of column values to update\n:param type: 'main', 'subitem', or 'contact' to determine board\n:return: GraphQL response",
                        "returns": null
                    },
                    {
                        "name": "fetch_all_items",
                        "args": [
                            "self",
                            "board_id",
                            "limit"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd0e Fetches all items from a given board using cursor-based pagination.\n:param board_id: Board ID to fetch items from\n:param limit: # of items to fetch per query\n:return: List of item dicts as returned by Monday",
                        "returns": null
                    },
                    {
                        "name": "fetch_all_sub_items",
                        "args": [
                            "self",
                            "limit"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd0e Fetch all subitems from the subitem board, filtering out those without a parent_item.\nReturns only valid subitems that have a parent.",
                        "returns": null
                    },
                    {
                        "name": "get_subitems_in_board",
                        "args": [
                            "self",
                            "project_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "Fetches subitems from the subitem board (self.SUBITEM_BOARD_ID).\n\n- If project_number is None, returns all subitems from the subitem board.\n- If project_number is provided, returns all subitems whose\n  project_id column (self.monday_util.SUBITEM_PROJECT_ID_COLUMN_ID)\n  matches the given project_number.\n\nFor each subitem, we transform its 'column_values' list into a dict:\n  \"column_values\": {\n      <column_id>: {\n          \"text\": <string>,\n          \"value\": <raw JSON string or None>\n      },\n      ...\n  }\n\nReturns: a list of subitem dicts like:\n[\n  {\n    \"id\": <subitem_id>,\n    \"name\": <subitem_name>,\n    \"parent_item\": {\n        \"id\": <parent_item_id>,\n        \"name\": <parent_item_name>\n    },\n    \"column_values\": {\n        \"<col_id>\": { \"text\": ..., \"value\": ... },\n        ...\n    }\n  },\n  ...\n]",
                        "returns": null
                    },
                    {
                        "name": "fetch_all_contacts",
                        "args": [
                            "self",
                            "limit"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd0e Fetch all contacts from the 'Contacts' board with pagination.\n:param limit: number of items to fetch per page\n:return: List of contact items",
                        "returns": "list"
                    },
                    {
                        "name": "fetch_item_by_ID",
                        "args": [
                            "self",
                            "id"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd0e Fetch a single item by ID.\n:param id: Item (pulse) ID\n:return: The item dict, or None if not found",
                        "returns": null
                    },
                    {
                        "name": "fetch_group_ID",
                        "args": [
                            "self",
                            "project_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd0e Fetches the group ID whose title contains the given project_id.\n:param project_id: The project identifier string\n:return: Group ID as string or None if no match",
                        "returns": null
                    },
                    {
                        "name": "fetch_subitem_by_receipt_and_line",
                        "args": [
                            "self",
                            "receipt_number",
                            "line_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd0e Fetch subitem matching receipt_number & line_number from subitem board.\nReplace 'receipt_number_column_id' and 'line_number_column_id' with your real subitem board columns.",
                        "returns": null
                    },
                    {
                        "name": "fetch_item_by_po_and_project",
                        "args": [
                            "self",
                            "project_id",
                            "po_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd0e Fetch a main item by matching project_id and po_number columns.\n:param project_id: The project identifier\n:param po_number: The Purchase Order number\n:return: GraphQL response with item(s) in 'data.items_page_by_column_values.items'",
                        "returns": null
                    },
                    {
                        "name": "fetch_subitem_by_po_receipt_line",
                        "args": [
                            "self",
                            "po_number",
                            "receipt_number",
                            "line_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd0e Fetch a subitem by matching PO number, receipt number, and line ID columns.",
                        "returns": null
                    },
                    {
                        "name": "fetch_item_by_name",
                        "args": [
                            "self",
                            "name",
                            "board"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd0e Fetch a single item by 'name' column on the specified board.\n:param name: The item's name to search for\n:param board: 'PO', 'Contacts', or fallback to subitem board\n:return: The single matching item dict or None if not found",
                        "returns": null
                    },
                    {
                        "name": "_safe_get_text",
                        "args": [
                            "self",
                            "vals_dict",
                            "col_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83d\udee1\ufe0f Safe retrieval of text from column_values dict.\nUseful if the value doesn't exist or is None.",
                        "returns": null
                    },
                    {
                        "name": "get_items_in_project",
                        "args": [
                            "self",
                            "project_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd0e Retrieve all items from the PO_BOARD_ID that match a given project_id column value.\nUses cursor-based pagination if needed.\n:param project_id: The project identifier (string)\n:return: A list of items with column_values as a dict",
                        "returns": null
                    },
                    {
                        "name": "get_subitems_for_item",
                        "args": [
                            "self",
                            "item_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83d\udd0e Fetch subitems for a given parent item_id in the main board.\n:param item_id: Main item ID\n:return: List of subitem dicts: { \"id\": subitem_id, \"name\": subitem_name, \"column_values\": {..} }",
                        "returns": null
                    },
                    {
                        "name": "batch_create_or_update_items",
                        "args": [
                            "self",
                            "batch",
                            "project_id",
                            "create"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Splits items into sub-batches and calls create_items_batch for each.",
                        "returns": null
                    },
                    {
                        "name": "create_items_batch",
                        "args": [
                            "self",
                            "batch",
                            "project_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request",
                            "po_column_values_formatter"
                        ],
                        "docstring": "Creates a batch of items on the PO board using the Monday.com GraphQL API.\nEach item\u2019s column values are formatted via monday_util.po_column_values_formatter,\nwhich maps your DB field names to the proper Monday column IDs.\n\nArgs:\n    batch (list): A list of dicts. Each dict is expected to have:\n        - 'db_item': the local record (e.g. with a vendor name)\n        - 'column_values': a dict keyed by your DB field names\n    project_id: A project identifier (for logging purposes).\n\nReturns:\n    The batch list updated with each item\u2019s new Monday ID (under the key 'monday_item_id').",
                        "returns": null
                    },
                    {
                        "name": "find_or_create_item_in_monday",
                        "args": [
                            "self",
                            "item",
                            "column_values"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_item",
                            "po_column_values_formatter",
                            "update_item",
                            "fetch_item_by_po_and_project"
                        ],
                        "docstring": "\ud83d\udd0e Finds an item by project_id & PO. If it exists, returns it.\nOtherwise, creates a new item.\n:param item: dict with keys [\"project_id\", \"PO\", \"name\", \"group_id\", ...]\n:param column_values: JSON/dict of column values\n:return: The updated item with \"item_pulse_id\" assigned",
                        "returns": null
                    },
                    {
                        "name": "find_or_create_sub_item_in_monday",
                        "args": [
                            "self",
                            "sub_item",
                            "parent_item"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_subitem",
                            "fetch_item_by_ID",
                            "update_item",
                            "subitem_column_values_formatter",
                            "fetch_subitem_by_po_receipt_line"
                        ],
                        "docstring": "\ud83d\udd0e Finds or creates a subitem in Monday corresponding to external data (invoice lines, hours, etc.).\n:param sub_item: dict with keys like [\"line_number\", \"date\", \"due date\", \"po_number\", \"vendor\", etc.]\n:param parent_item: dict with at least [\"item_pulse_id\", \"status\", \"name\", ...]\n:return: The updated sub_item with \"pulse_id\" assigned if created or found",
                        "returns": null
                    },
                    {
                        "name": "parse_tax_number",
                        "args": [
                            "self",
                            "tax_str"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83e\uddfe Removes hyphens (e.g., for SSN '123-45-6789' or EIN '12-3456789') and attempts to parse as int.\nReturns None if parsing fails or if the string is empty.",
                        "returns": null
                    },
                    {
                        "name": "extract_monday_contact_fields",
                        "args": [
                            "self",
                            "contact_item"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83d\uddc2\ufe0f Converts a Monday contact_item (including its column_values) into a structured dict of fields.",
                        "returns": "dict"
                    },
                    {
                        "name": "create_contact_in_monday",
                        "args": [
                            "self",
                            "name"
                        ],
                        "decorators": [],
                        "calls": [
                            "fetch_item_by_ID",
                            "create_contact"
                        ],
                        "docstring": "\u2795 Create a contact in Monday and immediately fetch its full item data.\n:param name: Name of the contact\n:return: The newly created contact item",
                        "returns": "dict"
                    },
                    {
                        "name": "sync_db_contact_to_monday",
                        "args": [
                            "self",
                            "db_contact"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_item"
                        ],
                        "docstring": "\ud83d\udd04 Syncs local DB contact fields to an existing Monday contact.\n:param db_contact: DB contact object with attributes matching your columns",
                        "returns": null
                    },
                    {
                        "name": "update_monday_tax_form_link",
                        "args": [
                            "self",
                            "pulse_id",
                            "new_link"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_item"
                        ],
                        "docstring": "\u270f\ufe0f Update the tax_form_link column for a Monday contact, setting an appropriate link text label.",
                        "returns": null
                    },
                    {
                        "name": "batch_create_or_update_subitems",
                        "args": [
                            "self",
                            "subitems_batch",
                            "create"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Splits subitems into sub-batches and calls either create_subitems_batch() or update_subitems_batch().\nEach subitem dict can have its own 'parent_id'; if missing, fallback to parent_item_id param.\n\nsubitems_batch: [\n  {\n    \"db_sub_item\": <python dict of subitem data>,\n    \"column_values\": {...some dict...},\n    \"parent_id\": <int or None>,\n    \"monday_item_id\": <existing subitem ID if update, else None>\n  },\n  ...\n]",
                        "returns": null
                    },
                    {
                        "name": "create_subitems_batch",
                        "args": [
                            "self",
                            "sbatch",
                            "default_parent_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "Creates multiple subitems in one GraphQL mutation. Each subitem can define its own `parent_id`.",
                        "returns": null
                    },
                    {
                        "name": "update_subitems_batch",
                        "args": [
                            "self",
                            "sbatch"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "Updates multiple existing subitems in one GraphQL mutation.\nExpects each dict to have 'monday_item_id' and 'column_values'.",
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "MAX_RETRIES",
                "value": "3"
            },
            {
                "name": "RETRY_BACKOFF_FACTOR",
                "value": "2"
            },
            {
                "name": "monday_api",
                "value": "MondayAPI()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_monday/monday_database_util.py",
        "functions": [],
        "classes": [
            {
                "name": "MondayDatabaseUtil",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_or_update_main_item_in_db",
                        "args": [
                            "self",
                            "item_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_purchase_order",
                            "search_purchase_orders",
                            "update_purchase_order"
                        ],
                        "docstring": "Example usage of DatabaseOperations for a main item (PurchaseOrder).",
                        "returns": null
                    },
                    {
                        "name": "create_or_update_sub_item_in_db",
                        "args": [
                            "self",
                            "item_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_detail_items",
                            "update_detail_item",
                            "create_detail_item"
                        ],
                        "docstring": "Example usage of DatabaseOperations for a subitem (DetailItem).",
                        "returns": null
                    },
                    {
                        "name": "get_purchase_order_surrogate_id_by_pulse_id",
                        "args": [
                            "self",
                            "pulse_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_purchase_orders"
                        ],
                        "docstring": "Now uses db_ops.search_purchase_orders to find the PO by pulse_id.",
                        "returns": null
                    },
                    {
                        "name": "get_purchase_order_type_by_pulse_id",
                        "args": [
                            "self",
                            "pulse_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_purchase_orders"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "get_detail_item_by_pulse_id",
                        "args": [
                            "self",
                            "pulse_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_detail_items"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_db_with_sub_item_change",
                        "args": [
                            "self",
                            "change_item"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_detail_items",
                            "update_detail_item"
                        ],
                        "docstring": "Applies a prepared change to a DetailItem.",
                        "returns": null
                    },
                    {
                        "name": "delete_purchase_order_in_db",
                        "args": [
                            "self",
                            "pulse_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_db_session",
                            "search_purchase_orders"
                        ],
                        "docstring": "Example: Search the PO by pulse_id, then if found, delete it.",
                        "returns": null
                    },
                    {
                        "name": "delete_detail_item_in_db",
                        "args": [
                            "self",
                            "pulse_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "search_detail_items",
                            "get_db_session"
                        ],
                        "docstring": "Example: Search the DetailItem by pulse_id, then delete it if found.",
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "monday_database_util",
                "value": "MondayDatabaseUtil()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_monday/monday_service.py",
        "functions": [],
        "classes": [
            {
                "name": "MondayService",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "\ud83c\udf1f Sets up logging, references to Monday utilities & DB ops,\nand relevant board/column config from Config & monday_util.",
                        "returns": null
                    },
                    {
                        "name": "_make_request",
                        "args": [
                            "self",
                            "query",
                            "variables"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "Internal method that delegates to the official 'monday_api' for raw GraphQL queries.",
                        "returns": null
                    },
                    {
                        "name": "update_po_status",
                        "args": [
                            "self",
                            "pulse_id",
                            "status"
                        ],
                        "decorators": [],
                        "calls": [
                            "_make_request"
                        ],
                        "docstring": "\ud83c\udfa8 Update the status of a Purchase Order (PO) in Monday.com\nusing a known column_id for 'status' from monday_util.",
                        "returns": null
                    },
                    {
                        "name": "match_or_create_contact",
                        "args": [
                            "self",
                            "vendor_name",
                            "po_number"
                        ],
                        "decorators": [],
                        "calls": [
                            "link_contact_to_po",
                            "create_contact",
                            "fetch_item_by_name"
                        ],
                        "docstring": "\ud83d\udd0e Either finds an existing contact by vendor_name or creates a new one, then optionally links it to the PO in local DB.\n\n:param vendor_name: The vendor's name from your PO record\n:param po_number: The PO number for linking logic\n:return: contact_id in Monday.com (pulse_id)",
                        "returns": "int"
                    },
                    {
                        "name": "get_po_number_from_item",
                        "args": [
                            "self",
                            "item_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Retrieves the PO number from a specific item in Monday.com using your existing monday_util method.",
                        "returns": "Any | None"
                    },
                    {
                        "name": "upsert_po_in_monday",
                        "args": [
                            "self",
                            "po_record"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_item",
                            "update_item",
                            "fetch_item_by_po_and_project"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "upsert_detail_subitem_in_monday",
                        "args": [
                            "self",
                            "detail_item"
                        ],
                        "decorators": [],
                        "calls": [
                            "_build_detail_subitem_values",
                            "create_subitem",
                            "update_item"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "sync_main_items_from_monday_board",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "create_or_update_main_item_in_db",
                            "fetch_all_items"
                        ],
                        "docstring": "\u267b\ufe0f Pull main items from Monday's PO board, then attempt to sync them into the DB.\nYou can store them using self.db_util if needed.",
                        "returns": null
                    },
                    {
                        "name": "sync_sub_items_from_monday_board",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "fetch_all_sub_items",
                            "create_or_update_sub_item_in_db"
                        ],
                        "docstring": "\u267b\ufe0f Pull subitems from Monday's subitem board, then sync them to DB.",
                        "returns": null
                    },
                    {
                        "name": "sync_contacts_from_monday_board",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "update_contact",
                            "create_contact",
                            "parse_tax_number",
                            "fetch_all_contacts",
                            "extract_monday_contact_fields"
                        ],
                        "docstring": "\u267b\ufe0f Pull contacts from Monday's contact board, then sync them into local DB.",
                        "returns": null
                    },
                    {
                        "name": "buffered_upsert_po",
                        "args": [
                            "self",
                            "po_record"
                        ],
                        "decorators": [],
                        "calls": [
                            "purchase_order_has_changes"
                        ],
                        "docstring": "\ud83c\udf00 [START] Stage a PurchaseOrder for eventual upsert in Monday IF:\n  - There's no 'pulse_id' (new record),\n  - OR if db_ops.purchase_order_has_changes(...) is True.\n\n:param po_record: Local DB dict (has 'id', 'project_number', 'po_number', possibly 'pulse_id', etc.)",
                        "returns": null
                    },
                    {
                        "name": "execute_batch_upsert_pos",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "batch_create_or_update_items",
                            "search_contacts"
                        ],
                        "docstring": "\ud83c\udf00 [START] Actually perform the create/update in Monday for all queued POs,\nusing the existing monday_api's batch_create_or_update_items method.\n\nClears the queue at the end.",
                        "returns": null
                    },
                    {
                        "name": "buffered_upsert_contact",
                        "args": [
                            "self",
                            "contact_record"
                        ],
                        "decorators": [],
                        "calls": [
                            "contact_has_changes"
                        ],
                        "docstring": "\ud83c\udf00 [START] Stage a Contact record for Monday upsert\nif newly created or aggregator says it changed (contact_has_changes).",
                        "returns": null
                    },
                    {
                        "name": "execute_batch_upsert_contacts",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "batch_create_or_update_items",
                            "_build_contact_column_values"
                        ],
                        "docstring": "\ud83c\udf00 Perform the batch create/update in Monday for all queued contacts,\nclearing the queue afterwards.",
                        "returns": null
                    },
                    {
                        "name": "_build_contact_column_values",
                        "args": [
                            "self",
                            "contact_data"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Build column values dict for a contact.\nOnly do so if aggregator says changes or new record.",
                        "returns": "dict"
                    },
                    {
                        "name": "buffered_upsert_detail_item",
                        "args": [
                            "self",
                            "detail_record"
                        ],
                        "decorators": [],
                        "calls": [
                            "detail_item_has_changes"
                        ],
                        "docstring": "\ud83c\udf00 [START] Stage a detail item for Monday subitem upsert.\nIf aggregator found changes (detail_item_has_changes) or no subitem ID,\nwe enqueue.\n\ndetail_record: local dict, possibly has 'parent_id', 'pulse_id', etc.\nFor subitems, we might store 'parent_pulse_id' for the main item\nand 'pulse_id' for the subitem itself.",
                        "returns": null
                    },
                    {
                        "name": "execute_batch_upsert_detail_items",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [
                            "_build_detail_subitem_values",
                            "batch_create_or_update_subitems"
                        ],
                        "docstring": "\ud83c\udf00 Perform batch create/update of detail items as Monday subitems.\nClears the queue after.",
                        "returns": null
                    },
                    {
                        "name": "_build_detail_subitem_values",
                        "args": [
                            "self",
                            "detail_item"
                        ],
                        "decorators": [],
                        "calls": [
                            "subitem_column_values_formatter"
                        ],
                        "docstring": "Constructs the column values for a detail item subitem using the formatter\nfunction from monday_util.",
                        "returns": "dict"
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "monday_service",
                "value": "MondayService()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/files_monday/monday_webhook_handler.py",
        "functions": [
            {
                "name": "po_status_change",
                "args": [],
                "decorators": [
                    "monday_blueprint.route('/po_status_change')"
                ],
                "calls": [
                    "verify_challenge",
                    "process_po_status_change"
                ],
                "docstring": "Endpoint to handle PO status change events from Monday.com.",
                "returns": null
            },
            {
                "name": "subitem_change",
                "args": [],
                "decorators": [
                    "monday_blueprint.route('/subitem_change')"
                ],
                "calls": [
                    "verify_challenge",
                    "process_sub_item_change"
                ],
                "docstring": "Endpoint to handle SubItem change events from Monday.com.",
                "returns": null
            },
            {
                "name": "subitem_delete",
                "args": [],
                "decorators": [
                    "monday_blueprint.route('/subitem_delete')"
                ],
                "calls": [
                    "verify_challenge",
                    "process_sub_item_delete"
                ],
                "docstring": "Endpoint to handle SubItem deletion events from Monday.com.",
                "returns": null
            }
        ],
        "classes": [
            {
                "name": "MondayWebhookHandler",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "verify_challenge",
                        "args": [
                            "event"
                        ],
                        "decorators": [
                            "staticmethod"
                        ],
                        "calls": [],
                        "docstring": "Verify if the event contains a challenge and respond accordingly.\n\nArgs:\n    event (dict): The event data received from Monday.com.\n\nReturns:\n    Response object if challenge is present, otherwise None.",
                        "returns": null
                    },
                    {
                        "name": "process_po_status_change",
                        "args": [
                            "self",
                            "event_data"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Process purchase order (PO) status change events from Monday.com.\n\nArgs:\n    event_data (dict): The event data containing PO status change information.\n\nReturns:\n    JSON response indicating success or error.",
                        "returns": null
                    },
                    {
                        "name": "process_sub_item_change",
                        "args": [
                            "self",
                            "event_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "get_purchase_order_surrogate_id_by_pulse_id",
                            "create_or_update_sub_item_in_db",
                            "update_db_with_sub_item_change",
                            "create_or_update_main_item_in_db",
                            "fetch_item_by_ID"
                        ],
                        "docstring": "Process SubItem change events from Monday.com and update the local DetailItem table.\n\nArgs:\n    event_data (dict): The event data containing SubItem change information.\n\nReturns:\n    JSON response indicating success or error.",
                        "returns": null
                    },
                    {
                        "name": "process_sub_item_delete",
                        "args": [
                            "self",
                            "event_data"
                        ],
                        "decorators": [],
                        "calls": [
                            "delete_detail_item_in_db"
                        ],
                        "docstring": "Process SubItem deletion events from Monday.com and remove the item from the local database.\n\nArgs:\n    event_data (dict): The event data containing SubItem deletion information.\n\nReturns:\n    JSON response indicating success or error.",
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "monday_blueprint",
                "value": "Blueprint('files_monday', __name__)"
            },
            {
                "name": "monday_webhook_handler",
                "value": "MondayWebhookHandler()"
            },
            {
                "name": "logger",
                "value": "logging.getLogger('monday_logger')"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_celery/celery_server.py",
        "functions": [
            {
                "name": "announce_tasks",
                "args": [
                    "sender"
                ],
                "decorators": [
                    "celery_app.on_after_finalize.connect"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "init_db",
                "args": [],
                "decorators": [
                    "worker_init.connect"
                ],
                "calls": [
                    "initialize_database"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "signal_worker_init",
                "args": [
                    "sender"
                ],
                "decorators": [
                    "worker_init.connect"
                ],
                "calls": [],
                "docstring": "Runs at worker initialization. We also purge any leftover tasks\nso the queue is empty when we start accepting new tasks.",
                "returns": null
            },
            {
                "name": "signal_worker_ready",
                "args": [
                    "sender"
                ],
                "decorators": [
                    "worker_ready.connect"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "signal_worker_shutdown",
                "args": [
                    "sender"
                ],
                "decorators": [
                    "worker_shutdown.connect"
                ],
                "calls": [],
                "docstring": "Runs just before the Celery worker fully shuts down.\nWe revoke any active tasks (forcing them to stop) and then purge\nany remaining messages in the queue.",
                "returns": null
            }
        ],
        "classes": [
            {
                "name": "DBRetryTask",
                "methods": [],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "logger",
                "value": "logging.getLogger('admin_logger')"
            },
            {
                "name": "celery_app",
                "value": "Celery('celery_app', broker='redis://localhost:6379/5', backend='redis://localhost:6379/5')"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_celery/__init__.py",
        "functions": [],
        "classes": [],
        "variables": []
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_celery/celery_task_router.py",
        "functions": [],
        "classes": [
            {
                "name": "CeleryTaskService",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "po_log_trigger_on_create",
                        "args": [
                            "self",
                            "po_log_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "xero_bill_line_item_trigger_on_create",
                        "args": [
                            "self",
                            "xero_bill_line_item_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "xero_bill_line_item_trigger_on_update",
                        "args": [
                            "self",
                            "xero_bill_line_item_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "xero_bill_line_item_trigger_on_delete",
                        "args": [
                            "self",
                            "xero_bill_line_item_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "spend_money_trigger_on_create",
                        "args": [
                            "self",
                            "spend_money_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "handle_spend_money_create"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "spend_money_trigger_on_update",
                        "args": [
                            "self",
                            "spend_money_id"
                        ],
                        "decorators": [],
                        "calls": [
                            "handle_spend_money_update"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "spend_money_trigger_on_delete",
                        "args": [
                            "self",
                            "spend_money_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_xero_bill_trigger",
                        "args": [
                            "self",
                            "bill_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_xero_bill_trigger",
                        "args": [
                            "self",
                            "bill_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_xero_bill_trigger",
                        "args": [
                            "self",
                            "bill_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "create_xero_xero_bill_line_items_trigger",
                        "args": [
                            "self",
                            "bill_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "update_xero_xero_bill_line_item_trigger",
                        "args": [
                            "self",
                            "line_item_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "delete_xero_xero_bill_line_item_trigger",
                        "args": [
                            "self",
                            "line_item_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "project_trigger_on_create",
                        "args": [
                            "self",
                            "project_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "project_trigger_on_update",
                        "args": [
                            "self",
                            "project_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "project_trigger_on_delete",
                        "args": [
                            "self",
                            "project_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "purchase_order_trigger_on_create",
                        "args": [
                            "self",
                            "po_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "purchase_order_trigger_on_update",
                        "args": [
                            "self",
                            "po_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "purchase_order_trigger_on_delete",
                        "args": [
                            "self",
                            "po_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "detail_item_trigger_on_create",
                        "args": [
                            "self",
                            "detail_item_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "detail_item_trigger_on_update",
                        "args": [
                            "self",
                            "detail_item_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "detail_item_on_delete",
                        "args": [
                            "self",
                            "detail_item_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "invoice_trigger_on_create_or_update",
                        "args": [
                            "self",
                            "invoice_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "invoice_trigger_on_delete",
                        "args": [
                            "self",
                            "invoice_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "receipt_trigger_on_create",
                        "args": [
                            "self",
                            "receipt_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "receipt_trigger_on_update",
                        "args": [
                            "self",
                            "receipt_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "receipt_trigger_on_delete",
                        "args": [
                            "self",
                            "receipt_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "contact_trigger_on_create",
                        "args": [
                            "self",
                            "contact_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "contact_trigger_on_update",
                        "args": [
                            "self",
                            "contact_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "contact_trigger_on_delete",
                        "args": [
                            "self",
                            "contact_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "tax_account_trigger_on_create",
                        "args": [
                            "self",
                            "tax_account_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "tax_account_trigger_on_update",
                        "args": [
                            "self",
                            "tax_account_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "tax_account_trigger_on_delete",
                        "args": [
                            "self",
                            "tax_account_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "account_code_trigger_on_create",
                        "args": [
                            "self",
                            "account_code_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "account_code_trigger_on_update",
                        "args": [
                            "self",
                            "account_code_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "account_code_trigger_on_delete",
                        "args": [
                            "self",
                            "account_code_id"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": [
            {
                "name": "celery_task_service",
                "value": "CeleryTaskService()"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_celery/celery_tasks.py",
        "functions": [
            {
                "name": "process_invoice_trigger",
                "args": [
                    "invoice_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "invoice_trigger_on_create_or_update"
                ],
                "docstring": "The Celery task for handling invoice creates/updates.",
                "returns": null
            },
            {
                "name": "process_invoice_delete",
                "args": [
                    "invoice_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "invoice_trigger_on_delete"
                ],
                "docstring": "The Celery task for handling invoice deletes.",
                "returns": null
            },
            {
                "name": "process_detail_item_update",
                "args": [
                    "detail_item_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "detail_item_trigger_on_update"
                ],
                "docstring": "The Celery task for detail items that just turned RTP (or updated).",
                "returns": null
            },
            {
                "name": "process_detail_item_create",
                "args": [
                    "detail_item_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "detail_item_trigger_on_create"
                ],
                "docstring": "The Celery task for newly created detail items.",
                "returns": null
            },
            {
                "name": "process_detail_item_delete",
                "args": [
                    "detail_item_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "detail_item_on_delete"
                ],
                "docstring": "    The Celery task for dele\n        logger = logging.getLogger('budget_logger')\nted detail items.\n    ",
                "returns": null
            },
            {
                "name": "process_purchase_order_create",
                "args": [
                    "po_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "purchase_order_trigger_on_create"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_purchase_order_update",
                "args": [
                    "po_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "purchase_order_trigger_on_update"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_purchase_order_delete",
                "args": [
                    "po_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "purchase_order_trigger_on_delete"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_contact_create",
                "args": [
                    "contact_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "contact_trigger_on_create"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_contact_update",
                "args": [
                    "contact_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "contact_trigger_on_update"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_contact_delete",
                "args": [
                    "contact_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "contact_trigger_on_delete"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_xero_bill_line_item_create",
                "args": [
                    "xero_bill_line_item_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "xero_bill_line_item_trigger_on_create"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_xero_bill_line_item_update",
                "args": [
                    "xero_bill_line_item_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "xero_bill_line_item_trigger_on_update"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_xero_bill_line_item_delete",
                "args": [
                    "xero_bill_line_item_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "xero_bill_line_item_trigger_on_delete"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_bank_transaction_create",
                "args": [
                    "bank_tx_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_bank_transaction_update",
                "args": [
                    "bank_tx_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_bank_transaction_delete",
                "args": [
                    "bank_tx_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_account_code_create",
                "args": [
                    "account_code_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "account_code_trigger_on_create"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_account_code_update",
                "args": [
                    "account_code_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "account_code_trigger_on_update"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_account_code_delete",
                "args": [
                    "account_code_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "account_code_trigger_on_delete"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_receipt_create",
                "args": [
                    "receipt_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "receipt_trigger_on_create"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_receipt_update",
                "args": [
                    "receipt_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "receipt_trigger_on_update"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_receipt_delete",
                "args": [
                    "receipt_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "receipt_trigger_on_delete"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_spend_money_create",
                "args": [
                    "spend_money_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "spend_money_trigger_on_create"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_spend_money_update",
                "args": [
                    "spend_money_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "spend_money_trigger_on_update"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_spend_money_delete",
                "args": [
                    "spend_money_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "spend_money_trigger_on_delete"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_tax_account_create",
                "args": [
                    "tax_account_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "tax_account_trigger_on_create"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_tax_account_update",
                "args": [
                    "tax_account_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "tax_account_trigger_on_update"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_tax_account_delete",
                "args": [
                    "tax_account_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "tax_account_trigger_on_delete"
                ],
                "docstring": null,
                "returns": null
            },
            {
                "name": "process_xero_bill_update",
                "args": [
                    "bill_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "update_xero_bill_trigger"
                ],
                "docstring": "The Celery task for handling updated XeroBills.",
                "returns": null
            },
            {
                "name": "process_xero_bill_create",
                "args": [
                    "bill_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "create_xero_bill_trigger"
                ],
                "docstring": "The Celery task for handling newly created XeroBills.",
                "returns": null
            },
            {
                "name": "create_xero_xero_bill_line_items",
                "args": [
                    "bill_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "create_xero_xero_bill_line_items_trigger"
                ],
                "docstring": "The Celery task for handling newly inserted line items for a XeroBill.",
                "returns": null
            },
            {
                "name": "update_xero_xero_bill_line_item",
                "args": [
                    "line_item_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "update_xero_xero_bill_line_item_trigger"
                ],
                "docstring": "The Celery task for handling updated line items for a XeroBill.",
                "returns": null
            },
            {
                "name": "process_xero_bill_delete",
                "args": [
                    "bill_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "delete_xero_bill_trigger"
                ],
                "docstring": "The Celery task for handling deleted XeroBills.",
                "returns": null
            },
            {
                "name": "delete_xero_xero_bill_line_item",
                "args": [
                    "line_item_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "delete_xero_xero_bill_line_item_trigger"
                ],
                "docstring": "The Celery task for handling deleted line items for a XeroBill.",
                "returns": null
            },
            {
                "name": "process_po_log_create",
                "args": [
                    "po_log_id"
                ],
                "decorators": [
                    "shared_task"
                ],
                "calls": [
                    "po_log_trigger_on_create"
                ],
                "docstring": "The Celery task for handling PO Log [NEW] action.\nExecutes the logic to process PO log files.",
                "returns": null
            }
        ],
        "classes": [],
        "variables": [
            {
                "name": "logger",
                "value": "logging.getLogger('admin_logger')"
            }
        ]
    },
    {
        "file_path": "/Users/haske107/PycharmProjects/Dropbox Listener/server_celery/logging_setup.py",
        "functions": [
            {
                "name": "setup_logging",
                "args": [],
                "decorators": [],
                "calls": [],
                "docstring": "Configure all module-specific loggers (admin, budget, dropbox, invoice, etc.)\nEXCEPT for the Flask `web_logger`. We'll do that in `setup_web_logger()`.",
                "returns": null
            },
            {
                "name": "setup_web_logger",
                "args": [
                    "flask_app"
                ],
                "decorators": [],
                "calls": [],
                "docstring": "Set up a 'web_logger' dedicated to Flask logs.\nThen attach these handlers to flask_app.logger, removing any defaults.",
                "returns": null
            }
        ],
        "classes": [
            {
                "name": "PaddedFormatter",
                "methods": [
                    {
                        "name": "__init__",
                        "args": [
                            "self",
                            "fmt",
                            "datefmt",
                            "max_length"
                        ],
                        "decorators": [],
                        "calls": [
                            "__init__"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "pad_center",
                        "args": [
                            "self",
                            "text",
                            "width"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Pad text to the specified width, centering it.",
                        "returns": null
                    },
                    {
                        "name": "pad_left",
                        "args": [
                            "self",
                            "text",
                            "width"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": "Pad text to the specified width, aligning it to the left.",
                        "returns": null
                    },
                    {
                        "name": "format",
                        "args": [
                            "self",
                            "record"
                        ],
                        "decorators": [],
                        "calls": [
                            "pad_center",
                            "format",
                            "formatTime",
                            "pad_left"
                        ],
                        "docstring": null,
                        "returns": null
                    },
                    {
                        "name": "formatTime",
                        "args": [
                            "self",
                            "record",
                            "datefmt"
                        ],
                        "decorators": [],
                        "calls": [],
                        "docstring": null,
                        "returns": null
                    }
                ],
                "decorators": []
            }
        ],
        "variables": []
    }
]