    def process_folder(self, file_id, file_name, dropbox_path, project_id, po_number, vendor_name, vendor_type):
        """
        Processes a newly created folder to manage PO records and related tasks.

        Args:
            file_id (str): The ID of the file/folder.
            file_name (str): The name of the file/folder.
            dropbox_path (str): The Dropbox path to the folder.
            project_id (str): The project ID.
            po_number (str): The PO number.
            vendor_name (str): The vendor's name.
            vendor_type (str): The type of vendor ('vendor' or 'cc').
        """

        logging.info(f"Starting processing of folder: {dropbox_path}")

        try:
            dbx_client = dropbox_client
            dbx = dbx_client.dbx

            # Check if a PO item already exists in Monday.com for this folder
            existing_item_id = find_item_by_project_and_po(project_id, po_number)
            if existing_item_id:
                logging.info(
                    f"PO item already exists in Monday.com for Project ID {project_id} and PO Number {po_number}.")
                return  # Item already exists; no further action needed

            logging.info(f"Creating new PO item in Monday.com for Project ID {project_id} and PO Number {po_number}.")

            # Generate a Dropbox folder link for this folder
            folder_link = create_share_link(dbx, dropbox_path)
            if not folder_link:
                logging.error(f"Could not generate Dropbox link for {dropbox_path}")
                return

            logging.info(f"Generated Dropbox folder link: {folder_link}")

            # Set status based on contact data and PO type
            if vendor_type == "cc":
                status = "CC / PC"
                column_values = column_values_formatter(
                    project_id=project_id,
                    po_number=po_number,
                    vendor_name=vendor_name,
                    folder_link=folder_link,
                    status=status
                )
            else:
                # Attempt to find the contact associated with the vendor
                contact_info = find_contact_item_by_name(vendor_name)
                if contact_info:
                    contact_id = contact_info['item_id']
                    contact_columns = contact_info['column_values']
                    logging.info(f"Found contact ID for Vendor: {vendor_name}. Contact ID: {contact_id}")
                else:
                    contact_id = None
                    contact_columns = {}
                    logging.info(f"No contact found for Vendor: {vendor_name}. Proceeding without contact ID.")

                if contact_id and is_contact_info_complete(contact_columns):
                    status = "Approved"
                else:
                    status = "Tax Form Needed"

                logging.info(f"Set PO status to '{status}' based on PO type and contact data completeness.")

                column_values = column_values_formatter(
                    project_id=project_id,
                    po_number=po_number,
                    vendor_name=vendor_name,
                    folder_link=folder_link,
                    status=status,
                    contact_id=contact_id
                )

            # Get the group ID for the project and create the new item in Monday.com
            group_id = get_group_id_by_project_id(project_id)
            if not group_id:
                logging.error(f"Could not find group for Project ID {project_id}")
                return

            item_name = f"{vendor_name}"

            item_id = create_item(group_id, item_name, column_values)
            if not item_id:
                logging.error(f"Failed to create item in Monday.com for {item_name}")
                return

            logging.info(f"Created new item in Monday.com with ID {item_id} and status '{status}'.")

        except Exception as e:
            logging.error(f"Failed to process folder {dropbox_path}: {e}", exc_info=True)

    def process_file(self, file_id, file_name, dropbox_path, project_id, po_number, vendor_name, vendor_type, file_type,
                     file_number):
        """
        Processes a file by validating the file path, parsing the filename, matching PO numbers,
        identifying or creating a PO item in Monday.com, determining file type, processing invoice
        or receipt data, generating item descriptions, and adding subitems to Monday.com.
        """
        # Start processing
        logging.info(f"Starting processing of file: {dropbox_path}")

        try:
            # Access the singleton via get_dropbox_client()
            dbx_client = get_dropbox_client()
            dbx = dbx_client.dbx

            # Parse the filename to extract required information
            parsed_data = parse_filename(file_name)
            if not parsed_data:
                logging.error(f"Failed to parse filename for file: {dropbox_path}")
                update_event_status(file_id, 'failed')  # Update status if applicable
                return

            project_id_parsed, file_po_number, invoice_receipt_number, vendor_name_parsed, file_type_parsed = parsed_data

            # Verify that the PO number matches
            if file_po_number != po_number:
                logging.error(
                    f"PO number mismatch: File PO number ({file_po_number}) does not match Database PO number ({po_number}).")
                update_event_status(file_id, 'failed')  # Update status if applicable
                return

            logging.info(f"File PO number matches Database PO number: {file_po_number}")

            # Find the PO item in Monday.com
            po_item_id = find_item_by_project_and_po(project_id, po_number)
            if not po_item_id:
                logging.info(
                    f"PO item not found in Monday.com for Project ID {project_id} and PO number {po_number}. Initiating creation.")
                # If the PO item doesn't exist, call process_folder to create it
                process_folder(file_id, vendor_name, os.path.dirname(dropbox_path), project_id, po_number, vendor_name,
                               vendor_type)
                # After processing the folder, try to find the PO item again
                po_item_id = find_item_by_project_and_po(project_id, po_number)
                if not po_item_id:
                    logging.error(
                        f"Failed to create or find PO item after processing folder for Project ID {project_id} and PO number {po_number}.")
                    update_event_status(file_id, 'failed')  # Update status if applicable
                    return
                logging.info(f"Successfully created PO item in Monday.com with ID {po_item_id}.")

            else:
                logging.info(f"Found PO item in Monday.com: {po_item_id}")

            # Determine File Type and Process Accordingly
            if file_type_parsed in ['W9', 'W8-BEN', 'W8-BEN-E']:
                logging.info(f"File is a {file_type_parsed}. Linking to PO item.")
                # Link tax form to the PO item as a reference
                add_tax_form_to_invoice(po_item_id, dropbox_path, file_type_parsed, dbx)
                logging.info(f"Successfully linked {file_type_parsed} to PO item ID {po_item_id}.")
                return  # Tax form processing is complete here

            elif file_type_parsed == 'INVOICE' and vendor_type == 'vendor':
                # Check if the invoice has already been logged
                logging.info(f"File is an Invoice. Checking if it has already been logged.")
                if find_subitem_by_invoice_or_receipt_number(po_item_id, invoice_receipt_number=invoice_receipt_number):
                    logging.info(f"Invoice already logged -- Skipping processing.")
                    update_event_status(file_id, 'processed')  # Mark as processed since it's already logged
                    return

                # Process invoice data and line items
                logging.info(f"Processing Invoice: {file_name}")
                line_items, vendor_description = extract_invoice_data_from_file(dropbox_path)
                if not line_items:
                    logging.error(f"Failed to extract invoice data from file: {dropbox_path}")
                    update_event_status(file_id, 'failed')
                    return

                # Update vendor description if necessary
                if vendor_description:
                    update_vendor_description_in_monday(po_item_id, vendor_description)

                # Get Dropbox file link
                share_link = create_share_link(dbx, dropbox_path)
                if not share_link:
                    logging.error(f"Failed to create share link for {dropbox_path}")
                    update_event_status(file_id, 'failed')
                    return

                # Create line items in Monday.com
                for item in line_items:
                    # Defensive access to keys
                    description = item.get('description', 'No Description Provided')
                    if 'description' not in item:
                        logging.warning(f"'description' key missing in item: {item}")

                    line_item_column_values = subitem_column_values_formatter(
                        date=item['date'],
                        description=description,  # Correct key usage
                        rate=item['rate'],
                        quantity=item['quantity'],
                        status=None,
                        file_id=invoice_receipt_number,
                        account_number=item['account_number'],
                        link=share_link,
                        due_date=item['due_date']
                    )
                    create_subitem(po_item_id, vendor_name, line_item_column_values)

                logging.info(f"Successfully processed Invoice: {file_name}")

            elif file_type_parsed == 'RECEIPT' and vendor_type == 'cc':
                # Similar processing for receipts
                pass  # Implement as needed

            else:
                logging.error(f"Unknown file type '{file_type_parsed}' for file: {dropbox_path}")
                update_event_status(file_id, 'failed')
                return

            # If all processing is successful, mark the event as 'processed'
            update_event_status(file_id, 'processed')
            logging.info(f"Successfully processed file: {file_name}")

        except Exception as e:
            logging.error(f"Failed to process file {dropbox_path}: {e}", exc_info=True)
            update_event_status(file_id, 'failed')

